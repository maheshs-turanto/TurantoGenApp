@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_DocumentTemplate>
@using PagedList.Mvc;
@using GeneratorBase.MVC.UIPropertyHtmlHelper;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url.PathAndQuery;
	if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer != null ?  Request.UrlReferrer.PathAndQuery : "";
	}
	var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_DocumentTemplate");
	var EntityReflectorProperties = EntityReflector.Properties;
	var RecycleView = ViewData["ShowDeleted"] != null && Convert.ToBoolean(ViewData["ShowDeleted"]);
	var EntityDisplayName = EntityReflector != null ? (HttpUtility.JavaScriptStringEncode(Html.DisplayName(EntityReflector.DisplayName).ToString())) : "Document Template";
	var HideAction = GeneratorBase.MVC.Models.CustomHelperMethod.ShowHideAction("T_DocumentTemplate");
	var viewbagname = Convert.ToString(ViewBag.TemplatesName);
	var inlinegrid = Request.QueryString["inlinegrid"];
				 var T_DocumentDocumentsOnPage = GeneratorBase.MVC.Models.DocumentHelper.GetDocumentNames(Model.Where(p => p.T_Document != null).Select(p => p.T_Document.Value).ToList(),null);
}
@{
        if (!string.IsNullOrEmpty(ViewBag.T_DocumentTemplateRestrictDropdownValueRuleInLIneEdit))
        {
            @Html.Raw(ViewBag.T_DocumentTemplateRestrictDropdownValueRuleInLIneEdit);
        }
    }
<style>
.CEntityCount {
display:none !important;
}

</style>
<div id="T_DocumentTemplate">
	@if (RecycleView)
    {
        <span class="text text-danger"><span class="fa fa-recycle"></span> Recycle Bin</span>
        <br /><br />
    }
<script type="text/javascript">
    $(document).ready(function () {
	if ('@inlinegrid' == 'true' || '@inlinegrid' == 'True') {
            $("#T_DocumentTemplateGridHeader").addClass('collapse in');
    }
	 $(".pagination a").click(function (e) {
			PaginationClick(e, 'T_DocumentTemplate','@User.JavaScriptEncodedName')
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchT_DocumentTemplate").addClass('show');
			FSearchColumnsShowHide('@ViewData["HideColumns"]', 'T_DocumentTemplate');
        }
	    $("#SearchStringT_DocumentTemplate").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_DocumentTemplateSearch").bind("click", (function () {
                        }));
                $('#T_DocumentTemplateSearch').trigger("click");
                return false;
			}
        })
        $("#btnShowHideT_DocumentTemplate").mouseup(function () {
            if (document.getElementById('ColumnShowHideT_DocumentTemplate').className == 'collapse') {
				 $('#lblT_DocumentTemplate').css('display', 'none');
            }
        })
		if ($("#ErrmsgLockRecord").length > 0 && $("#ErrmsgLockRecord").text().length > 0) {
              $(".float-left.actionbar").hide();
			  if ('@inlinegrid' == 'true' || '@inlinegrid' == 'True') {
		        $(".inlinegridoption").hide();
		    }
		}
    });
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport, string ExportType = null)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = ViewBag.CurrentSort,
                isAsc = ViewBag.IsAsc,
				searchString = Request.QueryString["searchString"],
				 inlinegrid = Request.QueryString["inlinegrid"],
                currentFilter = ViewBag.CurrentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				ExportType = ExportType,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
				 IsDivRender = ViewBag.IsDivRender,
                
  T_AutoNoFrom = Request.QueryString["T_AutoNoFrom"],
  T_AutoNoFromhdn = Request.QueryString["T_AutoNoFromhdn"],
  T_AutoNoTo = Request.QueryString["T_AutoNoTo"],
  T_AutoNoTohdn = Request.QueryString["T_AutoNoTohdn"],
  T_DisplayOrderFrom = Request.QueryString["T_DisplayOrderFrom"],
  T_DisplayOrderFromhdn = Request.QueryString["T_DisplayOrderFromhdn"],
  T_DisplayOrderTo = Request.QueryString["T_DisplayOrderTo"],
  T_DisplayOrderTohdn = Request.QueryString["T_DisplayOrderTohdn"],
 T_Disable = Request.QueryString["T_Disable"],
				search=Request.QueryString["search"],
				SortOrder = Request.QueryString["SortOrder"],
				viewtype = ViewBag.TemplatesName,
				HideColumns = ViewData["HideColumns"],
				 GroupByColumn = ViewBag.GroupByColumn,
				 FilterCondition = ViewBag.FilterCondition,
				 inbuiltSearchCriteria = ViewBag.inbuiltSearchCriteria,
				 ShowDeleted = ViewData["ShowDeleted"]
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
				 inlinegrid = Request.QueryString["inlinegrid"],
                searchString = Request.QueryString["searchString"],
                isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                page = ViewBag.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				ExportType = ExportType,
				FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
				IsDivRender = ViewBag.IsDivRender,
  T_AutoNoFrom = Request.QueryString["T_AutoNoFrom"],
  T_AutoNoFromhdn = Request.QueryString["T_AutoNoFromhdn"],
  T_AutoNoTo = Request.QueryString["T_AutoNoTo"],
  T_AutoNoTohdn = Request.QueryString["T_AutoNoTohdn"],
  T_DisplayOrderFrom = Request.QueryString["T_DisplayOrderFrom"],
  T_DisplayOrderFromhdn = Request.QueryString["T_DisplayOrderFromhdn"],
  T_DisplayOrderTo = Request.QueryString["T_DisplayOrderTo"],
  T_DisplayOrderTohdn = Request.QueryString["T_DisplayOrderTohdn"],
 T_Disable = Request.QueryString["T_Disable"],
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = ViewBag.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = ViewBag.GroupByColumn,
		 FilterCondition = ViewBag.FilterCondition,
		 inbuiltSearchCriteria = ViewBag.inbuiltSearchCriteria,
		 ShowDeleted = ViewData["ShowDeleted"]
            };
        }
    }
}
   <div id="T_DocumentTemplateGridHeader" class="">
@if (ViewData["IsdrivedTab"]==null)
{
	    if (!RecycleView)
        { 
            <div class="float-left actionbar">
			@if (User.CanAdd("T_DocumentTemplate"))
			{
			<a id="addInlineRowT_DocumentTemplate" style="display:none;"
			 onclick="@Html.Raw("OpenInlineEntity(this,'T_DocumentTemplate','" + Url.Action("CreateInline", "T_DocumentTemplate", new {AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "')")">
			</a>
                 <div class="btn-group mb-1" id='@ViewData["HostingEntity"]_T_DocumentTemplate'>
				 <div class="dropdown">
				  <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
				  <i class="fa fa-plus-circle"></i> Add <span class="caret"></span>
				  </button>
                      <ul class="dropdown-menu multi-level" role="menu" aria-labelledby="dropdownMenu">
					 @if (User.CanAdd("T_DocumentTemplate"))
					 {
								if (ViewBag.IsDivRender == true)
                            { <li class="dropdown-item">
                                <a data-original-title="Full Add" data-placement="top" onclick="LoadDivInsideTab('@ViewData["AssociatedType"]','','@Html.Raw(Url.Action("Create", "T_DocumentTemplate", new { RenderPartial = true, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), viewtype = viewbagname ,}))')" alt="Full Add" title="Full Add">
                                    <i class="fa fa-plus-circle" ></i> Full Add
                                </a>
								</li>
                            }
                            else
                            {
							<li class="dropdown-item">
					<a  data-original-title="Full Add" data-placement="top" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_DocumentTemplate", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname }, null) + "');") alt="Full Add" title="Full Add">
						<i class="fa fa-plus-circle" ></i> Full Add
					</a>
					</li>
							}
	
}		
  </ul>
 </div>
</div>
	  }
<div class="btn-group">
                   </div>
	@if (ViewBag.IsDivRender == null || ViewBag.IsDivRender == false)
	{
if ((User.CanEdit("T_DocumentTemplate") && User.CanUseVerb("BulkUpdate", "T_DocumentTemplate", User)) || (User.CanDelete("T_DocumentTemplate") && User.CanUseVerb("BulkDelete", "T_DocumentTemplate", User)))
{
<div class="btn-group mb-1">
<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu3" data-original-title="Bulk Actions" data-toggle="dropdown" href="#">
           <span class="fa fa-wrench"></span> Bulk <i class="caret"></i>
     </button>
        <div class="dropdown-menu" role="menu">
	@if ( User.CanEdit("T_DocumentTemplate")&&  User.CanUseVerb("BulkUpdate","T_DocumentTemplate",User))
	{
		<a class="dropdown-item" data-placement="top" style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup"
			onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update "+EntityDisplayName+"','dvPopup','" + Url.Action("BulkUpdate", "T_DocumentTemplate", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "','T_DocumentTemplate')")"> <i class="fa fa-edit" aria-hidden="true"></i> 
Update</a>
	}
 
	 @if ( User.CanDelete("T_DocumentTemplate") && User.CanUseVerb("BulkDelete","T_DocumentTemplate",User))
     {
		<a class="dropdown-item" style="cursor:pointer;" onclick="PerformBulkOperation(this,'T_DocumentTemplate','Bulk Delete','@Url.Action("DeleteBulk", "T_DocumentTemplate")','@ViewData["AssociatedType"]');">
		<i class="fa fa-trash" aria-hidden="true"></i>
 Delete
 </a>
	 }
                        </div>
</div>
                    </div>
  }
}
@if (ViewBag.IsDivRender == null || ViewBag.IsDivRender == false)
{
<div class="btn-group mb-1">
<div class="dropdown">
	   <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-original-title="Filter-Groupby" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Tools
            </button>
                            <div class="dropdown-menu multi-level" role="menu">
		@if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
			{
				<a class="dropdown-item" id="showAssociateBtn"  data-placement="top" data-original-title="Associate Document Template with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','"+EntityDisplayName+"','dvPopupBulkOperation','" + Url.Action("Index", "T_DocumentTemplate", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now,viewtype = viewbagname }) + "')")">
					<i class="fa fa-plus-circle" ></i> Bulk Associate
				</a>
			<script>
				if($("#HostingEntityDisplayValue").attr('id')==undefined)
				$("#showAssociateBtn").hide();
			</script>
			}
        
			@if ( User.CanAdd("T_DocumentTemplate") && User.CanUseVerb("ImportExcel", "T_DocumentTemplate", User))
			{
				 <a  class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_DocumentTemplate", new { filetype = "xls", AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), UrlReferrer = BackUrl }) + "');") alt="Import Excel" title="Import Excel">
                        <i class="fa fa-upload"></i> Import Excel
                 </a>
			}
			@if ( User.CanAdd("T_DocumentTemplate") && User.CanUseVerb("ImportCSV", "T_DocumentTemplate", User))
			{
				 <a  class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_DocumentTemplate", new { filetype = "csv", AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), UrlReferrer = BackUrl }) + "');") alt="Import CSV" title="Import CSV">
                        <i class="fa fa-upload"></i> Import CSV
                 </a>
			}
	     		@if (User.CanView("T_DocumentTemplate") && User.CanUseVerb("ExportExcel", "T_DocumentTemplate", User))
                {
					<a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_DocumentTemplate",getSortHtmlAttributes(null, false, null, true, "xls"), null) + "');") alt="Export Excel" title="Export Excel">
						<i class="fa fa-download"></i> Export Excel
					</a>
				}
				@if (User.CanView("T_DocumentTemplate") && User.CanUseVerb("ExportCSV", "T_DocumentTemplate", User))
                {
					<a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_DocumentTemplate",getSortHtmlAttributes(null, false, null, true, "csv"), null) + "');") alt="Export CSV" title="Export CSV">
						<i class="fa fa-download"></i> Export CSV
					</a>
				}
		         </div>
        </div>
       </div>
}
</div>				
}
				<div class="float-right" style="">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_DocumentTemplate", ViewBag.CurrentFilter as string, null, new { @class = "form-control listsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_DocumentTemplateSearch" onclick="SearchClick(event, 'T_DocumentTemplate', '@Html.Raw(Url.Action("Index", "T_DocumentTemplate", new {inlinegrid = inlinegrid, ShowDeleted = ViewData["ShowDeleted"], IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = viewbagname }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-secondary tip-top"   alt="Grid Search" title="Search on grid"><span class="fa fa-search"></span></a>
								<a id="T_DocumentTemplateDeepSearch" onclick="SearchClick(event, 'T_DocumentTemplate', '@Html.Raw(Url.Action("Index", "T_DocumentTemplate", new {inlinegrid = inlinegrid, ShowDeleted = ViewData["ShowDeleted"], IsFilter = ViewData["IsFilter"], IsDeepSearch = true, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString() ,viewtype = viewbagname}))','@User.JavaScriptEncodedName');" data-original-title="Deep Search" class="btn btn-secondary tip-top" alt="Deep Search" title="Search deep"><span class="fa fa-search-plus"></span></a>
								<a id="T_DocumentTemplateCancel" class="btn btn-secondary collapse-data-btn tip-top" onclick="CancelSearch('T_DocumentTemplate','@Html.Raw(Url.Action("Index", "T_DocumentTemplate", new {inlinegrid = inlinegrid, ShowDeleted = ViewData["ShowDeleted"],IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), HideColumns = ViewData["HideColumns"], viewtype = viewbagname }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top"  alt="Clear Search" title="Clear Search">
                                    <span class="fa fa-minus-circle"></span>
                                </a>
                                <a id="T_DocumentTemplateSearchCancel" class="btn btn-secondary collapse-data-btn tip-top" onclick="CancelSearch('T_DocumentTemplate','@Html.Raw(Url.Action("Index", "T_DocumentTemplate", new {inlinegrid = inlinegrid, ShowDeleted = ViewData["ShowDeleted"], IsFilter=ViewData["IsFilter"], itemsPerPage=Convert.ToInt32(ViewBag.PageSize),HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], viewtype = viewbagname}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top"  alt="Refresh Grid" title="Refresh Grid">
                                    <span class="fa fa-sync-alt"></span>
                                </a>
								<a id="T_DocumentTemplateRefresh" class="fa fa-refresh d-none" onclick="CancelSearch('T_DocumentTemplate','@Html.Raw(Url.Action(ActionNameUrl, "T_DocumentTemplate", getSortHtmlAttributes(ViewBag.CurrentSort, false,null, false)))','@User.Name')"></a>
	@if (ViewData["HostingEntity"]==null)
	{ 
					<a data-toggle="dropdown" data-original-title="Queries" class="btn btn-secondary tip-top" alt="Queries" title="Queries"><span class="fa fa-binoculars"> <span class="caret"></span></a>
                        <ul class="dropdown-menu" role="menu">
                            <li class="dropdown-item">
                                <a href="@(Url.Action("SetFSearch", "T_DocumentTemplate")+Request.Url.Query)" data-placement="top" alt="Define new query" title="Define new query">
                                    <span class="fa fa-plus" style="margin-right:3px; font-size: xx-small;"></span> New Query
                                </a>
                            </li>
                            <li class="dropdown-item">
                                @foreach (var fsearch in User.GetFacetedSearch("T_DocumentTemplate", User))
                                {
                                    <a href="~/@fsearch.T_LinkAddress&ShowDeleted=@Convert.ToString(ViewData["ShowDeleted"])" data-placement="top" alt="@fsearch.T_Description" title="@fsearch.T_Description">
                                        <span class="fa fa-filter" style="margin-right:3px; font-size: xx-small;"></span> @fsearch.T_Name
                                    </a>
                                }
                            </li>
                        </ul>
	}
                            </div>
                        </div>
                    </div>
}
			 <div style="clear:both"></div>
	@if (ViewBag.SearchResult != "" )
                            {
			<div id="fsearchT_DocumentTemplate" class="collapse QueryResult p-2 col-sm-12 m-0 bg-light border row" >
                        <div class="col-sm-6">  @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, ""))</div>
						<div class="col-sm-6 text-right">
						@if (ActionNameUrl == "FSearch" && ViewData["HostingEntity"] != null)
						{
							<a onclick="window.location.reload();" class="btn btn-primary btn-sm"><span class="fa fa-times-circle"></span> Clear</a>
						}
						else
						{ 
							<a href="@Url.Action("Index", "T_DocumentTemplate",new{ShowDeleted = ViewData["ShowDeleted"], viewtype = viewbagname})" class="btn btn-primary btn-sm"><span class="fa fa-times-circle"></span> Clear</a>
						}
						 <a href="@(Url.Action("SetFSearch", "T_DocumentTemplate")+Request.Url.Query)" class="btn btn-primary btn-sm"><span class="fa fa-edit"></span> Modify</a>
						 @if (User.CanAdd("T_FacetedSearch"))
                         { 
						 <a onclick="@Html.Raw("OpenPopUpEntity('addPopup','Query','dvPopup','" + Url.Action("CreateQuick", "T_FacetedSearch", new { EntityName="T_DocumentTemplate",Url=Html.Raw(Request.Url.PathAndQuery) }) + "')")" class="btn btn-primary btn-sm"><span class="fa fa-floppy-o"></span> Save</a>
						 }
            </div>
			</div>
	}
@{Html.RenderPartial("~/Views/T_DocumentTemplate/SetFSearchGrid.cshtml", new GeneratorBase.MVC.Models.T_DocumentTemplate());}
</div>
	  @if (Model.Count > 0 && Model.TotalItemCount > 10)
      {
                    <div id="pagination">
					@if(Model.TotalItemCount > Convert.ToInt32(ViewBag.PageSize))
					{
						   @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_DocumentTemplate", getSortHtmlAttributes(null, true, page, false)),
						   new PagedListRenderOptions
						   {
							   FunctionToTransformEachPageLink = (liTag, aTag) =>
							   {
								   aTag.Attributes.Add("class", "page-link");
								   liTag.InnerHtml = aTag.ToString();
								   return liTag;
							   },
							   LiElementClasses = new[] { "page-item" },
							   UlElementClasses = new[] { "pagination pagination-sm" }
						   })
					}
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_DocumentTemplate",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_DocumentTemplate','"
							 + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_DocumentTemplate",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
							<script>
                                    $(document).ready(function () {
                                        $.validator.setDefaults({
                                            ignore: "#pagesizelistT_DocumentTemplate"
                                        })
                                    }); 
                                </script>
                        </div>
                    </div>
					<div style="clear:both"></div>
        }
	  <div id="Des_Table" class="table-responsive" style="margin-top:5px;">
                            <table class="table table-hover default-bordered default-condensed newlist">
                              <thead id="theaderT_DocumentTemplate">
                <tr>
@if ((ViewBag.IsDivRender == null || ViewBag.IsDivRender == false)  && ((User.CanEdit("T_DocumentTemplate") && User.CanUseVerb("BulkUpdate", "T_DocumentTemplate", User)) || (User.CanDelete("T_DocumentTemplate") && User.CanUseVerb("BulkDelete", "T_DocumentTemplate",User))))
{
	 <th class="col0" style="width:20px;" scope="col" data-sort-ignore="true">
		<input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);" />
        @Html.Hidden("SelectedItems")
	</th>
}
<th  scope="col" class="col1" style="width:75px;" alt="Actions" title="Actions" data-sort-ignore="true">Actions</th>
@if(User.CanView("T_DocumentTemplate","T_AutoNo") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_AutoNo");
			<th scope="col" class="col2">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_DocumentTemplate",getSortHtmlAttributes("T_AutoNo", false, null, false),new {  @onclick = "SortLinkClick(event,'T_DocumentTemplate');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AutoNo")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AutoNo")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_DocumentTemplate","T_EntityName") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_EntityName");
			<th scope="col" class="col3">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_DocumentTemplate",getSortHtmlAttributes("T_EntityName", false, null, false),new {  @onclick = "SortLinkClick(event,'T_DocumentTemplate');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_EntityName")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_EntityName")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_DocumentTemplate","T_Name") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_Name");
			<th scope="col" class="col4">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_DocumentTemplate",getSortHtmlAttributes("T_Name", false, null, false),new {  @onclick = "SortLinkClick(event,'T_DocumentTemplate');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Name")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Name")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_DocumentTemplate","T_Description") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_Description");
			<th scope="col" class="col5">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_DocumentTemplate",getSortHtmlAttributes("T_Description", false, null, false),new {  @onclick = "SortLinkClick(event,'T_DocumentTemplate');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Description")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Description")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_DocumentTemplate","T_Document") && User.CanView("Document"))
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_Document");
			<th scope="col" class="col6">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_DocumentTemplate",getSortHtmlAttributes("T_Document", false, null, false),new {  @onclick = "SortLinkClick(event,'T_DocumentTemplate');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Document")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Document")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_DocumentTemplate","T_AllowedRoles") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_AllowedRoles");
			<th scope="col" class="col7">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_DocumentTemplate",getSortHtmlAttributes("T_AllowedRoles", false, null, false),new {  @onclick = "SortLinkClick(event,'T_DocumentTemplate');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_AllowedRoles")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_AllowedRoles")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_DocumentTemplate","T_DisplayType") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_DisplayType");
			<th scope="col" class="col8">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_DocumentTemplate",getSortHtmlAttributes("T_DisplayType", false, null, false),new {  @onclick = "SortLinkClick(event,'T_DocumentTemplate');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_DisplayType")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_DisplayType")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
@if(User.CanView("T_DocumentTemplate","T_Disable") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_Disable");
			<th scope="col" class="col9">
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_DocumentTemplate",getSortHtmlAttributes("T_Disable", false, null, false),new {  @onclick = "SortLinkClick(event,'T_DocumentTemplate');" }) 
				@if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "T_Disable")
                {<i class="fa fa-sort-desc"></i>}
                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "T_Disable")
                {<i class="fa fa-sort-asc"></i>}
			</th>
}
</tr>
<tr id="trInlineT_DocumentTemplate" style="display:none; padding:0px!important">
                <th id="tdInlineT_DocumentTemplate" colspan="10" style="padding: 0px!important;">

                </th>
</tr>
</thead>
 
@{ bool isFirst = true; var oldKey = string.Empty; }
                                @foreach (var item in Model)
                                {
									List<string> hiddenProperties = new List<string>();
									if (User.businessrules.Any(p => p.EntityName == "T_DocumentTemplate" && p.ActionTypeID.Contains(6)))
									{
									   hiddenProperties = item.ApplyHiddenRule(User.businessrules, "T_DocumentTemplate");
									}
																			bool isRecordReadOnly = false;
									if (User.businessrules.Any(p => p.EntityName == "T_DocumentTemplate" && (p.ActionTypeID.Contains(1) ||  p.ActionTypeID.Contains(11))))
									{
										isRecordReadOnly = item.ApplyLockRecordRule((object)item, User, User.businessrules.Where(p => p.EntityName == "T_DocumentTemplate" && (p.ActionTypeID.Contains(1) ||  p.ActionTypeID.Contains(11))).ToList(), "T_DocumentTemplate");
									}
									if (ViewData["HostingEntity"] != null && !isRecordReadOnly)
									{
										isRecordReadOnly = item.ApplyLockRecordRule((object)ViewBag.HostingEntityIDData, User, User.businessrules.Where(p => p.EntityName == ViewData["HostingEntity"].ToString() && (p.ActionTypeID.Contains(1) || p.ActionTypeID.Contains(11))).ToList(), ViewData["HostingEntity"].ToString());
									}
									
									if (ViewBag.IsGroupBy != null && Convert.ToBoolean(ViewBag.IsGroupBy))
                                    {
                                        var groupKey = item.m_DisplayValue;
                                        if (oldKey != groupKey)
                                        {
                                            isFirst = true;
                                            oldKey = item.m_DisplayValue;
                                        }
                                        if (isFirst || (string.IsNullOrEmpty(oldKey)))
                                        {
                                            isFirst = false;
                                            string groupString = string.Empty;
                                            <tr>
                                                <td colspan="10" style="background: #EDF5FA; font-weight:bold"> @groupKey @groupString</td>
                                            </tr>
                                        }
                                    }
      <tr scope="row">
@if ((ViewBag.IsDivRender == null || ViewBag.IsDivRender == false)  && ((User.CanEdit("T_DocumentTemplate") && User.CanUseVerb("BulkUpdate", "T_DocumentTemplate", User)) || (User.CanDelete("T_DocumentTemplate") && User.CanUseVerb("BulkDelete", "T_DocumentTemplate",User))))
{	
	 <td style="width: 20px;">
			 <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" style="position:absolute"/>
	</td>
}	
		   <td style="width: 70px;" class="btnaction" rowid="btnrow_@item.Id" businessrule='@Html.Raw(Url.Action("ApplyBusinessRuleBeforeById", new { objectId = item.Id }))'>
	   <div style="display:none;">
			<div class="btn-group tdDoubleClickGroup" >
				<a onclick="SavePropertiesValue(this,'T_DocumentTemplate',@item.Id,'@Url.Action("SavePropertiesValue")');" class="btn btn-xs btn-lightBlue" alt="Save" title="Save" style="font-size:1rem;padding:0px 5px;color:white;">
					<i class="fa fa-save"></i> 
				</a>
				<a onclick="$('#T_DocumentTemplateRefresh').click();" class="btn btn-xs btn-default" alt="Cancel" title="Cancel" style="font-size:1rem;padding:0px 5px;">
					<i class="fa fa-close"></i> 
				</a>
			</div>
		</div>
			   <div id="DivbutEdit">
		<div class="btn-group">
		@if (User.CanEdit("T_DocumentTemplate"))
        {
			 var editIconClass = isRecordReadOnly ? "fa fa-eye" : "fa fa-pencil-alt";
			 var edittitle = isRecordReadOnly ? "View" : "Edit";
			if (ViewBag.IsDivRender == true)
            {
                <a onclick="LoadDivInsideTab('@ViewData["AssociatedType"]','','@Html.Raw(Url.Action("Edit", "T_DocumentTemplate", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), RenderPartial = ViewBag.IsDivRender, viewtype = viewbagname, RecordReadOnly = isRecordReadOnly  }, null))')" class="btn btn-info btn-xs" alt="@edittitle" title="@edittitle">
                    <i class="fa fa-pencil-alt"></i>
                </a>
            }
            else
            {
                <a href="@Url.Action("Edit","T_DocumentTemplate", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname, RecordReadOnly = isRecordReadOnly  },null)" class="btn btn-info btn-xs" alt="@edittitle" title="@edittitle"> 
					<i class="@editIconClass"></i>
				</a>
            }	
		}
		@if (!User.CanEdit("T_DocumentTemplate"))
                    {
            <a href="@Url.Action("Details", "T_DocumentTemplate", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), viewtype = viewbagname }, null)" class="btn btn-secondary btn-xs" >
                <i class="fa fa-eye"></i>
            </a>
        }
			<button class="btn dropdown-toggle btn-secondary btn-xs" type="button" data-toggle="dropdown" aria-expanded="true">
                 <span class="sr-only"></span>
           </button>
			<ul class="dropdown-menu">
			 @if (User.CanEdit("T_DocumentTemplate") && isRecordReadOnly)
                {
                <li>
                        <a class="dropdown-item" href="@Url.Action("Edit","T_DocumentTemplate", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname, RecordReadOnly = isRecordReadOnly },null)"><i class="fa fa-eye"></i>  View</a>
                </li>            
                }
                else
                {
                    <li>
                    <a class="dropdown-item" href="@Url.Action("Details", "T_DocumentTemplate", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)" alt="View" title="View"><i class="fa fa-eye"></i>  View</a>
                </li>
                }

				
			@if (!User.CanEdit("T_DocumentTemplate"))
                    {
}

			<div class="dropdown-divider"></div>	
			@if (User.CanEdit("T_DocumentTemplate"))
					{
				 <li>
						<a  class="dropdown-item nohref" id='aBtnQuickEditT_DocumentTemplate_@item.Id' style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntityQuickEdit('addPopup','Edit " + (EntityDisplayName) + "','dvPopup','" + Url.Action("EditQuick", "T_DocumentTemplate", new
																			{
																				id = item.Id,
																				UrlReferrer = Request.Url.PathAndQuery,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = viewbagname,RecordReadOnly = isRecordReadOnly
																			}) + "')")"> <i class="fa fa-pencil-alt"></i> Quick Edit</a>
				</li>
				}
				@if (User.CanEdit("T_DocumentTemplate") && !isRecordReadOnly)
                {
				<li>
                        <a class="dropdown-item" href="@Url.Action("Edit","T_DocumentTemplate", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname },null)"><i class="fa fa-edit"></i>  Edit</a>
                </li>             
				}
<div class="dropdown-divider"></div>

<div class="dropdown-divider"></div>
			@if (User.CanDelete("T_DocumentTemplate") && !isRecordReadOnly)
                 {
				 <li class="divider" style="clear:both"></li>
				<li>
                    <a class="dropdown-item" href="@Url.Action("Delete", "T_DocumentTemplate", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname }, null)"><i class="fa fa-times-circle" style="color: #E7574B;"></i> Delete</a>
                </li>
				}
			</ul>
		</div>
		</div>
	</td>
		@if(User.CanView("T_DocumentTemplate","T_AutoNo"))
{
		
		<td onclick="OpenQuickEdit('T_DocumentTemplate','@item.Id',event);"  title="@item.T_AutoNo">
		            @Html.DisplayFor(modelItem => item.T_AutoNo)
        </td>
}
@if(User.CanView("T_DocumentTemplate","T_EntityName"))
{
		
		<td onclick="OpenQuickEdit('T_DocumentTemplate','@item.Id',event);"  title="@item.T_EntityName">
		            @Html.DisplayFor(modelItem => item.T_EntityName)
        </td>
}
@if(User.CanView("T_DocumentTemplate","T_Name"))
{
		
		<td onclick="OpenQuickEdit('T_DocumentTemplate','@item.Id',event);"  title="@item.T_Name">
		            @Html.DisplayFor(modelItem => item.T_Name)
        </td>
}
@if(User.CanView("T_DocumentTemplate","T_Description"))
{
		
		<td onclick="OpenQuickEdit('T_DocumentTemplate','@item.Id',event);"  title="@item.T_Description">
		            @Html.DisplayFor(modelItem => item.T_Description)
        </td>
}
@if(User.CanView("T_DocumentTemplate","T_Document") && User.CanView("Document"))
{
		<td title="@item.T_Document">
		 @if(!string.IsNullOrEmpty(Html.DisplayFor(modelItem => item.T_Document).ToString())){
		 			 <a href="@Url.Action("Download", "Document", new { id = item.T_Document })"> @T_DocumentDocumentsOnPage.FirstOrDefault(p=>p.Key == item.T_Document.Value).Value</a>
		  }else{ <label>NA</label>} 
        </td>
		}
@if(User.CanView("T_DocumentTemplate","T_AllowedRoles"))
{
		
		<td onclick="OpenQuickEdit('T_DocumentTemplate','@item.Id',event);"  title="@item.T_AllowedRoles">
		            @Html.DisplayFor(modelItem => item.T_AllowedRoles)
        </td>
}
@if(User.CanView("T_DocumentTemplate","T_DisplayType"))
{
		
		<td onclick="OpenQuickEdit('T_DocumentTemplate','@item.Id',event);"  title="@item.T_DisplayType">
		            @Html.DisplayFor(modelItem => item.T_DisplayType)
        </td>
}
@if(User.CanView("T_DocumentTemplate","T_Disable"))
{
		
		<td onclick="OpenQuickEdit('T_DocumentTemplate','@item.Id',event);"  title="@item.T_Disable">
		            @Html.ValueFor(modelItem => item.T_Disable)
        </td>
}
                                </tr>
                            }
                    </table>
                </div>
   			    @if (Model.Count > 0 && Model.TotalItemCount > 10)
                {
                    <div id="pagination">
					@if(Model.TotalItemCount > Convert.ToInt32(ViewBag.PageSize))
					{
						 @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_DocumentTemplate", getSortHtmlAttributes(null, true, page, false)),
						   new PagedListRenderOptions
						   {
							   FunctionToTransformEachPageLink = (liTag, aTag) =>
							   {
								   aTag.Attributes.Add("class", "page-link");
								   liTag.InnerHtml = aTag.ToString();
								   return liTag;
							   },
							   LiElementClasses = new[] { "page-item" },
							   UlElementClasses = new[] { "pagination pagination-sm" }
						   })
				}
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new { @id = "pagesizelistT_DocumentTemplate",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_DocumentTemplate','"
							 + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_DocumentTemplate",
							 getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
							<script>
                                    $(document).ready(function () {
                                        $.validator.setDefaults({
                                            ignore: "#pagesizelistT_DocumentTemplate"
                                        })
                                    }); 
                                </script>
                        </div>
                    </div>
                }
				@Html.DropDownList("EntityT_DocumentTemplateDisplayValue", null,null, new { @Style = "display:none;" })
</div>
 
