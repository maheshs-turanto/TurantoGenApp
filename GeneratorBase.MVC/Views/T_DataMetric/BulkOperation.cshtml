@model PagedList.IPagedList<GeneratorBase.MVC.Models.T_DataMetric>
@using PagedList.Mvc;
@using GeneratorBase.MVC.UIPropertyHtmlHelper;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
}
@Scripts.Render("~/bundles/select2js")
@Styles.Render("~/Content/select2css")
<script>
	$(".js-example-basic-multiple").select2({ placeholder: "Select/Search", allowClear: true });
    function UpdateRecords() {
        var selectedvalues = $("#idvalues").val().substr(1).split(",");
        var url1 = '@Url.Action("BulkAssociate")';
        var entity = 'T_DataMetric';
        UpdateRecordsFunction(selectedvalues, selectedvalues, url1, entity, '@ViewData["AssociatedType"]', '@ViewData["HostingEntity"]', '@ViewData["HostingEntityID"]');
    }
</script>
@if (ViewData["BulkAssociate"] != null)
{
    @Html.Hidden("idvalues")
}
<div id="T_DataMetric" class="T_DataMetric">
    @if (ViewBag.ColumnMapping == null && ViewBag.ImportError == null && ViewBag.ConfirmImportData == null)
    {
		 <script type="text/javascript">
            $(document).ready(function () {
                $(".pagination a").click(function (e) {
                    PaginationClick(e, 'T_DataMetric');
                })
                $("#dvPopupBulkOperation input[name=SearchStringT_DataMetric]").keypress(function (e) {
                    if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                        $('#dvPopupBulkOperation').find("a.bulk").bind("click", (function () {
                        }));
                        $('#dvPopupBulkOperation').find("a.bulk").trigger("click");
                        return false;
                    }
                })
            });
        </script>
        @functions {
            object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
            {
                if (IsPaging)
                {
                    return new
                    {
                        page,
                        sortBy = ViewBag.CurrentSort,
                        isAsc = ViewBag.IsAsc,
                        currentFilter = ViewBag.CurrentFilter,
                        HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                        AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                        HostingEntityID = ViewData["HostingEntityID"],
                        IsExport = IsExport,
                        FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                        IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                        BulkOperation = ViewData["BulkOperation"],
                        search = Request.QueryString["search"],
						caller = ViewData["caller"],
						BulkAssociate = ViewData["BulkAssociate"],
                    };
                }
                else
                {
                    return new
                    {
                        sortBy = sortby,
                        currentFilter = Request.QueryString["currentFilter"],
                        searchString = Request.QueryString["searchString"],
                        isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                        page = ViewBag.Pages,
                        HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                        HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                        AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                        IsExport = IsExport,
                        FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                        IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                        BulkOperation = ViewData["BulkOperation"],
                        search = Request.QueryString["search"],
						caller = ViewData["caller"],
   					    BulkAssociate = ViewData["BulkAssociate"],
                    };
                }
            }
        }
        <div class="row">
            <div class="col-md-12 col-sm-12 col-sx-12">
                <div class="panel panel-default">
                    <div class="panel-heading clearfix" style="margin:0px; padding:8px;">
                        <div class="pull-right" style="width:200px;">
                            <div class="input-group">
                                @Html.TextBox("SearchStringT_DataMetric", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @placeholder = "Search" })
                                <div class="input-group-btn">
                                    <a id="T_DataMetricSearch" onclick="SearchClick(event, 'T_DataMetric', '@Html.Raw(Url.Action("Index", "T_DataMetric", new { BulkAssociate = ViewData["BulkAssociate"], caller = ViewData["caller"],IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), BulkOperation = ViewData["BulkOperation"], HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now }))');" data-original-title="Grid Search" class="btn btn-default btn-default tip-top bulk" style="padding:6px;"><span class="fa fa-search"></span></a>
                                    <button id="T_DataMetricCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearchBulk('T_DataMetric','@Html.Raw(Url.Action("Index", "T_DataMetric", new {caller = ViewData["caller"], BulkOperation = ViewData["BulkOperation"], IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))')" data-original-title="Clear Search" data-placement="top" style="padding:6px;">
                                        <span class="fa fa-minus-circle"></span>
                                    </button>
                                    <button id="T_DataMetricSearchCancel" type="button" class="btn btn-default btn-default collapse-data-btn tip-top" onclick="CancelSearchBulk('T_DataMetric','@Html.Raw(Url.Action("Index", "T_DataMetric", new { BulkAssociate = ViewData["BulkAssociate"], caller = ViewData["caller"],IsFilter = ViewData["IsFilter"],HostingEntity = Convert.ToString(ViewData["HostingEntity"]), BulkOperation = ViewData["BulkOperation"], HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))')" data-original-title="Refresh Grid" data-placement="top" style="padding:6px;">
                                        <span class="fa fa-refresh"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="panel-body" style="margin:0px; padding:8px;">
                        <div id="Des_Table" class="table-responsive">
                            <table class="table table-striped default-bordered table-hover default-condensed">
                                <thead>
                                    <tr>
                                        <th class="col2">
                                            Select
                                        </th>
                                        @if (User.CanView("T_DataMetric"))
                                        {
                                            <th class="col2">
                                                @Html.ActionLink("Display Value", ActionNameUrl, "T_DataMetric", getSortHtmlAttributes("DisplayValue", false, null, false), new { @onclick = "SortLinkClick(event,'T_DataMetric');" })
                                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "DisplayValue")
                                                {<i class="fa fa-sort-desc"></i>}
                                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "DisplayValue")
                                                {<i class="fa fa-sort-asc"></i>}
                                            </th>
                                        }
                                    </tr>
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            @if(Convert.ToString(ViewData["BulkOperation"]) == "multiple")
                                            {
												if (ViewData["BulkAssociate"] != null)
                                                {
                                                    <td style="width: 20%;">
                                                        <input type="checkbox" onclick="Update(this,'@item.Id','@item.DisplayValue');" />
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td style="width: 20%;">
                                                        <input type="checkbox" onclick="Set(this,'@item.Id','@item.DisplayValue');" />
                                                    </td>
                                                }
                                            }
                                            else
                                            {
												<td style="width: 20%;">
													<input type="button" value="Select" class="btn btn-primary btn-xs" onclick="SetSingle(this,'@item.Id','@item.DisplayValue');" />
												</td> 
                                            }
											                                            @if (User.CanView("T_DataMetric"))
                                            {
                                                <td>
                                                  @Html.LabelForUIProperty(item, "Label")
                                                </td>
                                            }
											                                        </tr>
                                    }
                            </table>
                        </div>
                        @if (Model.Count > 0)
                        {
                            <div id="pagination">
                               @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "T_DataMetric", getSortHtmlAttributes(null, true, page, false)),

               new PagedListRenderOptions
               {
                   FunctionToTransformEachPageLink = (liTag, aTag) =>
                   {
                       aTag.Attributes.Add("class", "page-link");
                       liTag.InnerHtml = aTag.ToString();
                       return liTag;
                   },
                   LiElementClasses = new[] { "page-item" },
                   UlElementClasses = new[] { "pagination pagination-sm" }

               }
)
                                <div class="fixPageSize">
                                    Page Size :
                                    @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value"), new { @id = "pagesizelistT_DataMetric", 
									@onchange = "pagesizelistChange(event,'T_DataMetric')", 
									@Url = Html.Raw(@Url.Action(ActionNameUrl, "T_DataMetric", 
									getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
									null, false), null)) })
                                    <span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
		if (ViewData["BulkAssociate"] != null)
        {
            <input type="button" class="btn btn-primary btn-sm fixbulkbutton" value="Associate with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" onclick="UpdateRecords();" />
        }
    }
</div>
  
