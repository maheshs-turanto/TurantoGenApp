@model GeneratorBase.MVC.Models.ReportList
@using PagedList;
@{
    ViewBag.Title = "Edit SSRS Report";
    var EditPermission = User.CanEditItem("ReportList", Model, User);
    var DeletePermission = User.CanDeleteItem("ReportList", Model, User);
    var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "ReportList");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "SSRS Report";
    if (ViewBag.IsPartial != null && ViewBag.IsPartial == true)
    {
        Layout = null;
    }
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("ReportList", Property))
        {
            return new { @class = "form-control" };
        }
        return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])'.length > 0) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                $('#' + hostingEntityName + 'ID').attr("lock","true");
                // $('#' + hostingEntityName + 'ID').trigger("change");
                $("input[type='radio'][name='" + hostingEntityName + "ID']").each(function () {
                    if (!this.checked)
                        this.closest("li").style.display = "none";
                });
            }
            if ($.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') != null) {
                $('a[href="#' + $.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') + '"]').click();
            }
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.ReportListIsHiddenRule))
    {
        @Html.Raw(ViewBag.ReportListIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.ReportListIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.ReportListIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.ReportListIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.ReportListIsSetValueUIRule);
    }
}
<style>
   #Lnk_Print {
        display: none !important;
    }
</style>

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-6">
        <ol class="breadcrumb">
            <li class="active">
                <strong><a href="@Url.Action("Index")"> @EntityDisplayName</a></strong>
            </li>
            <li>
                Edit
            </li>
            <li>
                <span id="HostingEntityDisplayValue" class="EntityDisplayName" title="@Html.DisplayFor(model => model.DisplayValue)">@Html.DisplayFor(model => model.DisplayValue)</span>
            </li>
        </ol>
    </div>
    <div class="col-lg-6">
        @if (ViewBag.IsPartial == null)
        {
            <div class="btn-group pull-right" style="margin-left:8px;">
                <a data-toggle="dropdown" class="btn btn-primary btn-xs dropdown-toggle" alt="Action" title="Action">
                    Action
                    <span class="caret" style="margin-bottom:2px">    </span>
                </a>
                <ul class="dropdown-menu pull-left">
                    <li>
                        @if (EditPermission)
                        {
                            <a href="@Url.Action("Edit", "ReportList", new { id = Model.Id, UrlReferrer = Request.UrlReferrer.PathAndQuery, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-edit"></i>  Edit</a>
                        }
                    </li>
                    <li>
                        @if (EditPermission && User.CanDelete("ReportList"))
                        {
                            <a href="@Url.Action("Delete", "ReportList", new { UrlReferrer = Request.UrlReferrer.PathAndQuery, id = Model.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="glyphicon glyphicon-remove-sign"></i>  Delete</a>
                        }
                    </li>
                </ul>
            </div>
        }
        @if (ViewBag.IsPartial == null && EditPermission && ViewBag.EntityReportListDisplayValueEdit != null)
        {
            <div class="pull-right">
                <button class="btn btn-primary btn-xs pull-right" id="nextEdit" onclick="@Html.Raw("nextFunEdit('ReportList',event,'hdnNextPrevId')")" alt="Next" title="Next" style="border-radius:0px !important;"><i class="fa fa-chevron-right"></i></button>
                @Html.DropDownList("EntityReportListDisplayValueEdit", null, null, new { @onchange = "FillDisplayValueEditPage('ReportList','frmReportList','" + Model.Id + "',event)", @class = "pull-right", @Style = "height: 22px;width: 170px;" })
                <button class="btn btn-primary btn-xs pull-right" id="prevEdit" onclick="@Html.Raw("prevFunEdit('ReportList',event,'hdnNextPrevId')")" alt="Prev" title="Prev" style="border-radius:0px !important;"><i class="fa fa-chevron-left"></i></button>
            </div>}
    </div>
</div>
<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
    <div id="errorsMsgEdit"></div>
    <div id="errorsEdit"></div>
</div>
<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
</div>
<div id="divDisplayBRmsgMandatory" style="display:none;">
</div>
<div id="divDisplayLockRecord" style="display:none;">
</div>
<div id="divDisplayBRReadOnly" style="display:none;">
</div>
<div id="divDisplayCodeFragment" style="display:none;">
</div>
<div class="wrapper wrapper-content animated fadeInRight ecommerce">
    <div class="tabs-container">
        <ul class="nav nav-tabs">
            <li class="active"><a href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab" alt="Details" title="Details">Details</a></li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane fade in active" id="Details">
                @using (Html.BeginForm("Edit", "ReportList", new { UrlReferrer = Convert.ToString(ViewData["ReportListParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data", @id = "frmReportList" }))
                {
                    Html.ValidationSummary(true);
                    Html.EnableClientValidation();
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.ConcurrencyKey)
                   
                    <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                        <div class="panel panel-default AppForm">
                            <div class="panel-body">
                                <div class="row">
                                    @if (User.CanView("ReportList", "ReportNo"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvReportNo">
                                            <div class='form-group' title="Report No">
                                                <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.ReportNo)   </label>
                                                <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                                    @Html.TextBoxFor(model => model.ReportNo, getHtmlAttributes("ReportNo"))
                                                    @Html.ValidationMessageFor(model => model.ReportNo)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.ReportNo, new { @class = "form-control" })}
                                    @if (User.CanView("ReportList", "DisplayName"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvDisplayName">
                                            <div class='form-group' title="Display Name">
                                                <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.DisplayName)   </label>
                                                <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                                    @Html.TextBoxFor(model => model.DisplayName, getHtmlAttributes("DisplayName"))
                                                    @Html.ValidationMessageFor(model => model.DisplayName)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.DisplayName, new { @class = "form-control" })}
                                    @if (User.CanView("ReportList", "Description"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvDescription">
                                            <div class='form-group' title="Description">
                                                <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.Description) </label>
                                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                    @Html.TextAreaFor(model => model.Description, getHtmlAttributes("Description"))
                                                    @Html.ValidationMessageFor(model => model.Description)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.Description, new { @class = "form-control" })}
                                    @if (User.CanView("ReportsGroup") && User.CanView("ReportList", "ReportsGroupSSRSReportAssociationID"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvReportsGroupSSRSReportAssociationID">
                                            <div class='form-group'>
                                                <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.ReportsGroupSSRSReportAssociationID) </label>
                                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                    <div class="input-group" style="width:100%;">
                                                        @if (User.CanEdit("ReportList", "ReportsGroupSSRSReportAssociationID"))
                                                        {
                                                            @Html.DropDownList("ReportsGroupSSRSReportAssociationID", null, "-- Select --", new { @class = "chosen-select form-control", @HostingName = "ReportsGroup", @dataurl = Url.Action("GetAllValue", "ReportsGroup", new { caller = "ReportsGroupSSRSReportAssociationID" }) })
                                                        }
                                                        else
                                                        {
                                                            @Html.HiddenFor(model => model.ReportsGroupSSRSReportAssociationID, new { @class = "form-control" })
                                                            @Html.DropDownList("ReportsGroupSSRSReportAssociationID", null, "-- Select --", new { @class = "chosen-select form-control", @disabled = "disabled", @HostingName = "ReportsGroup", @dataurl = Url.Action("GetAllValue", "ReportsGroup", new { caller = "ReportsGroupSSRSReportAssociationID" }) })
                                                        }
                                                        @Html.ValidationMessageFor(model => model.ReportsGroupSSRSReportAssociationID)
                                                        @if (User.CanAdd("ReportsGroup"))
                                                        {
                                                            <div class="input-group-btn">
                                                                <a class="btn btn-default btn ie8fix" id="addReportsGroup" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Group','dvPopup','" + Url.Action("CreateQuick", "ReportsGroup", new { UrlReferrer = Request.Url.PathAndQuery, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop = true }) + "')")">
                                                                    <span class="glyphicon glyphicon-plus-sign"></span>
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.ReportsGroupSSRSReportAssociationID, new { @class = "form-control" })}
                                    @if (User.CanView("ReportList", "Name"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvName">
                                            <div class='form-group' title="Name">
                                                <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.Name)  <span class="text-danger-reg">*</span> </label>
                                                <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                                    @Html.TextBoxFor(model => model.Name, getHtmlAttributes("Name"))
                                                    @Html.ValidationMessageFor(model => model.Name)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.Name, new { @class = "form-control" })}
                                    @if (User.CanView("ReportList", "ReportID"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvReportID">
                                            <div class='form-group' title="ReportID">
                                                <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.ReportID)   </label>
                                                <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                                    @Html.TextBoxFor(model => model.ReportID, getHtmlAttributes("ReportID"))
                                                    @Html.ValidationMessageFor(model => model.ReportID)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.ReportID, new { @class = "form-control" })}
                                    @if (User.CanView("ReportList", "ReportPath"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvReportPath">
                                            <div class='form-group' title="Report Path">
                                                <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.ReportPath) </label>
                                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                    @Html.TextAreaFor(model => model.ReportPath, getHtmlAttributes("ReportPath"))
                                                    @Html.ValidationMessageFor(model => model.ReportPath)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.ReportPath, new { @class = "form-control" })}
                                    @if (User.CanView("ReportList", "IsHidden"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvIsHidden">
                                            <div class="form-group" title="Is Hidden">
                                                <label class="col-sm-5 col-md-5 col-xs-12">
                                                    @Html.LabelFor(model => model.IsHidden)
                                                </label>
                                                <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                                    @Html.CheckBox("IsHidden", Model.IsHidden.HasValue ? Model.IsHidden : false)
                                                    @Html.ValidationMessageFor(model => model.IsHidden)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.IsHidden, new { @class = "form-control" })}
                                    @if (User.CanView("ReportList", "EntityName"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvEntityName">
                                            <div class='form-group' title="Entity Name">
                                                <label class="col-sm-5 col-md-5 col-xs-12">@Html.LabelFor(model => model.EntityName)   </label>
                                                <div class="input-group col-sm-7 col-md-7 col-xs-12">

                                                    @Html.TextBoxFor(model => model.EntityName, getHtmlAttributes("EntityName"))
                                                    @Html.ValidationMessageFor(model => model.EntityName)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.EntityName, new { @class = "form-control" })}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="divDisplayBRmsgBeforeSaveProp1"></div>
                    <div id="divDisplayBRmsgMandatory1"></div>
                    <div id="divDisplayLockRecord1"></div>
                    <div id="divDisplayBRReadOnly1"></div>
                    <div id="divDisplayCodeFragment1"></div>
                    @Html.AntiForgeryToken();
                if (ViewBag.IsPartial == null)
                {
                        <a class="btn btn-default btn-sm pull-left formbuttonfix" Onclick="goBack('@Url.Action("Index", "ReportList")');" alt="Cancel" title="Cancel">Cancel</a>
                    }
                    @*@Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["ReportListParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm pull-left formbuttonfix", @alt="Cancel", @title="Cancel" })*@if (EditPermission)
                {
                    if (ViewBag.IsPartial == null)
                    {
                        <input type="submit" name="command" value="Save" class="btn btn-primary btn-sm pull-left formbuttonfix" alt="Save" title="Save" />
                    }
                    if (ViewBag.IsPartial == null)
                    {
                        <input type="submit" id="sevranBtnEdit" style="display:none;" name="command" value="SaveNextPrev" alt="SaveNextPrev" title="SaveNextPrev" />
                        <input type="submit" name="command" value="Save & Stay" class="btn btn-primary btn-sm pull-left formbuttonfix" alt="Save & Stay" title="Save & Stay" />}
                    <input type="hidden" name="hdncommand" value="" />
                    <input type="hidden" name="hdnNextPrevId" value="" />
                    }
                }
                @{
                    var dropmenubottom = false;
                }
                <div class="dropdown pull-left formbuttonfix" style="display:none" id="AddAssociationdropmenubottomReportList">
                    <button type="button" class="btn btn-primary btn-sm dropdown-toggle" id="dropdownMenu1" data-toggle="dropdown" alt="Add Association" title="Add Association">
                        Add
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu " role="menu" aria-labelledby="dropdownMenu1"></ul>
                </div>
                @if (!dropmenubottom || !EditPermission)
                {
                    <script>
                        $("#AddAssociationdropmenubottomReportList").hide();
                    </script>
                }
                <div class="clearfix" style="clear:both; margin-bottom:8px"></div>
            </div>
        </div> <!-- /tab-content --><br />
        <br />
    </div>
</div>
<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
@{
    var businessruleforemailpage = User.businessrules.Where(p => p.EntityName == "ReportList").ToList();

    var isbrrequired = false;
    if (businessruleforemailpage != null && businessruleforemailpage.Count > 0)
    {
        isbrrequired = true;
    }
}
@{
    if (ViewBag.IsPartial == true)
    {
        <script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>
        <script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>
        <script type="text/javascript">
            var config = {
                '.chosen-select': {},
                '.chosen-select-deselect': { allow_single_deselect: true },
                '.chosen-select-no-single': { disable_search_threshold: 10 },
                '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                '.chosen-select-width': { width: "95%" }
            }
            for (var selector in config) {
                $(selector).chosen(config[selector]);
            }
        </script>
        <script>
            function CancelFromDivTab_ReportList() {
                var associationname = '@Convert.ToString(ViewData["AssociatedType"])';
                if (associationname != '' && associationname != null) {
                }
            }
            function EditFromDivTab_ReportList(obj) {
                $('input:hidden[name="hdncommand"]').val(obj);
                var associationname = '@Convert.ToString(ViewData["AssociatedType"])';
                var form2 = $("#frmReportList");
                if (!form2.valid()) { return; }
                var form = "";
                form = $("#frmReportList").serialize();
                if ('@isbrrequired') {
                    if (!ApplyBusinessRule(form))
                        return false;
                }
                var frmUrl = form2.attr('action') + "&RenderPartial=true";
                var fdata = new FormData(form2[0]);
                $.ajax({
                    url: frmUrl,
                    type: "POST",
                    cache: false,
                    data: fdata,
                    processData: false,
                    contentType: false,
                    success: function (result) {
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert('failed');
                        return false;
                    }
                });
            }
            function ApplyBusinessRule(form) {
                var flag = true;
                dataurl = "@Url.Action("businessruletype", "ReportList", new { ruleType = "OnEdit"})";
                flag = ApplyBusinessRuleOnSubmit(dataurl, "ReportList", false, "ErrMsg", form);
                //business rules on inline associations
                if (flag) {
                    $("#frmReportList").find(':input').removeAttr('disabled');
                    $("#divDisplayBRmsgMandatory").hide();
                    $("#divDisplayBRmsgBeforeSaveProp").hide();
                    $("#divDisplayLockRecord").hide();
                    $("#divDisplayBRReadOnly").hide();
                }
                return flag;
            }
        </script>
    }
}
@{
    var businessrule = User.businessrules.Where(p => p.EntityName == "ReportList").ToList();
    if ((businessrule != null && businessrule.Count > 0))
    {
        var ruleids = businessrule.Select(q => q.Id).ToList();
        var typelist = "";
        using (var ruledb = new GeneratorBase.MVC.Models.RuleActionContext())
        {
            typelist = string.Join(",", ruledb.RuleActions.Where(p => ruleids.Contains(p.RuleActionID.Value) && p.associatedactiontype.TypeNo.HasValue).Select(p => p.associatedactiontype.TypeNo.Value).Distinct().ToList());
        }
        <script>
            $(document).ready(function () {
                document.getElementById("ErrMsg").innerHTML = "";
                var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
                form = $("#frmReportList");
                dataurl = "@Url.Action("businessruletype", "ReportList", new { ruleType = "OnEdit"})";
                ApplyBusinessRuleOnPageLoad("@typelist",dataurl, "ReportList", false, "ErrMsg", form);
                //business rules on inline associations
            });
        </script>
        <script>
            $("form").submit(function (event) {
                if (!$("#frmReportList").valid()) return;
                $("#divDisplayBRmsgBeforeSaveProp").html("");
                $("#divDisplayBRmsgBeforeSaveProp1").html("");
                $("#divDisplayCodeFragment").html("");
                document.getElementById("ErrMsg").innerHTML = "";
                var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
                form = $("#frmReportList").serialize();
                dataurl = "@Url.Action("businessruletype", "ReportList", new { ruleType = "OnEdit"})";
                flag = ApplyBusinessRuleOnSubmit(dataurl, "ReportList", false, "ErrMsg", form);
                //business rules on inline associations
                if (flag)
                {
                    $('input:hidden[name="hdncommand"]').val($(this.id).context.activeElement.value);
                    if ($(document.activeElement).attr('id') == "nextEdit" || $(document.activeElement).attr('id') == "prevEdit")
                        $('input:hidden[name="hdncommand"]').val("SaveNextPrev");
                    $("#frmReportList").find(':input').removeAttr('disabled');
                }
                return flag;
            });
        </script>
    }
    else
    {
        <script>
            $("input[type='submit']").click(function (event) {
                if (!$("#frmReportList").valid()) return;
                $("#divDisplayBRmsgBeforeSaveProp").html("");
                $("#divDisplayBRmsgBeforeSaveProp1").html("");
                $("#divDisplayCodeFragment").html("");
                var $this = $(this);
                var actionName = $this.attr("actionName")
                if (actionName == undefined)
                    actionName = $this.val();
                $('input:hidden[name="hdncommand"]').val(actionName);
            });
        </script>
    }
}

<script type='text/javascript'>
    $(document).ready(function () {
        try {
            focusOnControl('frmReportList');
        }
        catch (ex) { }
        ShowHelpIcon(@Html.Raw("'"+Url.Action("ShowHelpIcon", "PropertyHelpPage")+"'"),'ReportList','edit',false,'SSRS Report')
    });
</script>
@if (ViewBag.IsPartial == null && EditPermission && ViewBag.EntityReportListDisplayValueEdit != null)
{
    <script type='text/javascript'>
        $(document).ready(function () {
            var RecIdEdit = $("#frmReportList").find("input:hidden[name='Id']").val();
            $("#EntityReportListDisplayValueEdit").val(RecIdEdit);
            var textedit = $("option:selected", $("#EntityReportListDisplayValueEdit")).text();
            $("#EntityReportListDisplayValueEdit").attr('data-toggle', 'tooltip')
            $("#EntityReportListDisplayValueEdit").attr('title', textedit);
            var lastOptionValEdit = $('#EntityReportListDisplayValueEdit option:last-child').val();
            var fristOptionValEdit = $('#EntityReportListDisplayValueEdit option:first-child').val();
            if (lastOptionValEdit == RecIdEdit) {
                $('#nextEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
            }
            if (fristOptionValEdit == RecIdEdit)
                $('#prevEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
        });
    </script>
}

