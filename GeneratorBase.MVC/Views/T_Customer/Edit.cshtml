@model GeneratorBase.MVC.Models.T_Customer
@using PagedList;
@{
    ViewBag.Title = "Edit Customer";
	var EditPermission = User.CanEditItem("T_Customer", Model, User);
	//var DeletePermission = User.CanDeleteItem("T_Customer", Model, User);
	var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_Customer");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Customer";
	var modelproperties = EntityDisplayNameReflector.Properties;
	if (ViewBag.IsPartial != null && ViewBag.IsPartial == true)
    {
        Layout = null;
    }
	
	List<string> hiddenProperties = new List<string>();
    if (User.businessrules.Any(p => p.EntityName == "T_Customer" && p.ActionTypeID.Contains(6)))
    {
        hiddenProperties = Model.ApplyHiddenRule(User.businessrules, "T_Customer", true);
    }
	bool isRecordReadOnly = false;
    if (ViewData["RecordReadOnly"] != null && Convert.ToBoolean(ViewData["RecordReadOnly"])==true)
    {
        isRecordReadOnly = true;
		ViewData["RecordReadOnly"]=true;
    }
	var viewmode = Convert.ToString(ViewData["viewmode"]);
    string wizardid = "";
	string footerclassdiv1 = "card ButtonFooter";
    string footerclassdiv2 = "card-footer container-fluid";
    if (viewmode == "wizard")
    {
		footerclassdiv1 = footerclassdiv2 = "";
        wizardid = "id=smartwizard";
    }
 var BackUrl =  Request.Url.PathAndQuery;
    
    var viewbagname = Convert.ToString(ViewBag.TemplatesName);
	var backUrl = Request.UrlReferrer != null ?  Request.UrlReferrer.PathAndQuery : "";
	var HideAction = GeneratorBase.MVC.Models.CustomHelperMethod.ShowHideAction("T_Customer");
	var NonViewableProperties = User.CanNotView("T_Customer");
	var proplstgroupby = modelproperties.Where(p => p.Proptype.ToLower() == "group").GroupBy(p => p.PropText);
	List<string> groupcontaininginlinegrid = new List<string>();   


	string lstHiddenGroupFLS = GeneratorBase.MVC.Models.CustomHelperMethod.HideGroupsForFLSHiddenBR(NonViewableProperties, hiddenProperties, proplstgroupby, "T_Customer", User, groupcontaininginlinegrid);
}
@functions {
    object getHtmlAttributes(string Property)
    {
		if(Property=="T_AutoNo")
		 return new { @class = "form-control", @readonly = "readonly" };
        if (User.CanEdit("T_Customer", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly"};
    }
   object getHtmlAttributesForCheckBox(string Property)
    {
        if (User.CanEdit("T_Customer", Property))
        {
            return null;
        }
        return new {@disabled = "@disabled" };
    }
}
@if (string.IsNullOrEmpty(wizardid))
{
<script>
window.onload = function(){
	JumpToTab('@User.JavaScriptEncodedName@Model.Id'); 
}
</script>
}
<script>
    $(document).ready(function () {
        try {
     LockHostDropdownOnEdit('@Convert.ToString(ViewData["AssociatedType"])');
			$("[inlinegrid]").each(function() {
                //$(this).click();
				 eval($(this).attr('onclick'));
			    var targetpanel = $(this).attr('id').replace('dvGroup','');
			    $('#'+targetpanel).removeClass('fade in');
            });
        }
        catch (ex) { }
$(".responsive-tabs").removeClass("open").addClass(" ");
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsGroupsHiddenRule))
    {
    <script>
        var ResetBaseUrl = '@Url.Action("ResetToDefault", new { id = Model != null ? Model.Id : 0, groupName = "_groupname" })';
    </script>
    }
   
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsHiddenRule))
    {
        <script>

             var ResetBaseUrlField = '@Url.Action("ResetToDefaultField", new { id = Model != null ? Model.Id : 0, fieldName = "_fieldname" })';
        </script>
    }

}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_CustomerIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_CustomerIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_CustomerIsSetValueUIRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerRestrictDropdownValueRule))
    {
        @Html.Raw(ViewBag.T_CustomerRestrictDropdownValueRule);
    }
}
@{
    List<string> hiddenVerb = new List<string>(); var Verblist = "";
    if (User.businessrules.Any(p => p.EntityName == "T_Customer" && p.ActionTypeID.Contains(16)))
    {
        hiddenVerb = Model.ApplyHiddenVerbRule(User.businessrules, "T_Customer");
        Verblist = string.Join(",", hiddenVerb.ToList());
    }
}

    

	<style>
.formbuttonfix {
    margin-right: 4px;
	
   
}


.CEntityCount {
display:none !important;
}
</style>
@if (!string.IsNullOrEmpty(wizardid))
    {
<style>
.formbuttonfix {
    
	float:right!important;
	margin-right:5px !important; 
	padding:4px 18px!important; 
   
}
    .hide {
        display: none !important;
    }

    .show {
        display: block !important;
    }

    .pager li {
        display: inline;
    }

	.pager {
    padding-left: 0;
    margin: 8px 0;
    list-style: none;
    text-align: center;
	}

	.nav-tabs .nav-item {
		margin-bottom: -0px!important;
	}

        .pager li > a, .pager li > span {
            display: inline-block;
            padding: 5px 14px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 4px !important;
        }

    .next a {
        float: right;
    }

    .previous a {
        float: left;
    }	
.vrbButtons {
    padding:4px 40px!important;
	font-size:20px;
    margin-top: -40px;
    }
@@media (max-width: 767px) {


            .arrowCount {
                background-color: #1d5072 !important;
            }

            #dvGroupT_StudentPersonalInformation {
                margin-top: 10px!important;
            }

            .nav-tabs .nav-item.active a {
                display: block !important;
                border-color: #1d5072 !important;
                color: #fff !important;
                background: #1d5072 !important;
            }

            .nav-tabs .nav-item.active a:hover {
                display: block !important;
                border-color: #1d5072 !important;
                color: #fff !important;
                background: #1d5072 !important;
            }
            .sw-theme-arrows > ul.step-anchor {
                border-top-right-radius: 0!important;
            }

                .sw-theme-arrows > ul.step-anchor > li.active > a {
                    display: block!important;
                }

                .sw-theme-arrows > ul.step-anchor > li > a, .sw-theme-arrows > ul.step-anchor > li > a:hover {
                    display: none!important;
                    color: #1d5072!important;
                }

                .sw-theme-arrows > ul.step-anchor.open > li > a {
                    display: block !important;
                }

            .responsive-tabs .dropdown-arrow {
                border-color: #fff!important;
                display: block!important;
                z-index:1000;
                position:absolute;
            }

            #WizardBtnCancel {
                margin-top: unset !important;
                float: unset !important;
                display: block !important;
                margin-right: 8px !important;
                margin-top: 3px !important;
            }
        }
</style>
}

<div class="content-heading">
    <div class="TitleName">
	<strong><a href="@Url.Action("RedirectToEntity","Home", new { EntityName="T_Customer"})">@EntityDisplayName Edit</a>
	<small id="HostingEntityDisplayValue" class="EntityDisplayName" title="@Html.DisplayFor(model => model.DisplayValue)">
	     @Html.DisplayFor(model => model.DisplayValue)
    	</small></strong></div>
	 @if (string.IsNullOrEmpty(wizardid))
        { 
	    <div class="ml-auto">
       @if (ViewBag.IsPartial == null && !HideAction && EditPermission)
	 {
			   <div class="btn-group float-right" style="margin-left:8px;">
			              <a data-toggle="dropdown" class="btn btn-secondary btn-xs dropdown-toggle " alt="Action" title="Action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                Action
            </a>
			<ul class="dropdown-menu multi-level">
 @if (EditPermission)
                    {
				<li class="dropdown-item">
                   
                        <a href="@Url.Action("Edit","T_Customer", new { id = Model.Id,  UrlReferrer = backUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="fa fa-edit"></i>  Edit</a>
                    
                </li> 
				}            
 @if (EditPermission && User.CanDelete("T_Customer"))
                    {
				<li class="dropdown-item">
                   
                        <a href="@Url.Action("Delete", "T_Customer", new {UrlReferrer = backUrl, id = Model.Id, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="fa fa-trash"></i>  Delete</a>
                    
                </li>
				}
  @if (((List<GeneratorBase.MVC.Models.T_DocumentTemplate>)ViewBag.DocumentTemplates).Where(p => p.T_DisplayType == "CheckBox").Count() > 0)
                {
                    <li class="dropdown-item">
                    <a data-original-title="Generate Document" data-toggle="modal" data-target="#addGenerateDocument"> Generate Document</a>
                        </li>
                }
			</ul>
		</div>
}
			@if (ViewBag.IsPartial == null && EditPermission && ViewBag.EntityT_CustomerDisplayValueEdit != null && !HideAction)
			{	
				<div class="pull-right">
					<button class="btn btn-info btn-xs pull-right" id="nextEdit" onclick="@Html.Raw("nextFunEdit('T_Customer',event,'hdnNextPrevId')")" alt="Next" title="Next" style="height:23px;border-radius:0px !important;"><i class="fa fa-chevron-right"></i></button>
					@Html.DropDownList("EntityT_CustomerDisplayValueEdit", null, null, new { @onchange = "FillDisplayValueEditPage('T_Customer','frmT_Customer','" + Model.Id + "',event)", @class = "pull-right", @Style = "height: 23px;width: 170px; font-size:12px;" })
					<button class="btn btn-info btn-xs pull-right" id="prevEdit" onclick="@Html.Raw("prevFunEdit('T_Customer',event,'hdnNextPrevId')")" alt="Prev" title="Prev" style="height:23px;border-radius:0px !important;"><i class="fa fa-chevron-left"></i></button>
				</div>
			}
    </div>
	}
</div>


	<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>
   @Html.Partial("~/Views/Shared/ErrorTemplate.cshtml")
    <a id="seturlT_Customer" dataurl="@Html.Raw(Url.Action("GetPropertyValueByEntityId", "T_Customer")).ToHtmlString()"></a>
    <div class="tabs-container">
    <ul class="nav nav-tabs tabellipsis" @(!string.IsNullOrEmpty(wizardid) ? "style=display:none;" : "")>
	 <li class="nav-item">
	 <a class="nav-link active" href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab" alt="Details" title="Details">
	 Details</a>
	 </li>

@if (User.CanView("JournalEntry")) 
{
		 <li class="nav-item" @(!User.CanView("JournalEntry")?"style=display:none;":"")>
		 <a class="nav-link"  onclick="LoadTab('JournalEntryToT_CustomerRelation','@User.JavaScriptEncodedName@Model.Id','@Url.Action("Index", "JournalEntry", new { RenderPartial = true, RelatedEntityRecords = "T_Customer", HostingEntity = "T_Customer", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry", TabToken = DateTime.Now.Ticks })')" href="#JournalEntryToT_CustomerRelation" data-toggle="tab" alt="Customer Journal" title="Customer Journal">
		 Customer Journal
		 </a></li>
		 }

    </ul>
		<div id="tabcontent" class=@(string.IsNullOrEmpty(wizardid)?"tab-content":"d-none")>
        <div class="tab-pane fade show active" id="Details">
@using (Html.BeginForm("Edit","T_Customer",new {UrlReferrer =Convert.ToString(ViewData["T_CustomerParentUrl"]), viewmode = viewmode}, FormMethod.Post, new { enctype = "multipart/form-data",@id="frmT_Customer" }))
{
    if (!string.IsNullOrEmpty(wizardid))
	{ @Html.ValidationSummary(false, "", new { @class = "text-danger d-none" }) }
	else { Html.ValidationSummary(true);}
	Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
	if (NonViewableProperties != null) 
	{ 
	@Html.Hidden("cannotViewProperties", Html.Raw(string.Join(",", NonViewableProperties)))
	}
<div class="text-danger validation-summary-errors" id="errorSummDiv" style="display:none;">
</div>
<div class="AppForm tabs-container" @wizardid>
	@if (!string.IsNullOrEmpty(wizardid))
    {
        <ul id="olwizard" class="nav nav-tabs responsive-tabs" role="tablist">
           		<li role="tab" class="nav-item" id="liGroupT_CustomerBasicInformation">
		 <a href="#wzGroupT_CustomerBasicInformation" class="hidden-phone">Basic Information</a>
		</li>
		<li role="tab" class="nav-item" id="liGroupT_CustomerMoreInformation">
		 <a href="#wzGroupT_CustomerMoreInformation" class="hidden-phone">More Information</a>
		</li>

           
            
        </ul>
        <script>
            $(document).ready(function(){
                $(".formbuttonfix:not([dataurl]").hide();
                $(".pager").show();
                $(".pager.bwizard-buttons").show();
				$("ol#olwizard").removeClass("d-none");
				$("#tabcontent").removeClass("d-none");
            });
        </script>
		@Html.Hidden("wizardstep", ViewData["wizardstep"])
    }
	<div>		
					<div class="row bgwizard" id="wzGroupT_CustomerBasicInformation">
												<div class="col-md-12 col-sm-12 col-xs-12" id="accordion">
                                    <div class="card card-default" id="dvGroupT_CustomerBasicInformation">
                                        <div class="card-header clearfix">
                                         <!--  <i class="icon-calendar"></i> -->

 
											
									<h3 class="card-title" alt="Basic Information" title="Basic Information">Basic Information
                           


</h3>
								</div>
                                <div class="card-body row">
@if(!NonViewableProperties.Contains("T_AutoNo") && !hiddenProperties.Contains("T_AutoNo"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_AutoNo">
							<div class='form-group' title="Auto No.">
								<label class="col-sm-5 col-md-5 float-left col-xs-12" >@Html.LabelFor(model => model.T_AutoNo)   </label>
                                <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">
											
									@Html.TextBoxFor(model => model.T_AutoNo,  getHtmlAttributes("T_AutoNo"))
									
								</div>
								
                             </div>
							 @Html.ValidationMessageFor(model => model.T_AutoNo)
						</div>
			
				} else {if(!NonViewableProperties.Contains("T_AutoNo")){ @Html.HiddenFor(model => model.T_AutoNo, new { @class = "form-control" })}}
@if(!NonViewableProperties.Contains("T_Name") && !hiddenProperties.Contains("T_Name"))
{
				<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Name">
							<div class='form-group' title="Name">
								<label class="col-sm-5 col-md-5 float-left col-xs-12" >@Html.LabelFor(model => model.T_Name)  <span class="text-danger-reg">*</span> </label>
                                <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">
											
									@Html.TextBoxFor(model => model.T_Name,  getHtmlAttributes("T_Name"))
									
								</div>
								
                             </div>
							 @Html.ValidationMessageFor(model => model.T_Name)
						</div>
			
				} else {if(!NonViewableProperties.Contains("T_Name")){ @Html.HiddenFor(model => model.T_Name, new { @class = "form-control" })}}
							</div>
                         </div>
                      </div>
       </div>
					<div class="row bgwizard" id="wzGroupT_CustomerMoreInformation">
												<div class="col-md-12 col-sm-12 col-xs-12" id="accordion">
                                    <div class="card card-default" id="dvGroupT_CustomerMoreInformation">
                                        <div class="card-header clearfix">
                                         <!--  <i class="icon-calendar"></i> -->

 
											
									<h3 class="card-title" alt="More Information" title="More Information">More Information
                           


</h3>
								</div>
                                <div class="card-body row">
@if(!NonViewableProperties.Contains("T_Description") && !hiddenProperties.Contains("T_Description"))
{
					<div class='col-sm-12 col-md-12 col-xs-12' id="dvT_Description">
							<div class='form-group' title="Description">
								<label class="col-sm-2 col-md-2 float-left col-xs-12" >@Html.LabelFor(model => model.T_Description) </label>
                                <div class="input-group col-sm-10 col-md-10 float-left col-xs-12">
								@Html.TextAreaFor(model => model.T_Description, getHtmlAttributes("T_Description"))
								
	
								</div>
                             </div>
							 @Html.ValidationMessageFor(model => model.T_Description)
						</div>
} else {if(!NonViewableProperties.Contains("T_Description")){ @Html.HiddenFor(model => model.T_Description, new { @class = "form-control" })}}
							</div>
                         </div>
                      </div>
       </div>

                   
	@if (!string.IsNullOrEmpty(wizardid))
    {
       
    }    
		</div>	
		</div>
		<div class="@footerclassdiv1">
		<div class="@footerclassdiv2">	
		 @Html.AntiForgeryToken()
                
                    <a id="btnformcancel" class="btn btn-default btn-sm pull-left formbuttonfix" Onclick="goBack('@Url.Action("Index", "T_Customer")');" alt="Cancel" title="Cancel">Cancel</a>
                
		 @if (EditPermission)
         {
 				
					<input type="submit" id="btnsavereturn" name="command" value="Save" class="btn btn-primary btn-sm pull-left formbuttonfix"  alt="Save" title="Save"/>
				
			if (ViewBag.IsPartial == null)
			{
				<input type="submit" id="sevranBtnEdit" style="display:none;" name="command" value="SaveNextPrev" alt="SaveNextPrev" title="SaveNextPrev"/>
				<input type="submit"  id="btnsavestay" name="command" value="Save & Stay" class="btn btn-primary btn-sm pull-left formbuttonfix" alt="Save & Stay" title="Save & Stay" />
			}
				<input type="hidden" name="hdncommand" value="" />
				<input type="hidden" name="hdnNextPrevId" value="" />
}
@foreach (var item in (List<GeneratorBase.MVC.Models.T_DocumentTemplate>)ViewBag.DocumentTemplates)
{
	if (item.T_DisplayType == "Button")
	{
        var isdownload = item.T_EnableDownload.HasValue ? item.T_EnableDownload.Value : false;
        var ispreview = item.T_EnablePreview.HasValue ? item.T_EnablePreview.Value : false;

        if (!string.IsNullOrEmpty(item.T_DefaultOutputFormat) && item.T_DefaultOutputFormat.ToLower() == "docx")
        {
            isdownload = true;
            ispreview = false;
        }
        if (ispreview)
        {
            <a class="btn btn-primary btn-sm pull-left formbuttonfix" style="fore-color:@item.T_FontColor!important;background-color:@item.T_BackGroundColor!important;" id="vrb1_@string.Join("", item.T_Name.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries))" data-placement="top" data-original-title="@item.T_Name" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntityBR('addPopup','"+Model.DisplayValue+"','dvPopup','" + Url.Action("ViewPDF", "T_Customer", new { id=Model.Id, DocumentId=item.T_Document, documentName=item.T_Name, outputFormat=item.T_DefaultOutputFormat, isdownload=false, ispreview=true }) + "')")" alt="@item.T_Name" title="@item.T_Name">
                <i class="fa fa-file-pdf"></i> @item.T_Name
            </a>
        }
        else
        {
	        <a class="btn btn-primary btn-sm pull-left formbuttonfix vrbButtons" style="fore-color:@item.T_FontColor!important;background-color:@item.T_BackGroundColor!important;" id="vrb1_@string.Join("", item.T_Name.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries))" onclick="@Html.Raw("GenerateDocumentFromButton(this,'"+isdownload + "');")" dataurl="@Url.Action("GenerateDocument", "T_Customer", new { id = Model.Id, DocumentId = item.T_Document, documentName = item.T_Name, outputFormat = item.T_DefaultOutputFormat, isdownload = isdownload, ispreview = ispreview }, null)"> @item.T_Name</a>
        }
	}
}
                    @if (ViewBag.ExportDataTemplates != null)
                    {
                        foreach (var item in (List<GeneratorBase.MVC.Models.T_ExportDataConfiguration>)ViewBag.ExportDataTemplates)
                        {
                            <a class="btn btn-primary btn-sm pull-left formbuttonfix" data-placement="top" data-original-title="@item.T_Name" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Note','dvPopup','" + Url.Action("ExportDataNote", "T_Customer", new { btnid = item.Id, Ids = Model.Id, UrlReferrer = BackUrl, TS = DateTime.Now }) + "')")" alt="@item.T_Name" title="@item.T_Name">
                                @item.T_Name
                            </a>
                        }
                    }


@if (((List<GeneratorBase.MVC.Models.T_DocumentTemplate>)ViewBag.DocumentTemplates).Where(p => p.T_DisplayType == "CheckBox").Count() > 0)
{ 
<div class="modal fade" id="addGenerateDocument" tabindex="-1" role="dialog" aria-labelledby="addGenerateDocumentLabel" aria-hidden="true" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="addGenerateDocumentLabel">Generate Document</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true" onclick="cancelQuickAdd();">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
               <div class="row col-md-12 col-sm-12 col-xs-12" id="dvGroupGenerateDocument">
                                    @foreach (var item in ((List<GeneratorBase.MVC.Models.T_DocumentTemplate>)ViewBag.DocumentTemplates).Where(p => p.T_DisplayType == "CheckBox"))
                                    {
										var isdownload = item.T_EnableDownload.HasValue ? item.T_EnableDownload.Value : false;
                                        <div class="col-sm-4">
                                            <input type="checkbox" verbName="_@string.Join("", item.T_Name.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries))" name="SelectedGenerateDocumentTemplate" @(isdownload?"download=true":"download:false") dataurl='@Url.Action("GenerateDocument", "T_Customer", new { id = Model.Id, DocumentId = item.T_Document, documentName = item.T_Name, outputFormat = item.T_DefaultOutputFormat, isdownload = item.T_EnableDownload.HasValue ? item.T_EnableDownload.Value : false }, null)' /> @item.T_Name
                                        </div>
                                    }
                                </div>
                                <div class="card-body row pull-right">
								 <label id="lblGenerateDocument" class="text-primary"></label>
                                    <button type="button" data-dismiss="modal" aria-hidden="true" class="btn btn-default btn-sm" onclick="cancelQuickAdd();">Close</button>
                                    <a class="btn btn-primary btn-sm pull-right" style="margin-left:5px;" onclick="GenerateDocument(this,'dvGroupGenerateDocument','default');"> Generate</a>
                                    <a class="btn btn-primary btn-sm pull-right" style="margin-left:5px;" onclick="GenerateDocument(this,'dvGroupGenerateDocument','pdf');"> Generate (PDF)</a>
                                </div>
            </div>

            <div style="clear:both"></div>
        </div>
    </div>
</div>
<a class="btn btn-primary btn-sm pull-left formbuttonfix vrbButtons" id="vrb1GenerateDocument" data-original-title="Generate Document" data-toggle="modal" data-target="#addGenerateDocument"> Generate Document</a>
}
		 
            @if (User.businessrules.Any(p => p.EntityName == "T_Customer" && p.ActionTypeID.Contains(16)))
                    {
                    <script>HideVerbFromBR('@Verblist');</script>
                    <script>
                    var array = '@Verblist'.split(',');
                    for (var i = 0; i < array.length; i++) {
                    var verbId = array[i];
                    $("#" + verbId).remove();
                    }
                    </script>
                    }  


@{var dropmenubottom = false;}          

<div class="pull-left formbuttonfix dropup" style="display:none" id="AddAssociationdropmenubottomT_Customer">
<button type="button" class="btn btn-primary btn-sm" id="dropdownMenu1" data-toggle="dropdown" alt="Add Association" title="Add Association">
          <span class="fa fa-plus"></span> Add 
            
        </button>
		 <ul class="dropdown-menu BtnVerb" role="menu" aria-labelledby="dropdownMenu1" style="padding:0px; margin-bottom:5px;">
</ul>
</div>
@if(!dropmenubottom || !EditPermission)
{
    <script>
        $("#AddAssociationdropmenubottomT_Customer").hide();
    </script>
}
</div></div>} @*end form*@
<div class="clearfix" style="clear:both; margin-bottom:8px"></div>
<div id="divDisplayBRmsgBeforeSaveProp1"></div>
<div id="divDisplayBRmsgMandatory1"></div>
<div id="divDisplayLockRecord1"></div>
<div id="divDisplayBRReadOnly1"></div>
<div id="divDisplayCodeFragment1"></div>
</div>
@if (string.IsNullOrEmpty(wizardid))
{
<div class="tab-pane fade in" id="JournalEntryToT_CustomerRelation"></div>

}
</div> <!-- /tab-content -->
</div>
	<script>
    $(function () {
        ApplyAreYouSure();
    });
$('#printButton').click(function (evt) {
                evt.preventDefault();
                $('body').append('<iframe src="@Url.Action("Details", "T_Customer", new { id = Model.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), viewtype = viewbagname }, null)" id="printIFrame" name="printIFrame" style="display:none;"></iframe>');
                $('#printIFrame').bind('load',
                    function () {
                        window.frames['printIFrame'].focus();
                        window.frames['printIFrame'].print();

                    }
                 );

            });
</script>
@{
    var businessruleforemailpage = User.businessrules.Where(p => p.EntityName == "T_Customer").ToList();
    var isbrrequired = false;
    if (businessruleforemailpage != null && businessruleforemailpage.Count > 0)
    {
        isbrrequired = true;
    }
}
@{
	if (ViewBag.IsPartial == true)
	{
	 var typelist = string.Join(",", businessruleforemailpage.SelectMany(p => p.ActionTypeID).Distinct().ToList());
	 
		<script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>
        <script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>
        <script type="text/javascript">
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
    </script>
	<script>
					 function ApplyBusinessRule(form) {
				var flag = true;
				dataurl = "@Url.Action("businessruletype", "T_Customer", new { ruleType = "OnEdit"})";
				flag = ApplyBusinessRuleOnSubmit(dataurl, "T_Customer", false, "ErrMsg", form,"@typelist");
				//business rules on inline associations
				if (flag) {
					$("#frmT_Customer").find(':input').removeAttr('disabled');
					$("#divDisplayBRmsgMandatory").hide();
            $("#divDisplayBRmsgBeforeSaveProp").hide();
            $("#divDisplayLockRecord").hide();
            $("#divDisplayBRReadOnly").hide();
				}
				return flag;
			}
</script>
}
}
@{
var businessrule = User.businessrules.Where(p => p.EntityName == "T_Customer").ToList();
if ((businessrule != null && businessrule.Count > 0) )
{
	var typelist = string.Join(",", businessrule.SelectMany(p => p.ActionTypeID).Distinct().ToList());
    <script>
		$(document).ready(function () {
				document.getElementById("ErrMsg").innerHTML = "";
				var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
 form = $("#frmT_Customer");
				dataurl = "@Url.Action("businessruletype", "T_Customer", new { ruleType = "OnEdit"})";
                ApplyBusinessRuleOnPageLoad("@typelist",dataurl, "T_Customer", false, "ErrMsg", form);
				//business rules on inline associations
				if('@ViewData["RecordReadOnly"]' != 'null' && '@isRecordReadOnly'=='True')
                  {
                        $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
						$('.input-group-append').hide();
						$('.input-group-addon').hide();
						$("a.btnupload").each(function(index) {$(this).remove() });
                  }
    });
</script>
<script>
   $("form input[type=submit]").click(function() {
		var actionName = $(this).attr("actionName")
        if (actionName == undefined)
            actionName = $(this).val();
        $('input:hidden[name="hdncommand"]').val(actionName);
    });
    $("form").submit(function (event) {
	 $('[businessrule="mandatory"]').each(function () {
       $(this).removeAttr('required');
       });
	if (!$("#frmT_Customer").valid()) return;
			$("#divDisplayBRmsgBeforeSaveProp").html("");
			$("#divDisplayBRmsgBeforeSaveProp1").html("");
			$("#divDisplayCodeFragment").html("");
			document.getElementById("ErrMsg").innerHTML = "";
            var flag = true;
            var dataurl = "";
            var form = "";
            var inlinecount = "0";
 form = $("#frmT_Customer").serialize();
				 dataurl = "@Url.Action("businessruletype", "T_Customer", new { ruleType = "OnEdit"})";
                 flag = ApplyBusinessRuleOnSubmit(dataurl, "T_Customer", false, "ErrMsg", form,"@typelist");
  				 //business rules on inline associations
				  
			 if (flag)
				{
				                    
					 $("#frmT_Customer").find(':input').removeAttr('disabled');
					}
					else
					{
						}
            return flag;
		});
</script>
}
 else
    {
       <script>
    $("input[type='submit']").click(function (event) {
	if (!$("#frmT_Customer").valid()) return;
			$("#divDisplayBRmsgBeforeSaveProp").html("");
			$("#divDisplayBRmsgBeforeSaveProp1").html("");
			$("#divDisplayCodeFragment").html("");
        var $this = $(this);
                var actionName = $this.attr("actionName")
                if (actionName == undefined)
                    actionName = $this.val();
                $('input:hidden[name="hdncommand"]').val(actionName);
    });
	</script>
    }
}

<script type='text/javascript'>
$("input[datatype='Double']").addClass("pull-right text-right");
    $(document).ready(function () 
	{
				try {
		focusOnControl('frmT_Customer');
        }
        catch (ex) { }
    if('@ViewBag.EntityHelp' == 'True' || '@ViewBag.EntityHelp' == 'true')
    {
		ShowHelpIcon(@Html.Raw("'"+Url.Action("ShowHelpIcon", "PropertyHelpPage")+"'"),'T_Customer','edit',false,'Customer')
		 //instruction feature
         ShowInstructionLabel(@Html.Raw("'"+Url.Action("ShowInstructionLabel", "PropertyHelpPage")+"'"),'T_Customer','edit',false,'Customer')
    }
		 var arrgroup = '@lstHiddenGroupFLS'.split(',');
            $.each( arrgroup, function( index, value ){
              if (value.length > 0)  $("#"+value).hide();
            });
    });
	</script>
	@if(ViewBag.IsPartial == null && EditPermission && ViewBag.EntityT_CustomerDisplayValueEdit != null)
	{
	<script type='text/javascript'>
		 $(document).ready(function () {
			NextPrev("T_Customer");
		});
	 </script>
	}
	
