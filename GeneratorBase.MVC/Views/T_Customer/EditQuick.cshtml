@model GeneratorBase.MVC.Models.T_Customer
@using PagedList;

@{
    ViewBag.Title = "Edit Customer";
	var EditPermission = User.CanEditItem("T_Customer", Model, User);
	//var DeletePermission = User.CanDeleteItem("T_Customer", Model, User);
	var modelproperties = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_Customer").Properties;
	Layout = null;

	bool isRecordReadOnly = false;
    if (ViewData["RecordReadOnly"] != null && Convert.ToBoolean(ViewData["RecordReadOnly"])==true)
    {
        isRecordReadOnly = true;
		ViewData["RecordReadOnly"]=true;
    }
	var HideAction = GeneratorBase.MVC.Models.CustomHelperMethod.ShowHideAction("T_Customer");
	var NonViewableProperties = User.CanNotView("T_Customer");
	var proplstgroupby = modelproperties.Where(p => p.Proptype.ToLower() == "group").GroupBy(p => p.PropText);
    List<string> hiddenProperties = new List<string>();
	string lstHiddenGroupFLS = GeneratorBase.MVC.Models.CustomHelperMethod.HideGroupsForFLSHiddenBR(NonViewableProperties, hiddenProperties, proplstgroupby, "T_Customer", User);
}
@functions {
    object getHtmlAttributes(string Property)
    {
		if(Property=="T_AutoNo")
		 return new { @class = "form-control", @readonly = "readonly" };
        if (User.CanEdit("T_Customer", Property))
        {
            return new { @class = "form-control"};
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
		 if ($('#EntityT_CustomerDisplayValue').has('option').length > 0) {
			var RecId =  $($("#frmQEditT_Customer")[0]["Id"]).val();//.$("#Id").val()
            $("#T_CustomerDD").append($("#EntityT_CustomerDisplayValue").html());
            $("#T_CustomerDD").val(RecId);
			var text = $("option:selected", $("#T_CustomerDD")).text();
            $("#T_CustomerDD").attr('data-toggle', 'tooltip')
            $("#T_CustomerDD").attr('title', text);
            var lastOptionVal = $('#T_CustomerDD option:last-child').val();
            var fristOptionVal = $('#T_CustomerDD option:first-child').val();
            if (lastOptionVal == RecId)
			{
                $('#next').hide();
				$('#SaveAndContinue').hide();
				}
            if (fristOptionVal == RecId)
                $('#prev').hide();	
			} else {  $('#dvsavenext').hide(); $('#SaveAndContinue').hide(); }
			
			LockHostDropdownOnEditQuick('@Convert.ToString(ViewData["AssociatedType"])','@Convert.ToBoolean(ViewData["IsFilter"])');
        }
        catch (ex) { }
    });
	 $(document).ready(function () {
        $('input[type=text], textarea,input[type=multiline]').hover(function () {
            $(this).attr("title", $(this).val());
        });

    });
</script>
<style>.multiselect-container{
        height: 250px !important;
}</style>
<script type="text/javascript">
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsGroupsHiddenRule))
    {
    <script>
        var ResetBaseUrl = '@Url.Action("ResetToDefault", new { id = Model != null ? Model.Id : 0, groupName = "_groupname" })';
    </script>
    }
   
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsHiddenRule))
    {
        <script>

             var ResetBaseUrlField = '@Url.Action("ResetToDefaultField", new { id = Model != null ? Model.Id : 0, fieldName = "_fieldname" })';
        </script>
    }

}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_CustomerIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_CustomerIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_CustomerIsSetValueUIRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_CustomerRestrictDropdownValueRule))
    {
        @Html.Raw(ViewBag.T_CustomerRestrictDropdownValueRule);
    }
}
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<div class="row">
	 @*<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>*@
		<input type="hidden" id="ErrMsg" />
		<div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>

<div class="col-sm-6">
     <h4>
                <span id="HostingEntityDisplayValue">
				 @Html.DisplayFor(model => model.DisplayValue)
    </span>
            </h4>
    </div>

	@if (EditPermission && !HideAction)
            {
            <div class="col-sm-6" id="dvsavenext">
                <button class="btn btn-default btn-xs float-right" id="next" onclick="@Html.Raw("nextFun('T_Customer')")">Next >></button>
                @Html.DropDownList("T_CustomerDD", null, null, new { @onchange = "FillDisplayValueQEdit('T_Customer')", @required = "required", @class = "float-right", @Style = "height: 22px;width: 170px;" })
                <button class="btn btn-default btn-xs float-right" id="prev" onclick="@Html.Raw("prevFun('T_Customer')")"><< Prev</button>
            </div>
        }


</div>
	
@using (Html.BeginForm("EditQuick","T_Customer",new {UrlReferrer =Convert.ToString(ViewData["T_CustomerParentUrl"])}, FormMethod.Post, new { enctype = "multipart/form-data", @id = "frmQEditT_Customer" }))
{
     Html.ValidationSummary(true);
     Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
	@Html.HiddenFor(model => model.ConcurrencyKey)
		if (NonViewableProperties != null) { @Html.Hidden("cannotViewProperties", Html.Raw(string.Join(",", NonViewableProperties)))}
			@Html.Partial("~/Views/Shared/ErrorTemplate.cshtml")
     <a id="seturlT_Customer" dataurl="@Html.Raw(Url.Action("GetPropertyValueByEntityId", "T_Customer")).ToHtmlString()"></a>
		 <div class="row">
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <div class="AppForm">
						<div>
						    @Html.Hidden("AssociatedEntity", Convert.ToString(ViewData["AssociatedType"]))
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="card card-default" id="dvGroupT_CustomerBasicInformation">
                                        <div class="card-header clearfix">
                                            
											
									<h3 class="card-title" alt="Basic Information" title="Basic Information">Basic Information</h3>
								</div>
                                <div class="card-body row">
@if(!NonViewableProperties.Contains("T_AutoNo"))
{
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_AutoNo">
							
								<label  >@Html.LabelFor(model => model.T_AutoNo)   </label>
								<div class='input-group' title="Auto No.">
                                
											
											@Html.TextBoxFor(model => model.T_AutoNo,  getHtmlAttributes("T_AutoNo"))
																							
									
								
                             </div>
@Html.ValidationMessageFor(model => model.T_AutoNo)
						</div>
				} 
@if(!NonViewableProperties.Contains("T_Name"))
{
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Name">
							
								<label  >@Html.LabelFor(model => model.T_Name)  <span class="text-danger-reg">*</span> </label>
								<div class='input-group' title="Name">
                                
											
											@Html.TextBoxFor(model => model.T_Name,  getHtmlAttributes("T_Name"))
																							
									
								
                             </div>
@Html.ValidationMessageFor(model => model.T_Name)
						</div>
				} 
							</div>
                         </div>
                      </div>
       </div>
											<div class="row">
												<div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="card card-default" id="dvGroupT_CustomerMoreInformation">
                                        <div class="card-header clearfix">
                                            
											
									<h3 class="card-title" alt="More Information" title="More Information">More Information</h3>
								</div>
                                <div class="card-body row">
@if(!NonViewableProperties.Contains("T_Description"))
{
						<div class='col-sm-12 col-md-12 col-xs-12' id="dvT_Description">
							
								<label  >@Html.LabelFor(model => model.T_Description) </label>
								<div class='input-group' title="Description">
                                
								@Html.TextAreaFor(model => model.T_Description, getHtmlAttributes("T_Description"))
									
								
                             </div>
@Html.ValidationMessageFor(model => model.T_Description)
						</div>
} 
							</div>
                         </div>
                      </div>
       </div>
	            </div>
        </div>
	</div>
</div>
		 @Html.AntiForgeryToken();
		 var businessrule1 = User.businessrules.Where(p => p.EntityName == "T_Customer").ToList();
		 var lstinlineentityname = "";
		 var lstinlineassocdispname ="";
		 var lstinlineassocname = "";
		  var typelist = string.Join(",", businessrule1.SelectMany(p => p.ActionTypeID).Distinct().ToList());
		 <button id="CancelQuickAdd" type="button" class="btn btn-default btn-sm" data-dismiss="modal" aria-hidden="true" onclick="$('#T_CustomerRefresh').click();">Cancel</button>
		 if (EditPermission)
         {
			    <input type="submit" id="command" name="command" value="Save & Close" class="btn btn-primary btn-sm" onclick="QuickEditFromGrid(event,true,'T_Customer','@ViewData["AssociatedType"]',false,'@businessrule1',@businessrule1.Count,'OnEdit','ErrMsg',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname','@typelist');" />
				<input type="submit" id="sevranBtn" style="display:none;" name="command" value="Save" class="btn btn-primary btn-sm" onclick="QuickEditFromGrid(event,false,'T_Customer','@ViewData["AssociatedType"]',false,'@businessrule1',@businessrule1.Count,'OnEdit','ErrMsg',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname','@typelist','True');" />
                if (!HideAction)
				{
				<button type="button" id="SaveAndContinue" name="SaveAndContinue" class="btn btn-primary btn-sm" onclick="@Html.Raw("SaveAndContinueEdit('T_Customer',event)")">Save & Next</button>
				}
				<input type="hidden" name="hdncommand" value="" />
  		 }	
}
@*<script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>*@
@Scripts.Render("~/bundles/jqueryval")
<script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>
<script>
    $("input[type='submit']").click(function (event) {
	if (!$("#frmQEditT_Customer").valid()) return;
        var $this = $(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
</script>
@{
var businessrule = User.businessrules.Where(p => p.EntityName == "T_Customer").ToList();
if ((businessrule != null && businessrule.Count > 0) )
{	
	var typelist = string.Join(",", businessrule.SelectMany(p => p.ActionTypeID).Distinct().ToList());
    <script>
    $(document).ready(function () {
	document.getElementById("ErrMsg").innerHTML = "";
		 var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
				 form = $("#frmQEditT_Customer");
					 dataurl = "@Url.Action("businessruletype", "T_Customer", new { ruleType = "OnEdit"})";
            ApplyBusinessRuleOnPageLoad("@typelist",dataurl, "T_Customer", false, "ErrMsg", form);
			//business rules on inline associations
			if('@ViewData["RecordReadOnly"]' != 'null' && '@isRecordReadOnly'=='True')
                  {
                        $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
						$('.input-group-append').hide();
						$('.input-group-addon').hide();
						$("a.btnupload").each(function(index) {$(this).remove() });
                  }

    });
</script>
<script>
    $("form").submit(function (event) {
	if (!$("#frmQEditT_Customer").valid()) return;
	document.getElementById("ErrMsg").innerHTML = "";
            var flag = true;
		var form = $("#frmQEditT_Customer").serialize();
					});
</script>
}
}

<script type='text/javascript'>
    $(document).ready(function () {
		IgnoreReadOnlyCtrlFocus();
    if('@ViewBag.EntityHelp' == 'True' || '@ViewBag.EntityHelp' == 'true')
    {
		ShowHelpIcon(@Html.Raw("'"+Url.Action("ShowHelpIcon", "PropertyHelpPage")+"'"),'T_Customer','editquick',false,'Customer')
     }
			var arrgroup = '@lstHiddenGroupFLS'.split(',');
            $.each( arrgroup, function( index, value ){
              if (value.length > 0)  $("#"+value).hide();
            });
		
    });
</script>

