@model GeneratorBase.MVC.Models.EntityDataSource
@using PagedList;
@{
    ViewBag.Title = "Edit Entity Data Source";
    var EditPermission = User.CanEditItem("EntityDataSource", Model, User);
    var DeletePermission = User.CanDeleteItem("EntityDataSource", Model, User);
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("EntityDataSource", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                $('#' + hostingEntityName + 'ID').attr("lock", "true");
                $('#' + hostingEntityName + 'ID').trigger("change");
            }
            $("#SourceType").val('@Model.SourceType');
            $("#MethodType").val('@Model.MethodType');
            $("#Action").val('@Model.Action');
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.EntityDataSourceIsHiddenRule))
    {
        @Html.Raw(ViewBag.EntityDataSourceIsHiddenRule);
    }
}
<div class="content-heading">
    <div class="col-lg-10">
        <strong>
            <a href="@Url.Action("Index")"> Entity Data Source</a>
            <small>Edit</small>
        </strong>
    </div>
    <div class="col-lg-2">
      
    </div>
</div>
<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
    <div id="errorsMsgEdit"></div>
    <div id="errorsEdit"></div>
</div>
<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
</div>
<div id="divDisplayBRmsgMandatory" style="display:none;">
</div>
<div id="divDisplayLockRecord" style="display:none;">
</div>
<div id="divDisplayBRReadOnly" style="display:none;">
</div>
<div id="divDisplayCodeFragment" style="display:none;">
</div>
<div class="wrapper wrapper-content animated fadeInRight ecommerce card card-body">
    <span id="HostingEntityDisplayValue" class="EntityDisplayName p-2 mb-2" title="@Html.DisplayFor(model => model.DisplayValue)"><strong> @Html.DisplayFor(model => model.DisplayValue) </strong></span>
    <div class="tabs-container">
        <ul class="nav nav-tabs">
            <li class="nav-item"><a class="nav-link active" href="#Details" data-toggle="tab">Details</a></li>
            <li class="nav-item" @(!User.CanView("PropertyMapping") ? "style=display:none;" : "")>
                <a class="nav-link" onclick="LoadTab('EntityPropertyMapping','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "PropertyMapping", new { RenderPartial = true, HostingEntity = "EntityDataSource", HostingEntityID = @Model.Id, AssociatedType = "EntityPropertyMapping", TabToken = DateTime.Now.Ticks, }))')" href="#EntityPropertyMapping" data-toggle="tab">
                    Property Mapping
                    <span class="badge bg-blue"><span id="dvcnt_EntityPropertyMapping">@ViewBag.EntityPropertyMappingCount</span></span>
                </a>
            </li>
            <li class="nav-item" @(!User.CanView("DataSourceParameters") ? "style=display:none;" : "")>
                <a class="nav-link" onclick="LoadTab('EntityDataSourceParameters','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "DataSourceParameters", new { RenderPartial = true, HostingEntity = "EntityDataSource", HostingEntityID = @Model.Id, AssociatedType = "EntityDataSourceParameters", TabToken = DateTime.Now.Ticks, }))')" href="#EntityDataSourceParameters" data-toggle="tab">
                    Http Headers
                    <span class="badge bg-blue"><div id="dvcnt_EntityDataSourceParameters">@ViewBag.EntityDataSourceParametersCount</div></span>
                </a>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane active" id="Details">
                @using (Html.BeginForm("Edit", "EntityDataSource", new { UrlReferrer = Convert.ToString(ViewData["EntityDataSourceParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    Html.ValidationSummary(true);
                    Html.EnableClientValidation();
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.ConcurrencyKey)
                    <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                        <div class="card card-default AppForm">
                            <div class="card-body">
                                <div class="card-deck">
                                    @if (User.CanView("EntityDataSource", "EntityName"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvEntityName">
                                            <div class='form-group'>
                                                <label class="">@Html.LabelFor(model => model.EntityName)  <span class="text-danger-reg">*</span> </label>
                                                <div class="input-group">

                                                    @Html.TextBoxFor(model => model.EntityName, new { @readonly = "readonly", @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.EntityName)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.Action, new { @class = "form-control" })}
@if (User.CanView("EntityDataSource", "flag"))
{
    <div class='col-sm-6 col-md-6 col-xs-12' id="dvflag">
        <div class="form-group">
            <label class="">
                @Html.LabelFor(model => model.flag)
            </label>
            <div class="input-group">
                @*@Html.CheckBoxFor(model => model.flag)*@
                @Html.CheckBox("flag", Model.flag.HasValue ? Model.flag : false)
                @Html.ValidationMessageFor(model => model.flag)
            </div>
        </div>
    </div>
}
else
{ @Html.HiddenFor(model => model.EntityName, new { @class = "form-control" })}
                                    @if (User.CanView("EntityDataSource", "DataSource"))
                                    {
                                        <div class='col-sm-12 col-md-12 col-xs-12' id="dvDataSource">
                                            <div class='form-group'>
                                                <label class="">@Html.LabelFor(model => model.DataSource) </label>
                                                <div class="input-group">
                                                    @Html.TextAreaFor(model => model.DataSource, new { @class = "form-control", @style = "height:90px !important" })
                                                    @Html.ValidationMessageFor(model => model.DataSource)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.DataSource, new { @class = "form-control" })}
                                    @if (User.CanView("EntityDataSource", "SourceType"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvSourceType">
                                            <div class='form-group'>
                                                <label class="">@Html.LabelFor(model => model.SourceType)   </label>
                                                <div class="input-group">

                                                    @*@Html.TextBoxFor(model => model.SourceType,  getHtmlAttributes("SourceType"))*@
                                                    <select id="SourceType" name="SourceType" class="form-control">
                                                        <option value="JSON">Json</option>
                                                        <option value="XML">XML</option>
                                                        <option value="DATABASE">Database</option>
                                                    </select>
                                                    @Html.ValidationMessageFor(model => model.SourceType)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.SourceType, new { @class = "form-control" })}
                                    @if (User.CanView("EntityDataSource", "MethodType"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvMethodType">
                                            <div class='form-group'>
                                                <label class="">@Html.LabelFor(model => model.MethodType)   </label>
                                                <div class="input-group">

                                                    @*@Html.TextBoxFor(model => model.MethodType,  getHtmlAttributes("MethodType"))*@
                                                    <select id="MethodType" name="MethodType" class="form-control">
                                                        <option value="GET">GET</option>
                                                        <option value="POST">POST</option>
                                                    </select>
                                                    @Html.ValidationMessageFor(model => model.MethodType)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.MethodType, new { @class = "form-control" })}
                                    @if (User.CanView("EntityDataSource", "Action"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvAction">
                                            <div class='form-group'>
                                                <label class="">@Html.LabelFor(model => model.Action)   </label>
                                                <div class="input-group">

                                                    @*@Html.TextBoxFor(model => model.Action,  getHtmlAttributes("Action"))*@
                                                    <select id="Action" name="Action" class="form-control">
                                                        <option value="GETLIST">GetList</option>
                                                        <option value="CREATE">Create</option>
                                                        <option value="UPDATE">Update</option>
                                                        <option value="GETITEM">GetItem</option>
                                                    </select>
                                                    @Html.ValidationMessageFor(model => model.Action)
                                                </div>
                                            </div>
                                        </div>
                                    }
                                   
                                    else
                                    { @Html.HiddenFor(model => model.flag, new { @class = "form-control" })}


                                    <div class='col-sm-6 col-md-6 col-xs-12' id="dvJsonRoot">
                                        <div class='form-group'>
                                            <label class="">@Html.LabelFor(model => model.RootNode) </label>
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => model.RootNode, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.RootNode)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @Html.AntiForgeryToken();
                    @Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["EntityDataSourceParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm" })
                    if (EditPermission)
                    {
                        <input type="submit" name="command" value="Save" class="btn btn-primary btn-sm" />
                        <input type="submit" name="command" value="Save & Continue" class="btn btn-primary btn-sm" />
                    }
                    <input type="hidden" name="hdncommand" value="" />
                }
                @if (User.CanAdd("DataSourceParameters"))
                {
                    <a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "DataSourceParameters",
                  new
                  {
                      UrlReferrer = Request.Url.PathAndQuery,
								AssociatedType ="EntityDataSourceParameters",
						HostingEntityName = "EntityDataSource",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');") class="btn btn-primary btn-sm" style="margin-top:5px;">
                        Add Http Headers
                    </a>
                }
                @if (User.CanAdd("PropertyMapping"))
                {
                    <a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "PropertyMapping",
                  new
                  {
                      UrlReferrer = Request.Url.PathAndQuery,
								AssociatedType ="EntityPropertyMapping",
						HostingEntityName = "EntityDataSource",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');") class="btn btn-primary btn-sm" style="margin-top:5px;">
                        Add  Property Mapping
                    </a>
                }
            </div>
            <div class="tab-pane fade in" id="EntityDataSourceParameters">
                @if (User.CanView("DataSourceParameters"))
                {
                    // Html.RenderAction("Index", "DataSourceParameters", new {RenderPartial=true, HostingEntity = "EntityDataSource", HostingEntityID = @Model.Id, AssociatedType = "EntityDataSourceParameters" });
                }
            </div>
            <div class="tab-pane fade in" id="EntityPropertyMapping">
                @if (User.CanView("PropertyMapping"))
                {
                    // Html.RenderAction("Index", "PropertyMapping", new {RenderPartial=true, HostingEntity = "EntityDataSource", HostingEntityID = @Model.Id, AssociatedType = "EntityPropertyMapping" });
                }
            </div>
        </div> <!-- /tab-content -->
    </div>
</div>
    <script>
        $(function () {
            var userAgent = navigator.userAgent.toLowerCase();
            // Figure out what browser is being used
            var browser = {
                version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
                safari: /webkit/.test(userAgent),
                opera: /opera/.test(userAgent),
                msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
                mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
            };
            if (!browser.msie) {
                $('form').areYouSure();
            }
            else if (browser.version > 8.0) {
                $('form').areYouSure();
            }
        });
    </script>
    <script>
        $("input[type='submit']").click(function () {
            var $this = $(this);
            $('input:hidden[name="hdncommand"]').val($this.val());
        });
    </script>
    @{
        var busineesrule = User.businessrules.Where(p => p.EntityName == "EntityDataSource").ToList();
        if ((busineesrule != null && busineesrule.Count > 0))
        {
            <script>
                $(document).ready(function () {
                    $.ajax({
                        async: false,
                        type: "GET",
                        url: "@Url.Action("GetLockBusinessRules", "EntityDataSource")",
                        data: $("form").serialize(),
                        success: function (data) {
                            if (data.length > 0) {
                                $(':input:not([readonly])', 'form').attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                                document.getElementById('ErrMsg').innerHTML = data + " Rules applied";
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        }
                    });
                    $.ajax({
                        async: false,
                        type: "GET",
                        url: "@Url.Action("GetReadOnlyProperties", "EntityDataSource")",
                        data: $("form").serialize(),
                        success: function (data) {
                            for (var key in data) {
                                $('#' + key).attr('disabled', 'disabled').attr('readonly', 'readonly').trigger("chosen:updated");
                                $("input[type='radio'][name='" + key + "']").attr('disabled', 'disabled').attr('readonly', 'readonly');
                                $('form').append('<input type="hidden" name="' + key + '" id="' + key + '" value="' + $('#' + key).val() + '" />');
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        }
                    });
                });
            </script>
            <script>
                $("form").submit(function () {
                    var flag = true;

                    $.ajax({
                        async: false,
                        type: "GET",
                        url: "@Url.Action("GetMandatoryProperties", "EntityDataSource")",
                        data: $(this).serialize(),
                        success: function (data) {
                            $('[businessrule="mandatory"]').each(function () {
                                $(this).removeAttr('required');
                            });
                            document.getElementById('ErrMsg').innerHTML = "";
                            for (var key in data) {
                                if ($.trim($('#' + key).val()).length == 0 && $.trim($("input[type='radio'][name='" + key + "']:checked").val()).length == 0) {
                                    $('#' + key).attr('required', 'required');
                                    $('#' + key).attr('businessrule', 'mandatory');
                                    $("input[type='radio'][name='" + key + "']").attr('required', 'required');
                                    $("input[type='radio'][name='" + key + "']").attr('businessrule', 'mandatory');
                                    flag = false;
                                    document.getElementById('ErrMsg').innerHTML += data[key] + " is Mandatory.<br/>";
                                }
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        }
                    });
                    if (flag)
                        $("form").find(':input').removeAttr('disabled');
                    return flag;
                });
            </script>
        }
        else
        {

        }
    }


