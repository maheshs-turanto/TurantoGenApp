@model T_MenuItemIndexViewModel
@using PagedList.Mvc;
@using GeneratorBase.MVC.UIPropertyHtmlHelper;
@{
    var ActionNameUrl = "Index";
	var BackUrl =  Request.Url.PathAndQuery;
	if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer != null ?  Request.UrlReferrer.PathAndQuery : "";
	}
	if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
        if (!string.IsNullOrEmpty(Request.QueryString["backurlhome"]))
        { 
			BackUrl = Request.QueryString["backurlhome"];
        }
    }
	var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_MenuItem");
	var EntityReflectorProperties = EntityReflector.Properties;
	var RecycleView = ViewData["ShowDeleted"] != null && Convert.ToBoolean(ViewData["ShowDeleted"]);
	var EntityDisplayName = EntityReflector != null ? (HttpUtility.JavaScriptStringEncode(Html.DisplayName(EntityReflector.DisplayName).ToString())) : "Menu Item";
	var HideAction = GeneratorBase.MVC.Models.CustomHelperMethod.ShowHideAction("T_MenuItem");
	var viewbagname = Convert.ToString(Model.TemplatesName);
	var inlinegrid = Request.QueryString["inlinegrid"];
	var nonbridgecontrol = true;
	
}
@{
        if (!string.IsNullOrEmpty(ViewBag.T_MenuItemRestrictDropdownValueRuleInLIneEdit))
        {
            @Html.Raw(ViewBag.T_MenuItemRestrictDropdownValueRuleInLIneEdit);
        }
    }

<div id="T_MenuItem">
	@if (RecycleView)
    {
        <center><span class="text text-danger"><span class="fa fa-recycle"></span> Recycle Bin</span></center>
    }
<script type="text/javascript">
    $(document).ready(function () {
        var divId = $("#dvGroup" + "@ViewData["AssociatedType"]" + "Pivot");
        var divIdlist = $("#dvGroup" + "@ViewData["AssociatedType"]" + "PivotList");
        if (divId != undefined) {
            divId.show();
        }
        if (divIdlist != undefined)
            divIdlist.hide();
	if ('@inlinegrid' == 'true' || '@inlinegrid' == 'True') {
            $("#T_MenuItemGridHeader").addClass('collapse in');
             if ($("#dropdownMenuButtonMatrix") != undefined)
            $("#dropdownMenuButtonMatrix").hide() 
    }

	
	 $(".pagination a").click(function (e) {
			PaginationClick(e, 'T_MenuItem','@User.JavaScriptEncodedName')
        })
	    if("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH")
        {
            $("#fsearchT_MenuItem").addClass('show');
			FSearchColumnsShowHide('@ViewData["HideColumns"]', 'T_MenuItem');
        }
	    $("#SearchStringT_MenuItem").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_MenuItemSearch").bind("click", (function () {
                        }));
                $('#T_MenuItemSearch').trigger("click");
                return false;
			}
        })
        var usrName = "@User.JavaScriptEncodedName";
		var myCookie = usrName + "T_MenuItem" + "@ViewData["AssociatedType"]";
		if ($.cookie(myCookie) != null) {
			$("#btnShowHideT_MenuItem").click();
            $("#dvShowHideT_MenuItem").hide();
		}
		if ($("#ErrmsgLockRecord").length > 0 && $("#ErrmsgLockRecord").text().length > 0) {
              $(".float-left.actionbar").hide();
			  if ('@inlinegrid' == 'true' || '@inlinegrid' == 'True') {
		        $(".inlinegridoption").hide();
                divId.remove();
                divIdlist.remove();

		    }
		}
    });
	$("input[datatype='Double']").addClass("pull-right text-right");
</script>
@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport, string ExportType = null)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = Model.CurrentSort,
                IsAsc = Model.IsAsc,
				searchString = Request.QueryString["searchString"],
				 inlinegrid = Request.QueryString["inlinegrid"],
                currentFilter = Model.currentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				ExportType = ExportType,
				FSFilter = Model.FSFilter == null ? "Fsearch" : Model.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
				IsDivRender = Model.IsDivRender,
                IsDeepSearch = Model.IsDeepSearch,
  t_menubarmenuitemassociation = Request.QueryString["t_menubarmenuitemassociation"],
              
t_menuitemmenuitemassociation = Request.QueryString["t_menuitemmenuitemassociation"],
  T_AutoNoFrom = Request.QueryString["T_AutoNoFrom"],
  T_AutoNoFromhdn = Request.QueryString["T_AutoNoFromhdn"],
  T_AutoNoTo = Request.QueryString["T_AutoNoTo"],
  T_AutoNoTohdn = Request.QueryString["T_AutoNoTohdn"],
				search=Request.QueryString["search"],
				SortOrder = Request.QueryString["SortOrder"],
				viewtype = Model.TemplatesName,
				HideColumns = ViewData["HideColumns"],
				 GroupByColumn = Model.GroupByColumn,
				 FilterCondition = Model.FilterCondition,
			
				 ShowDeleted = ViewData["ShowDeleted"],
                 IsdrivedTab= ViewData["IsdrivedTab"]
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
				 inlinegrid = Request.QueryString["inlinegrid"],
                searchString = Request.QueryString["searchString"],
                IsAsc = (Model.IsAsc == "ASC" ? "DESC" : ""),
                page = Model.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				ExportType = ExportType,
				FSFilter = Model.FSFilter == null ? "Fsearch" : Model.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
				IsDivRender = Model.IsDivRender,
                IsDeepSearch = Model.IsDeepSearch,
t_menubarmenuitemassociation = Request.QueryString["t_menubarmenuitemassociation"],
 t_menuitemmenuitemassociation = Request.QueryString["t_menuitemmenuitemassociation"],
  T_AutoNoFrom = Request.QueryString["T_AutoNoFrom"],
  T_AutoNoFromhdn = Request.QueryString["T_AutoNoFromhdn"],
  T_AutoNoTo = Request.QueryString["T_AutoNoTo"],
  T_AutoNoTohdn = Request.QueryString["T_AutoNoTohdn"],
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = Model.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = Model.GroupByColumn,
		 FilterCondition = Model.FilterCondition,
		 		 ShowDeleted = ViewData["ShowDeleted"],
         IsdrivedTab= ViewData["IsdrivedTab"]

            };
        }
    }
}
   <div id="T_MenuItemGridHeader" class="">
@if(Model.IsdrivedTab == null)
{
	    if (!RecycleView)
        { 
            <div class="float-left actionbar">
			@if (User.CanAdd("T_MenuItem"))
			{
			<a id="addInlineRowT_MenuItem" style="display:none;"
			 onclick="@Html.Raw("OpenInlineEntity(this,'T_MenuItem','" + Url.Action("CreateInline", "T_MenuItem", new {AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "')")">
			</a>
                 <div class="btn-group mb-1" id='@ViewData["HostingEntity"]_T_MenuItem'>
				 <div class="dropdown">
				  <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
				  <i class="fa fa-plus-circle"></i> Add <span class="caret"></span>
				  </button>
                      <ul class="dropdown-menu multi-level" role="menu" aria-labelledby="dropdownMenu">
					 @if (User.CanAdd("T_MenuItem"))
					 {
								if (Model.IsDivRender == true)
                            { <li class="dropdown-item">
                                <a data-original-title="Full Add" data-placement="top" onclick="LoadDivInsideTab('@ViewData["AssociatedType"]','','@Html.Raw(Url.Action("Create", "T_MenuItem", new { RenderPartial = true, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), viewtype = viewbagname ,}))')" alt="Full Add" title="Full Add">
                                    <i class="fa fa-plus-circle" ></i> Full Add
                                </a>
								</li>
                            }
                            else
                            {
							<li class="dropdown-item">
					<a  data-original-title="Full Add" data-placement="top" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_MenuItem", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname }, null) + "');") alt="Full Add" title="Full Add">
						<i class="fa fa-plus-circle" ></i> Full Add
					</a>
					</li>
							}
			if (Model.IsDivRender != true)
			{
					<a style='display:none;'  data-placement="top" id="addT_MenuItem" data-original-title="Quick Add" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','"+EntityDisplayName+"','dvPopup','" + Url.Action("CreateQuick", "T_MenuItem", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = viewbagname }) + "')")" alt="Quick Add" title="Quick Add">
                    </a>
			}
	

}		
  </ul>
 </div>
</div>
	  }
	                  @if (ViewData["HostingEntity"] != null && User.CanAdd("T_MenuBarMenuItemAssociation") && Convert.ToString(ViewData["AssociatedType"]).Trim() == "T_MenuBarMenuItemAssociation_T_MenuBar")
                {
					nonbridgecontrol = false;
                    if (Model.IsDivRender == null || Model.IsDivRender == false)
                    {
						var	popupDisplayLabel = EntityDisplayName;
						
						<div class="btn-group mb-1">	<a class="btn btn-secondary" data-placement="top" data-original-title="Quick (Un)Assign"  data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','"+popupDisplayLabel+"','dvPopup','" + Url.Action("CreateQuick", "T_MenuBarMenuItemAssociation", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now }) + "')")">
						<span class="fa fa-plus-circle"></span> Quick (Un)Assign
                    </a></div>
                    }
					<div class="btn-group mb-1"><a class="btn btn-secondary" type="button" data-original-title="Full (Un)Assign" data-placement="top"  onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_MenuBarMenuItemAssociation", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null) + "');")>
						 <span class="fa fa-plus-circle"></span> (Un)Assign
					</a></div>
                }

                   
	@if (Model.IsDivRender == null || Model.IsDivRender == false)
	{
if (nonbridgecontrol && (((User.CanEdit("T_MenuItem") && User.CanUseVerb("BulkUpdate", "T_MenuItem", User)) || (User.CanDelete("T_MenuItem") && User.CanUseVerb("BulkDelete", "T_MenuItem", User)) || User.CanUseVerb("BulkDocumentDownload", "T_MenuItem", User))))
{
<div class="btn-group mb-1">
<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu3" data-original-title="Bulk Actions" data-toggle="dropdown" href="#">
           <span class="fa fa-wrench"></span> Bulk <i class="caret"></i>
     </button>
        <div class="dropdown-menu" role="menu">
			@if ( User.CanEdit("T_MenuItem")&&  User.CanUseVerb("BulkUpdate","T_MenuItem",User))
	{
		<a class="dropdown-item" data-placement="top" style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup"
			onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update "+EntityDisplayName+"','dvPopup','" + Url.Action("BulkUpdate", "T_MenuItem", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "','T_MenuItem')")"> <i class="fa fa-edit" aria-hidden="true"></i> 
Update</a>
	}
 
	 @if ( User.CanDelete("T_MenuItem") && User.CanUseVerb("BulkDelete","T_MenuItem",User))
     {
		<a class="dropdown-item" style="cursor:pointer;" onclick="PerformBulkOperation(this,'T_MenuItem','Bulk Delete','@Url.Action("DeleteBulk", "T_MenuItem")','@ViewData["AssociatedType"]');">
		<i class="fa fa-trash" aria-hidden="true"></i>
 Delete
 </a>
	 }
                                        @if (ViewBag.ExportDataTemplates != null)
                                        {
                                            foreach (var item in (List<GeneratorBase.MVC.Models.T_ExportDataConfiguration>)ViewBag.ExportDataTemplates)
                                            {
                                                <a class="dropdown-item" style="cursor:pointer;" data-original-title="@item.T_Name" data-target="#dvPopup" onclick="PerformBulkOperationExportData(this,'T_MenuItem','@item.T_Name','@Url.Action("ExportDataNote", "T_MenuItem", new { btnid = item.Id, Ids = "IDSLST", TS = DateTime.Now })',true);">
                                                    <i class="fa fa-file-export" aria-hidden="true"></i> @item.T_Name
                                                </a>
                                            }
                                        }
                        </div>
</div>
                    </div>
  }
}


@if (Model.IsDivRender == null || Model.IsDivRender == false)
{
<div class="btn-group mb-1">
<div class="dropdown">
	   <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-original-title="Filter-Groupby" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Tools
            </button>
                            <div class="dropdown-menu multi-level" role="menu">
               @if (ViewData["HostingEntity"] == null)
			   {
                        <a class="dropdown-item" data-placement="top" data-original-title="Show Graph" data-toggle="modal" data-target="#ShowGraphT_MenuItem" onclick=@Html.Raw("OpenDashBoard('dvShowGraphT_MenuItem');") alt="Show Graph" title="Show Graph">
                            <span class="fa fa-chart-line"></span> Show Graph
                        </a>
				}
		@if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
			{
				<a class="dropdown-item" id="showAssociateBtn"  data-placement="top" data-original-title="Associate Menu Item with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','"+EntityDisplayName+"','dvPopupBulkOperation','" + Url.Action("Index", "T_MenuItem", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now,viewtype = viewbagname }) + "')")">
					<i class="fa fa-plus-circle" ></i> Bulk Associate
				</a>
			<script>
				if($("#HostingEntityDisplayValue").attr('id')==undefined)
				$("#showAssociateBtn").hide();
			</script>
			}
        
			@if ( User.CanAdd("T_MenuItem") && User.CanUseVerb("ImportExcel", "T_MenuItem", User))
			{
				 <a  class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_MenuItem", new { filetype = "xls", AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), UrlReferrer = BackUrl }) + "');") alt="Import Excel" title="Import Excel">
                        <i class="fa fa-upload"></i> Import Excel
                 </a>
			}
             @if (User.CanAdd("T_MenuItem") && User.CanUseVerb("ImportExcelAdvanced", "T_MenuItem", User))
            {
                <a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_MenuItem", new { filetype = "xls", AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), UrlReferrer = BackUrl,ImportType= "adv"}) + "');") alt="Import Excel(Advanced)" title="Import Excel(Advanced)">
                    <i class="fa fa-upload"></i> Import Excel(Advanced)
                </a>
            }
			@if ( User.CanAdd("T_MenuItem") && User.CanUseVerb("ImportCSV", "T_MenuItem", User))
			{
				 <a  class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_MenuItem", new { filetype = "csv", AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), UrlReferrer = BackUrl }) + "');") alt="Import CSV" title="Import CSV">
                        <i class="fa fa-upload"></i> Import CSV
                 </a>
			}
             @if (User.CanAdd("T_MenuItem") && User.CanUseVerb("ImportCSVAdvanced", "T_MenuItem", User))
            {
                <a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_MenuItem", new { filetype = "csv", AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), UrlReferrer = BackUrl,ImportType= "adv" }) + "');") alt="Import CSV(Advanced)" title="Import CSV(Advanced)">
                    <i class="fa fa-upload"></i> Import CSV(Advanced)
                </a>
            }

	     		@if (User.CanView("T_MenuItem") && User.CanUseVerb("ExportExcel", "T_MenuItem", User))
                {
					<a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_MenuItem",getSortHtmlAttributes(null, false, null, true, "xls"), null) + "');") alt="Export Excel" title="Export Excel">
						<i class="fa fa-download"></i> Export Excel
					</a>
				}
				@if (User.CanView("T_MenuItem") && User.CanUseVerb("ExportCSV", "T_MenuItem", User))
                {
					<a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_MenuItem",getSortHtmlAttributes(null, false, null, true, "csv"), null) + "');") alt="Export CSV" title="Export CSV">
						<i class="fa fa-download"></i> Export CSV
					</a>
				}
		         </div>
        </div>
       </div>
}

</div>				
}


}
				<div class="float-right" style="">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_MenuItem", Model.currentFilter as string, null, new { @class = "form-control listsearchbox", @value = Model.HomeVal, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_MenuItemSearch" onclick="SearchClick(event, 'T_MenuItem', '@Html.Raw(Url.Action("Index", "T_MenuItem", new {inlinegrid = inlinegrid, ShowDeleted = ViewData["ShowDeleted"], IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = viewbagname,IsdrivedTab= ViewData["IsdrivedTab"] }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-secondary tip-top"   alt="Grid Search" title="Search on grid"><span class="fa fa-search"></span></a>
								<a id="T_MenuItemCancel" class="btn btn-secondary collapse-data-btn tip-top" onclick="CancelSearch('T_MenuItem','@Html.Raw(Url.Action("Index", "T_MenuItem", new {inlinegrid = inlinegrid, ShowDeleted = ViewData["ShowDeleted"],IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), HideColumns = ViewData["HideColumns"], viewtype = viewbagname,IsdrivedTab= ViewData["IsdrivedTab"] }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top"  alt="Clear Search" title="Clear Search">
                                    <span class="fa fa-minus-circle"></span>
                                </a>
                                <a id="T_MenuItemSearchCancel" class="btn btn-secondary collapse-data-btn tip-top" onclick="CancelSearch('T_MenuItem','@Html.Raw(Url.Action("Index", "T_MenuItem", new {inlinegrid = inlinegrid, ShowDeleted = ViewData["ShowDeleted"], IsFilter=ViewData["IsFilter"], itemsPerPage=Convert.ToInt32(Model.PageSize),HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], viewtype = viewbagname,IsdrivedTab= ViewData["IsdrivedTab"]}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top"  alt="Refresh Grid" title="Refresh Grid">
                                    <span class="fa fa-sync-alt"></span>
                                </a>
								<a id="T_MenuItemRefresh" class="fa fa-refresh d-none" onclick="CancelSearch('T_MenuItem','@Html.Raw(Url.Action(ActionNameUrl, "T_MenuItem", getSortHtmlAttributes(Model.CurrentSort, false,null, false)))','@User.Name')"></a>
	@if (ViewData["HostingEntity"]==null)
	{ 
					<a data-toggle="dropdown" data-original-title="Queries" class="btn btn-secondary tip-top" alt="Queries" title="Queries"><span class="fa fa-binoculars"> <span class="caret"></span></a>
                        <ul class="dropdown-menu" role="menu">
                            <li class="dropdown-item">
                                <a href="@(Url.Action("SetFSearch", "T_MenuItem")+Request.Url.Query)" data-placement="top" alt="Define new query" title="Define new query">
                                    <span class="fa fa-plus" style="margin-right:3px;"></span> New Query
                                </a>
                            </li>

							
	@if (User.CanView("T_MenuItem"))
	{ 
	<li>
 <a class="dropdown-item" data-toggle="collapse" id="T_MenuItemSetFSearchGridbtn" onclick="@Html.Raw("LoadSetFSearchGridfun(this,'"+Url.Action("SetFSearchGrid", "T_MenuItem", new {HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), AssociatedType= @Convert.ToString(ViewData["AssociatedType"])  })+"','T_MenuItem');")">
                <i class="fa fa-filter"> </i> Filter </a></li>

	} 
<li style="border-bottom: 1px solid #ddd;
    color: #194969!important;
    padding-left: 15px;
    font-weight: bold;
    font-size: 16px!important; 
    background: #f3f5f9;
    border-top: 1px solid #ddd; margin-top:5px; margin-bottom:5px">Saved Queries</li>
                            <li class="dropdown-item">
                                @foreach (var fsearch in User.GetFacetedSearch("T_MenuItem", User))
                                {
                                    <a href="~/@fsearch.T_LinkAddress&FsearchId=@fsearch.Id&ShowDeleted=@Convert.ToString(ViewData["ShowDeleted"])" data-placement="top" alt="@fsearch.T_Description" title="@fsearch.T_Description">
                                        <span class="fa fa-filter" style="margin-right:3px;"></span> @fsearch.T_Name
                                    </a>
                                }
                            </li>
                        </ul>
	}
                            </div>
                        </div>
                    </div>

			 <div style="clear:both"></div>
	
	
</div>
<div class="row">
 
 <div id="LoadT_MenuItemSetFSearchGrid" class="collapse">
        </div>
@*@{Html.RenderPartial("~/Views/T_MenuItem/SetFSearchGrid.cshtml", new GeneratorBase.MVC.Models.T_MenuItem());}*@
<div class="col" style="width:200px; float:left; ">
@if (Model.SearchResult != "" && Model.IsdrivedTab == null )
                            {
			<div id="fsearchT_MenuItem" class="collapse QueryResult p-2 col-sm-12 m-0 bg-light border row" >
                        <div class="col-sm-6">  @Html.Raw(Html.Encode(Model.SearchResult).Replace(Environment.NewLine, ""))</div>
						<div class="col-sm-6 text-right">
						@if (Model.IsGroupBy != null && Convert.ToBoolean(Model.IsGroupBy))
                                    {
						 <a class="btn btn-primary btn-sm ExpandAllOpen">Expand All</a>
						 }
						@if (ActionNameUrl == "FSearch" && ViewData["HostingEntity"] != null)
						{
							<a onclick="window.location.reload();" class="btn btn-primary btn-sm"><span class="fa fa-times-circle"></span> Clear</a>
						}
						else
						{ 
							<a href="@Url.Action("Index", "T_MenuItem",new{ShowDeleted = ViewData["ShowDeleted"], viewtype = viewbagname})" class="btn btn-primary btn-sm"><span class="fa fa-times-circle"></span> Clear</a>
						}
						 <a href="@(Url.Action("SetFSearch", "T_MenuItem")+Request.Url.Query)" class="btn btn-primary btn-sm"><span class="fa fa-edit"></span> Modify</a>
						 @if (User.CanAdd("T_FacetedSearch"))
                         { 
                         if (!string.IsNullOrEmpty(Model.FsearchId))
                            {
                                <a id='aBtnQuickEditT_FacetedSearch_@Convert.ToInt32(Model.FsearchId)' onclick="@Html.Raw("OpenPopUpEntityQuickEdit('addPopup','Edit FacetedSearch','dvPopup','" + Url.Action("EditQuick", "T_FacetedSearch", new
																			{
																				id = Convert.ToInt32(Model.FsearchId),
																				 UrlReferrer = Html.Raw(Request.Url.PathAndQuery),
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                                                                                FsearchId=Model.FsearchId
																			}) + "')")" class="btn btn-primary btn-sm"><span class="fa fa-floppy-o"></span> Edit</a>
                          }
                         else
                            {
						 <a onclick="@Html.Raw("OpenPopUpEntity('addPopup','Query','dvPopup','" + Url.Action("CreateQuick", "T_FacetedSearch", new { EntityName="T_MenuItem",Url=Html.Raw(Request.Url.PathAndQuery) }) + "')")" class="btn btn-primary btn-sm"><span class="fa fa-floppy-o"></span> Save</a>
                          }
						 }
            </div>
			</div>
	}
	  @if (Model.list.Count > 0 && Model.list.TotalItemCount > 10)
      {
                    <div id="pagination">
					@if(Model.list.TotalItemCount > Convert.ToInt32(Model.PageSize))
					{
						   @Html.PagedListPager(Model.list, page => Url.Action(ActionNameUrl, "T_MenuItem", getSortHtmlAttributes(null, true, page, false)),
						   new PagedListRenderOptions
						   {
							   FunctionToTransformEachPageLink = (liTag, aTag) =>
							   {
								   aTag.Attributes.Add("class", "page-link");
								   liTag.InnerHtml = aTag.ToString();
								   return liTag;
							   },
							   LiElementClasses = new[] { "page-item" },
							   UlElementClasses = new[] { "pagination pagination-sm" }
						   })
					}
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 }  }, "Value", "Key")
							, new {@class="ignorefield", @id = "pagesizelistT_MenuItem",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_MenuItem','"
							 + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_MenuItem",
							 getSortHtmlAttributes(Model.CurrentSort, Model.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.list.TotalItemCount)</span>
							<script>
                                    $(document).ready(function () {
                                        $.validator.setDefaults({
                                            ignore: "#pagesizelistT_MenuItem"
                                        })
                                    }); 
                                </script>
                        </div>
                    </div>
					<div style="clear:both"></div>
        }
@if (Model.IsGroupBy != null && Convert.ToBoolean(Model.IsGroupBy))
{
<script>
    $(document).ready(function(){
        $('.hideTr').slideUp(600);
        $('[data-toggle="toggle"]').click(function () {
            var tag = $(this).find("p").attr("id");
            if ($(this).parents().next(".hideTr").is(':visible')) {
                $(this).parents().nextAll('.hideTr[tag="'+tag+'"]').slideUp(600);
                $(".plusminus_" + $(this).children().children().attr("id")).text('+');
                $(this).css('background-color', 'white');
            }
            else {
                  $(this).parents().nextAll('.hideTr[tag="'+tag+'"]').slideDown(600);
                $(".plusminus_" + $(this).children().children().attr("id")).text('-');
                $(this).css('background-color', '#c1eaff');
            }
        });
        $('.ExpandAllOpen').click(function(){
            var link = $(this);
            if(link.text() == "Expand All")
            {
                $('.hideTr').slideDown(600);
                link.text('Collapse All');
                $( "[class^='plusminus_']" ).text('-'); 
            }
            else
            {
                $('.hideTr').slideUp(600);
                link.text('Expand All');
                $( "[class^='plusminus_']" ).text('+'); 
            }
            
        });
    });
</script>
 }
 
	  <div id="Des_Table" class="table-responsive" style="margin-top:5px;">
                            <table class="table table-hover default-bordered default-condensed newlist">
                              <thead id="theaderT_MenuItem">
                <tr>
@if ((Model.IsDivRender == null || Model.IsDivRender == false)  && ((User.CanEdit("T_MenuItem") && User.CanUseVerb("BulkUpdate", "T_MenuItem", User)) || (User.CanDelete("T_MenuItem") && User.CanUseVerb("BulkDelete", "T_MenuItem",User))))
{
	 <th class="col0" style="width:30px" scope="col" data-sort-ignore="true">
<div style="width:10px">
<div class="CheckboxHeaderFix">
		<input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this,'T_MenuItem');" />
        @Html.Hidden("SelectedItems")
<div>
<div>
	</th>
}
<th scope="col" class="col1" alt="Actions" title="Actions" data-sort-ignore="true">
                    <div style="width: 65px;"><span class="ActionsHeaderFix">Actions </span></div>
                </th>

@{string[] HostEntitysT_MenuBarMenuItemAssociationT_OrderNumber = {"T_MenuBar","T_MenuItem"};}
		@if (ViewData["HostingEntity"] != null && HostEntitysT_MenuBarMenuItemAssociationT_OrderNumber.Any(p => p.Contains(Convert.ToString(ViewData["HostingEntity"]))))
		{
			<th scope="col" class="col3">Order Number</th>
		}
@if(User.CanView("T_MenuItem","T_AutoNo") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_AutoNo");
			<th scope="col" class="col3" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_AutoNo", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_AutoNo")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_AutoNo")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
@if(User.CanView("T_MenuItem","T_Name") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_Name");
			<th scope="col" class="col4" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_Name", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_Name")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_Name")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
@if(User.CanView("T_MenuItem","T_ToolTip") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_ToolTip");
			<th scope="col" class="col5" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_ToolTip", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_ToolTip")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_ToolTip")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
@if(User.CanView("T_MenuItem","T_DisplayOrder") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_DisplayOrder");
			<th scope="col" class="col6" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_DisplayOrder", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_DisplayOrder")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_DisplayOrder")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
@if(User.CanView("T_MenuItem","T_ClassIcon") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_ClassIcon");
			<th scope="col" class="col7" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_ClassIcon", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_ClassIcon")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_ClassIcon")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
	@if(User.CanView("T_MenuItem") && User.CanView("T_MenuItem","T_MenuItemMenuItemAssociationID"))
{
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_MenuItemMenuItemAssociationID");
			<th scope="col"  class="col8" @(Convert.ToString(ViewData["HostingEntity"]) == "T_MenuItem" && Convert.ToString(ViewData["AssociatedType"]) == "T_MenuItemMenuItemAssociation"?"hidden":"")>
				@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_MenuItemMenuItemAssociationID", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" })
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_MenuItemMenuItemAssociationID")
				{<i class="fa fa-sort-amount-asc" title="Descending"></i>}
				@if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_MenuItemMenuItemAssociationID")
				{<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			 </th>
}
@if(User.CanView("T_MenuItem","T_Entity") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_Entity");
			<th scope="col" class="col9" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_Entity", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_Entity")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_Entity")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
@if(User.CanView("T_MenuItem","T_Action") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_Action");
			<th scope="col" class="col10" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_Action", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_Action")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_Action")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
@if(User.CanView("T_MenuItem","T_LinkAddress") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_LinkAddress");
			<th scope="col" class="col11" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_LinkAddress", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_LinkAddress")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_LinkAddress")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
@if(User.CanView("T_MenuItem","T_EntityValue") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_EntityValue");
			<th scope="col" class="col12" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_EntityValue", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_EntityValue")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_EntityValue")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
@if(User.CanView("T_MenuItem","T_SavedSearch") )
{	
			var SortPropertyName = EntityReflectorProperties.FirstOrDefault(q => q.Name == "T_SavedSearch");
			<th scope="col" class="col13" >
			@Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "T_MenuItem",getSortHtmlAttributes("T_SavedSearch", false, null, false),new {  @onclick = "SortLinkClick(event,'T_MenuItem');" }) 
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_SavedSearch")
                {<i class="fa fa-sort-amount-asc" title="Descending"></i>}
                @if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_SavedSearch")
                {<i class="fa fa-sort-amount-desc" title="Ascending"></i>}
			</th>
}
</tr>
<tr id="trInlineT_MenuItem" style="display:none; padding:0px!important">
                <th id="tdInlineT_MenuItem" colspan="14" style="padding: 0px!important;">

                </th>
</tr>
</thead>
   @{
                                    var RowCounter = 0;
                                    var RowCounter1 = 0;
                                }
@{ bool isFirst = true; string oldKey = null; }
                                @foreach (var item in Model.list)
                                {
									List<string> hiddenProperties = new List<string>();
									if (User.businessrules.Any(p => p.EntityName == "T_MenuItem" && p.ActionTypeID.Contains(6)))
									{
									   hiddenProperties = item.ApplyHiddenRule(User.businessrules, "T_MenuItem");
									}
																			bool isRecordReadOnly = false;
									if (User.businessrules.Any(p => p.EntityName == "T_MenuItem" && (p.ActionTypeID.Contains(1) ||  p.ActionTypeID.Contains(11))))
									{
										isRecordReadOnly = item.ApplyLockRecordRule((object)item, User, User.businessrules.Where(p => p.EntityName == "T_MenuItem" && (p.ActionTypeID.Contains(1) ||  p.ActionTypeID.Contains(11))).ToList(), "T_MenuItem");
									}
									if (ViewData["HostingEntity"] != null && !isRecordReadOnly  && ViewBag.HostingEntityIDData!=null)
									{
										isRecordReadOnly = item.ApplyLockRecordRule((object)ViewBag.HostingEntityIDData, User, User.businessrules.Where(p => p.EntityName == ViewData["HostingEntity"].ToString() && (p.ActionTypeID.Contains(1) || p.ActionTypeID.Contains(11))).ToList(), ViewData["HostingEntity"].ToString());
									}
									if(!isRecordReadOnly)
									{
										isRecordReadOnly = !User.CanEditItemInHierarchy("T_MenuItem", item, User);
									}
									if (Model.IsGroupBy != null && Convert.ToBoolean(Model.IsGroupBy))
                                    {
                                        var groupKey = item.m_DisplayValue;
                                        if (oldKey != groupKey)
                                        {
                                            isFirst = true;
                                            oldKey = item.m_DisplayValue;
                                        }
                                        if (isFirst || oldKey == null)
                                        {
                                            isFirst = false;
                                            string groupString = string.Empty;
                                           
											<tr data-toggle="toggle">
                                                <td colspan="14" style="background: #EDF5FA; font-weight:bold; cursor: pointer;">
                                                    <p id="@(++RowCounter)">
                                                        <b>
                                                            <span class="plusminus_@(++RowCounter1)">+</span>

                                                        </b> @groupKey @groupString
														
                                       </p>
                                    </td>
														</tr>
                                        }
                                    }
      <tbody class="hideTr" tag="@RowCounter1">
	 <tr scope="row">
@if ((Model.IsDivRender == null || Model.IsDivRender == false)  && ((User.CanEdit("T_MenuItem") && User.CanUseVerb("BulkUpdate", "T_MenuItem", User)) || (User.CanDelete("T_MenuItem") && User.CanUseVerb("BulkDelete", "T_MenuItem",User))))
{	
	 <td>
           <div class="CheckboxrowFix">
			 <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id','T_MenuItem');" autocomplete="off"/>
         </div>
	 </td>
}	
		   <td class="btnaction" rowid="btnrow_@item.Id" businessrule='@Html.Raw(Url.Action("ApplyBusinessRuleBeforeById", new { objectId = item.Id }))'>
	   <div style="display:none;">
			<div class="btn-group tdDoubleClickGroup" >
				<a onclick="SavePropertiesValue(this,'T_MenuItem',@item.Id,'@Url.Action("SavePropertiesValue")');" class="btn btn-xs btn-lightBlue" alt="Save" title="Save" style="font-size:1rem;padding:0px 5px;color:white;">
					<i class="fa fa-save"></i> 
				</a>
				<a onclick="$('#T_MenuItemRefresh').click();" class="btn btn-xs btn-default" alt="Cancel" title="Cancel" style="font-size:1rem;padding:0px 5px;">
					<i class="fa fa-close"></i> 
				</a>
			</div>
		</div>
			   <div id="DivbutEdit" class="DivbutEditFix" style="width: 65px;">
		<div class="btn-group">
		@if (User.CanEdit("T_MenuItem"))
        {
			 var editIconClass = isRecordReadOnly ? "fa fa-eye" : "fas fa-pencil-alt";
			 var edittitle = isRecordReadOnly ? "View" : "Edit";
			if (Model.IsDivRender == true)
            {
                <a onclick="LoadDivInsideTab('@ViewData["AssociatedType"]','','@Html.Raw(Url.Action("Edit", "T_MenuItem", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), RenderPartial = Model.IsDivRender, viewtype = viewbagname, RecordReadOnly = isRecordReadOnly  }, null))')" class="btn btn-info btn-xs" alt="@edittitle" title="@edittitle">
                    <i class="fas fa-pencil-alt"></i>
                </a>
            }
            else
            {
                <a href="@Url.Action("Edit","T_MenuItem", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname, RecordReadOnly = isRecordReadOnly  },null)" class="btn btn-info btn-xs" alt="@edittitle" title="@edittitle"> 
					<i class="@editIconClass"></i>
				</a>
            }	
		}
		@if (!User.CanEdit("T_MenuItem"))
                    {
            <a href="@Url.Action("Details", "T_MenuItem", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), viewtype = viewbagname }, null)" class="btn btn-secondary btn-xs" >
                <i class="fa fa-eye"></i>
            </a>
        }
			<button class="btn dropdown-toggle btn-secondary btn-xs" type="button" data-toggle="dropdown" aria-expanded="true">
                 <span class="sr-only"></span>
           </button>
			<ul class="dropdown-menu">
			 @if (User.CanEdit("T_MenuItem") && isRecordReadOnly)
                {
                <li>
                        <a class="dropdown-item" href="@Url.Action("Edit","T_MenuItem", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname, RecordReadOnly = isRecordReadOnly },null)"><i class="fa fa-eye"></i>  View</a>
                </li>            
                }
                else
                {
                    <li>
                    <a class="dropdown-item" href="@Url.Action("Details", "T_MenuItem", new { id = item.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"])  }, null)" alt="View" title="View"><i class="fa fa-eye"></i>  View</a>
                </li>
                }

				
			@if (!User.CanEdit("T_MenuItem"))
                    {
}

			<div class="dropdown-divider"></div>	
			@if (User.CanEdit("T_MenuItem"))
					{
				 <li>
						<a  class="dropdown-item nohref" id='aBtnQuickEditT_MenuItem_@item.Id' style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntityQuickEdit('addPopup','Edit " + (EntityDisplayName) + "','dvPopup','" + Url.Action("EditQuick", "T_MenuItem", new
																			{
																				id = item.Id,
																				UrlReferrer = Request.Url.PathAndQuery,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = viewbagname,RecordReadOnly = isRecordReadOnly
																			}) + "')")"> <i class="fas fa-pencil-alt"></i> Quick Edit</a>
				</li>
				}
@{string[] HostEntitysT_MenuBarMenuItemAssociation = {"T_MenuBar","T_MenuItem"};}
                @if (User.CanEdit("T_MenuBarMenuItemAssociation") && HostEntitysT_MenuBarMenuItemAssociation.Any(p => p.Contains(Convert.ToString(ViewData["HostingEntity"]))))
                {
                    <li>
                        <a class="dropdown-item" id='aBtnQuickEditT_MenuBarMenuItemAssociation_@item.Id' style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntityQuickEdit('addPopup','" + (HttpUtility.JavaScriptStringEncode(Html.DisplayName("Edit Menu Bar Menu Item Association").ToString())) + "','dvPopup','" + Url.Action("EditBridgeQuick", "T_MenuBarMenuItemAssociation", new
																			{
                                                                                otherId = item.Id,
																				UrlReferrer = Request.Url.PathAndQuery,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = viewbagname
																			}) + "')")"><i class="fas fa-pencil-alt"></i> Edit Menu Bar Menu Item Association</a>
                    </li>
                }
				@if (User.CanEdit("T_MenuItem") && !isRecordReadOnly)
                {
				<li>
                        <a class="dropdown-item" href="@Url.Action("Edit","T_MenuItem", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname },null)"><i class="fa fa-edit"></i>  Edit</a>
                </li>             
				}
<div class="dropdown-divider"></div>

	<li class="divider" style="clear:both"></li>
	<li class="dropdown-submenu" id="AddAssociationdropmenuT_MenuItem_@item.Id">
	 @{ var dropmenu = false; }
	<a class="dropdown-item" tabindex="-1" href="#"><i class="fa fa-plus-circle"></i> Add</a>
    <ul class="dropdown-menu pull-left">
				@if ( User.CanAdd("T_MenuItem"))
				{
					dropmenu = true;
					<li>
						<a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_MenuItem", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_MenuItemMenuItemAssociation", 
							HostingEntityName = "T_MenuItem",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="fa fa-plus"></i>  Child Items
						</a>
					</li>
				}
			</ul>
</li>
@if(!dropmenu || isRecordReadOnly || !nonbridgecontrol)
{
    <script>
        $("#AddAssociationdropmenuT_MenuItem_@item.Id").hide();
    </script>
}
	@if(!HideAction)
	{ 
<div class="dropdown-divider" style="display:none"></div>
 <li class="dropdown-submenu" style="display:none">
	<a class="dropdown-item" tabindex="-1" href="#"><i class="fa fa-search"></i> Search Matching</a>
    <ul class="dropdown-menu">
<li>
		<a class="dropdown-item" href="@Url.Action("FindFSearch", "T_MenuBarMenuItemAssociation", new {sourceEntity="T_MenuItem",id=item.Id}, null)">Menu Bar Menu Item Association</a>
</li>
</ul>
</li>
}
<div class="dropdown-divider"></div>
			@if (nonbridgecontrol && User.CanDelete("T_MenuItem") && !isRecordReadOnly)
                 {
				 <li class="divider" style="clear:both"></li>
				<li>
                    <a class="dropdown-item" href="@Url.Action("Delete", "T_MenuItem", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = viewbagname }, null)"><i class="fa fa-times-circle" style="color: #E7574B;"></i> Delete</a>
                </li>
				}
			</ul>
		</div>
		</div>
	</td>
							@{string[] HostEntitysT_MenuBarMenuItemAssociationT_OrderNumber1 = {"T_MenuBar","T_MenuItem"};}
						@if (ViewData["HostingEntity"] != null && HostEntitysT_MenuBarMenuItemAssociationT_OrderNumber1.Any(p => p.Contains(Convert.ToString(ViewData["HostingEntity"]))))
						{
							<td onclick="@Html.Raw("OpenPopUpEntityQuickEdit('addPopup','" + (EntityDisplayName) + "','dvPopup','" + Url.Action("EditBridgeQuick", "T_MenuBarMenuItemAssociation", new
																							{
																								otherId = item.Id,
																								UrlReferrer = Request.Url.PathAndQuery,
																								AssociatedType = ViewData["AssociatedType"],
																								HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																								HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																								TS = DateTime.Now,viewtype = viewbagname
																							}) + "')")">
							@Html.DisplayFor(modelItem => item.T_MenuBarMenuItemAssociation_t_menuitem.FirstOrDefault(p=>p.T_MenuItemID == item.Id).T_OrderNumber)
							</td>
						}
	@if(User.CanView("T_MenuItem","T_AutoNo"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_AutoNo"  >
		
          @Html.DisplayFor(modelItem => item.T_AutoNo)
          </td>
}
@if(User.CanView("T_MenuItem","T_Name"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_Name"  >
		
          @Html.DisplayFor(modelItem => item.T_Name)
          </td>
}
@if(User.CanView("T_MenuItem","T_ToolTip"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_ToolTip"  >
		
          @Html.DisplayFor(modelItem => item.T_ToolTip)
          </td>
}
@if(User.CanView("T_MenuItem","T_DisplayOrder"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_DisplayOrder"  >
		
          @Html.DisplayFor(modelItem => item.T_DisplayOrder)
          </td>
}
@if(User.CanView("T_MenuItem","T_ClassIcon"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_ClassIcon"  >
		
          @Html.DisplayFor(modelItem => item.T_ClassIcon)
          </td>
}
	@if(User.CanView("T_MenuItem") && User.CanView("T_MenuItem","T_MenuItemMenuItemAssociationID"))
{
					
			<td title="@Html.DisplayFor(modelItem => item.t_menuitemmenuitemassociation.DisplayValue)"  @(Convert.ToString(ViewData["HostingEntity"]) == "T_MenuItem" && Convert.ToString(ViewData["AssociatedType"]) == "T_MenuItemMenuItemAssociation"?"hidden":"") onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);">
						            @Html.DisplayFor(modelItem => item.t_menuitemmenuitemassociation.DisplayValue)
			        </td>
}
@if(User.CanView("T_MenuItem","T_Entity"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_Entity"  >
		
          @Html.DisplayFor(modelItem => item.T_Entity)
          </td>
}
@if(User.CanView("T_MenuItem","T_Action"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_Action"  >
		
          @Html.DisplayFor(modelItem => item.T_Action)
          </td>
}
@if(User.CanView("T_MenuItem","T_LinkAddress"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_LinkAddress"  >
		
          @Html.DisplayFor(modelItem => item.T_LinkAddress)
          </td>
}
@if(User.CanView("T_MenuItem","T_EntityValue"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_EntityValue"  >
		
          @Html.DisplayFor(modelItem => item.T_EntityValue)
          </td>
}
@if(User.CanView("T_MenuItem","T_SavedSearch"))
{
		
<td onclick="OpenQuickEdit('T_MenuItem','@item.Id',event);"  title="@item.T_SavedSearch"  >
		
          @Html.DisplayFor(modelItem => item.T_SavedSearch)
          </td>
}
                                </tr>
</tbody>
                            }
                    </table>
                </div>
				
   			    @if (Model.list.Count > 0 && Model.list.TotalItemCount > 10)
                {
                    <div id="pagination">
					@if(Model.list.TotalItemCount > Convert.ToInt32(Model.PageSize))
					{
						 @Html.PagedListPager(Model.list, page => Url.Action(ActionNameUrl, "T_MenuItem", getSortHtmlAttributes(null, true, page, false)),
						   new PagedListRenderOptions
						   {
							   FunctionToTransformEachPageLink = (liTag, aTag) =>
							   {
								   aTag.Attributes.Add("class", "page-link");
								   liTag.InnerHtml = aTag.ToString();
								   return liTag;
							   },
							   LiElementClasses = new[] { "page-item" },
							   UlElementClasses = new[] { "pagination pagination-sm" }
						   })
				}
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Value", "Key")
							, new {@class="ignorefield", @id = "pagesizelistT_MenuItem",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_MenuItem','"
							 + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_MenuItem",
							 getSortHtmlAttributes(Model.CurrentSort, Model.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.list.TotalItemCount)</span>
							<script>
                                    $(document).ready(function () {
                                        $.validator.setDefaults({
                                            ignore: "#pagesizelistT_MenuItem"
                                        })
                                    }); 
                                </script>
                        </div>
                    </div>
                }
				</div>
				</div>
				@Html.DropDownList("EntityT_MenuItemDisplayValue", null,null, new { @Style = "display:none;" })
	@if (ViewData["HostingEntity"] == null)
	{
		<div class="modal fade" id="ShowGraphT_MenuItem" tabindex="-1" role="dialog" aria-labelledby="ShowGraphT_MenuItemLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h4 class="modal-title" id="ShowGraphT_MenuItemLabel">Dashboard Menu Item</h4>
						<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
					</div>
					 <div  class="modal-body" >
							<div id="dvShowGraphT_MenuItem" data-url="@Url.Action("ShowGraph", "T_MenuItem", new { type = "all" })">
							</div>
							<div style="clear:both"></div>
					</div>
				</div>
			</div>
		</div>
	}
</div>
 
