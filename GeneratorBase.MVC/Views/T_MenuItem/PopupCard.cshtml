@model GeneratorBase.MVC.Models.T_MenuItem
@{
	var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_MenuItem");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Menu Item";
	List<string> hiddenProperties = new List<string>();
    if (User.businessrules.Any(p => p.EntityName == "T_MenuItem" && p.ActionTypeID.Contains(6)))
    {
        hiddenProperties = Model.ApplyHiddenRule(User.businessrules, "T_MenuItem", true);
    }
	Layout = null;
}

<script>
    $(document).ready(function () {
        var IdExist = '@Model.Id';
        console.log('Id', IdExist);
      if (IdExist == 0) {
          $('#@Model.Id').removeAttr("style");
        }
    });
</script>

<div class="card card-default CardHide" id="@Model.Id" style="width: 350px; margin-bottom:0px">
	 @if (Model.Id > 0)
    {
	<div class="card-header clearfix">
        <h3 class="card-title">
			<div class="truncate">
				@if(User.CanEdit("T_MenuItem"))
                {
                   <i class="fa fa-info-circle"></i><a href = "@Url.Action("Edit", "T_MenuItem", new { id = Model.Id }, null)" onclick="event.stopImmediatePropagation();"> @EntityDisplayName > @Model.DisplayValue</a>
                }
                else if (User.CanView("T_MenuItem"))
                {
                     <i class="fa fa-info-circle"></i><a href="@Url.Action("Details", "T_MenuItem", new { id = Model.Id }, null)" onclick="event.stopImmediatePropagation();"> @EntityDisplayName > @Model.DisplayValue</a>
                }
            </div>
        </h3>
		<a href="" class="pull-right" style="margin-top:-16px"><i class="fa fa-times-circle" onclick="event.stopImmediatePropagation();ClosePopupCard(event)"></i></a>
    </div>
	  @Html.HiddenFor(model => model.Id)
	  }
	    <div class="card-body">
		   <div class="col-12" style="padding:0px;">

@if(User.CanView("T_MenuItem","T_AutoNo") && !hiddenProperties.Contains("T_AutoNo") )
{
<div class="form-group col-6 float-left">
                <label class="font-weight-bold truncate1">@Html.LabelFor(model => model.T_AutoNo)</label>
					

				                        
                            <p class="truncate1" id="lblT_AutoNo" class="viewlabel"  title="@Model.T_AutoNo">@Model.T_AutoNo</p>
                      



				 </div>
}
@if(User.CanView("T_MenuItem","T_Name") && !hiddenProperties.Contains("T_Name") )
{
<div class="form-group col-6 float-left">
                <label class="font-weight-bold truncate1">@Html.LabelFor(model => model.T_Name)</label>
					

				                        
                            <p class="truncate1" id="lblT_Name" class="viewlabel"  title="@Model.T_Name">@Model.T_Name</p>
                      



				 </div>
}
						@if(User.CanView("T_MenuItem","T_ToolTip")  && !hiddenProperties.Contains("T_ToolTip"))
						{
								  <div class="form-group col-6 float-left">
										<label class="font-weight-bold truncate1">@Html.LabelFor(model => model.T_ToolTip)</label>
										<p class="truncate1">@Model.T_ToolTip</p>
									</div>
						}
						@if(User.CanView("T_MenuItem","T_DisplayOrder") && !hiddenProperties.Contains("T_DisplayOrder") )
{
<div class="form-group col-6 float-left">
                <label class="font-weight-bold truncate1">@Html.LabelFor(model => model.T_DisplayOrder)</label>
					

				                        
                            <p class="truncate1" id="lblT_DisplayOrder" class="viewlabel"  title="@Model.T_DisplayOrder">@Model.T_DisplayOrder</p>
                      



				 </div>
}
@if(User.CanView("T_MenuItem","T_ClassIcon") && !hiddenProperties.Contains("T_ClassIcon") )
{
<div class="form-group col-6 float-left">
                <label class="font-weight-bold truncate1">@Html.LabelFor(model => model.T_ClassIcon)</label>
					

				                        
                            <p class="truncate1" id="lblT_ClassIcon" class="viewlabel"  title="@Model.T_ClassIcon">@Model.T_ClassIcon</p>
                      



				 </div>
}
	@if(User.CanView("T_MenuItem") && User.CanView("T_MenuItem","T_MenuItemMenuItemAssociationID") && !hiddenProperties.Contains("T_MenuItemMenuItemAssociationID"))
{
 <div class="form-group col-6 float-left">
		<label class="font-weight-bold truncate1">@Html.LabelFor(model => model.T_MenuItemMenuItemAssociationID)</label>
		@if (Model.T_MenuItemMenuItemAssociationID == 0 || Model.T_MenuItemMenuItemAssociationID == null || @Model.t_menuitemmenuitemassociation == null)
		{
	         <p class="truncate1" id="lblT_MenuItemMenuItemAssociationID" ></p>
        }
        else
        {
		     <p class="truncate1" id="lblT_MenuItemMenuItemAssociationID">@Model.t_menuitemmenuitemassociation.DisplayValue</p>
        }
</div>
}
@if(User.CanView("T_MenuItem","T_Entity") && !hiddenProperties.Contains("T_Entity") )
{
<div class="form-group col-6 float-left">
                <label class="font-weight-bold truncate1">@Html.LabelFor(model => model.T_Entity)</label>
					

				                        
                            <p class="truncate1" id="lblT_Entity" class="viewlabel"  title="@Model.T_Entity">@Model.T_Entity</p>
                      



				 </div>
}
@if(User.CanView("T_MenuItem","T_Action") && !hiddenProperties.Contains("T_Action") )
{
<div class="form-group col-6 float-left">
                <label class="font-weight-bold truncate1">@Html.LabelFor(model => model.T_Action)</label>
					

				                        
                            <p class="truncate1" id="lblT_Action" class="viewlabel"  title="@Model.T_Action">@Model.T_Action</p>
                      



				 </div>
}
@if(User.CanView("T_MenuItem","T_LinkAddress") && !hiddenProperties.Contains("T_LinkAddress") )
{
<div class="form-group col-6 float-left">
                <label class="font-weight-bold truncate1">@Html.LabelFor(model => model.T_LinkAddress)</label>
					

				                        
                            <p class="truncate1" id="lblT_LinkAddress" class="viewlabel"  title="@Model.T_LinkAddress">@Model.T_LinkAddress</p>
                      



				 </div>
}
		</div> <!-- /tab-content -->
	</div>
</div>
 
