@model VerbsNameIndexViewModel
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    var BackUrl = Request.Url.PathAndQuery;
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
    var viewbagname = Convert.ToString(Model.TemplatesName);
    var inlinegrid = Request.QueryString["inlinegrid"];
    var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_Roster");
    var EntityDisplayName = EntityReflector != null ? (HttpUtility.JavaScriptStringEncode(Html.DisplayName(EntityReflector.DisplayName).ToString())) : "Roster";

}
<div id="VerbsName">
    <script type="text/javascript">
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
            //PaginationClick(e,'VerbsName')
			PaginationClick(e, 'VerbsName','@User.JavaScriptEncodedName')
        })
		 $("#SearchStringVerbsName").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#VerbsNameSearch").bind("click", (function () {
                        }));
                $('#VerbsNameSearch').trigger("click");
                return false;
			}
        })
		 $('.dropdown-toggle').dropdown();
	});
	 function opendetails(url)
        {
            window.location.href=url;
        }
    </script>
    @helper PropertyHelper(string prop)
    {
        if (prop.ToString().Length >= 13 && !prop.ToString().Contains(" "))
        {
            @Html.Raw("<span class='propertycss'>" + Html.Raw(prop.ToString().Substring(0, 9) + "..") + "</span>")
        }
        else if (prop.ToString().Length >= 25)
        {
            @Html.Raw("<span>" + Html.Raw(prop.ToString().Substring(0, 22) + "...") + "</span>")
        }
        else
        {
            @Html.Raw("<span class='propertycss'>" + @prop + "</span>");
        }
    }
    @functions {
        object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
        {
            if (IsPaging)
            {
                return new
                {
                    page,
                    sortBy = Model.CurrentSort,
                    IsAsc = Model.IsAsc,
                    currentFilter = Model.currentFilter,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    HostingEntityID = ViewData["HostingEntityID"],
                    verbnameselect = Request.QueryString["verbnameselect"],
                    verbsnameverbsnametypeassociation = Request.QueryString["verbsnameverbsnametypeassociation"],
                    search = Request.QueryString["search"],
                };
            }
            else
            {
                return new
                {
                    sortBy = sortby,
                    currentFilter = Request.QueryString["currentFilter"],
                    searchString = Request.QueryString["searchString"],
                    IsAsc = (Model.IsAsc == "ASC" ? "DESC" : ""),
                    page = Model.Pages,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    verbnameselect = Request.QueryString["verbnameselect"],
                    verbsnameverbsnametypeassociation = Request.QueryString["verbsnameverbsnametypeassociation"],
                    search = Request.QueryString["search"],
                };
            }
        }
    }

    <div class="content-heading">
        <div class="TitleName float-left"><strong><a href="@Url.Action("Index")">Verbs Name</a><small>List</small></strong></div>
        <div style="position:absolute; font-size:22px; right:15px">
            <a data-toggle="collapse" id="searchAVerbsName" data-parent="#searchIconVerbsName" href="#searchIconVerbsName" class="badge badgesearch pull-right"><i class="fa fa-search"></i></a>


        </div>
    </div>

    <div id="searchIconVerbsName" class="panel-collapse collapse ">
        <div class="input-group">
            @Html.TextBox("SearchStringVerbsName", Model.currentFilter as string, null, new { @class = "search-control", @placeholder = "Search" })
            <div class="input-group-append">
                <a id="VerbsNameSearch" onclick="SearchClick(event, 'VerbsName', '@Html.Raw(Url.Action("Index", "VerbsName", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName');" class="btn btn-search"><span class="fa fa-search"></span></a>
                <button id="VerbsNameCancel" type="button" onclick="CancelSearch('VerbsName','@Html.Raw(Url.Action("Index", "VerbsName", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName')" class="btn btn-search">
                    <span class="fa fa-remove"></span>
                </button>
            </div>
        </div>
    </div>
    <div class="list-group">
        @foreach (var item in Model.list)
        {
            List<string> hiddenProperties = new List<string>();
            if (User.businessrules.Any(p => p.EntityName == "VerbsName" && p.ActionTypeID.Contains(6)))
            {
                hiddenProperties = item.ApplyHiddenRule(User.businessrules, "VerbsName");
            }
            bool isRecordReadOnly = false;
            if (User.businessrules.Any(p => p.EntityName == "VerbsName" && (p.ActionTypeID.Contains(1) || p.ActionTypeID.Contains(11))))
            {
                isRecordReadOnly = item.ApplyLockRecordRule((object)item, User, User.businessrules.Where(p => p.EntityName == "VerbsName" && (p.ActionTypeID.Contains(1) || p.ActionTypeID.Contains(11))).ToList(), "VerbsName");
            }
            if (ViewData["HostingEntity"] != null && !isRecordReadOnly)
            {
                isRecordReadOnly = item.ApplyLockRecordRule((object)ViewBag.HostingEntityIDData, User, User.businessrules.Where(p => p.EntityName == ViewData["HostingEntity"].ToString() && (p.ActionTypeID.Contains(1) || p.ActionTypeID.Contains(11))).ToList(), ViewData["HostingEntity"].ToString());
            }
            if (!isRecordReadOnly)
            {
                isRecordReadOnly = !User.CanEditItemInHierarchy("VerbsName", item, User);
            }
            <div class="list-group-item">
                <table class="list-table" width="100%">
                    <tr>
                        <td valign="top" onclick="opendetails('@Url.Action("Details", "VerbsName", new { id = item.Id, UrlReferrer = Request.Url.PathAndQuery, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)')">
                            <h4>
                                @Html.DisplayFor(modelItem => item.DisplayValue)
                            </h4>

                            @if (User.CanView("VerbsName", "VerbId"))
                            {
                                <span class="badgeListtype" @(Convert.ToString(ViewData["HostingEntity"]) == "VerbName" && Convert.ToString(ViewData["AssociatedType"]) == "VerbsNameVerbNameAssociation" ? "hidden" : "")>
                                    Verb Name:@Html.DisplayFor(modelItem => item.VerbId)
                                </span>
                            }
                        </td>
                        <td style="width:5%; vertical-align:central">
                            <div class="dropdown no-arrow">
                                <button type="button" class="btn dropdown-toggle" id="dropdownMenu2" data-toggle="dropdown" style="border:0px; background:transparent">
                                    <i class="fa fa-ellipsis-v" style="font-size:30px; color:#c9c9c9"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dropdownMenu2">
                                    <li>
                                        <a class="dropdown-item" role="menuitem" tabindex="-1" href='@Url.Action("Details", "VerbsName", new { id = item.Id, UrlReferrer = Request.Url.PathAndQuery, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)'><i class="fa fa-eye"></i> View</a>
                                    </li>
                                    <div class="dropdown-divider"></div>
                                    <li>
                                        <a class="dropdown-item" role="menuitem" tabindex="-1" href='@Url.Action("Edit", "VerbsName", new { id = item.Id, UrlReferrer = Request.Url.PathAndQuery, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)'> <i class="fa fa-edit"></i> Edit</a>
                                    </li>
                                    <div class="dropdown-divider"></div>
                                    <li>
                                        <a class="dropdown-item" role="menuitem" tabindex="-1" href='@Url.Action("Delete", "VerbsName", new { id = item.Id, UrlReferrer = Request.Url.PathAndQuery, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)'> <i class="fa fa-times-circle" style="color: #E7574B;"></i> Delete</a>
                                    </li>


                                </ul>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        }
        @if (Model.list.Count > 0)
        {
            <div id="pagination" style="margin: -15px 0px -5px 5px;">
                @Html.PagedListPager(Model.list, page => Url.Action(ActionNameUrl, "VerbsName", getSortHtmlAttributes(null, true, page, false)))
            </div>
        }
    </div>
</div>
<br />
<br />


@if (User.Identity.IsAuthenticated && User != null && User.CanAdd("VerbsName") && !(inlinegrid == "true" || inlinegrid == "True"))
{
}

<a style="display:none;" data-placement="top" id="addVerbsName" data-original-title="Quick Add" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','"+EntityDisplayName+"','dvPopup','" + Url.Action("CreateQuick", "VerbsName", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = viewbagname }) + "')")" alt="Quick Add" title="Quick Add">
    <i class="fa fa-plus-circle"></i> Quick Add
</a>





