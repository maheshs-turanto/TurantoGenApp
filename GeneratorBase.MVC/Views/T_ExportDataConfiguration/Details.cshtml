@model GeneratorBase.MVC.Models.T_ExportDataConfiguration
@using PagedList;
@{
    ViewBag.Title = "View Export Data Configuration";
    var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_ExportDataConfiguration");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Export Data Configuration";
    var modelproperties = EntityDisplayNameReflector.Properties;
    List<string> hiddenProperties = new List<string>();
    if (User.businessrules.Any(p => p.EntityName == "T_ExportDataConfiguration" && p.ActionTypeID.Contains(6)))
    {
        hiddenProperties = Model.ApplyHiddenRule(User.businessrules, "T_ExportDataConfiguration", true);
    }
    var backUrl = Request.UrlReferrer != null ? Request.UrlReferrer.PathAndQuery : "";

    string footerclassdiv1 = "card ButtonFooter";
    string footerclassdiv2 = "card-footer container-fluid";


    var NonViewableProperties = User.CanNotView("T_ExportDataConfiguration");
    var proplstgroupby = modelproperties.Where(p => p.Proptype.ToLower() == "group").GroupBy(p => p.PropText);
    List<string> groupcontaininginlinegrid = new List<string>();
    string lstHiddenGroupFLS = GeneratorBase.MVC.Models.CustomHelperMethod.HideGroupsForFLSHiddenBR(NonViewableProperties, hiddenProperties, proplstgroupby, "T_ExportDataConfiguration", User, groupcontaininginlinegrid);

    
}
<script>
    $(document).ready(function () {
			 if ($.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') != null) {
				$('a[href="#' + $.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') + '"]').click();
			 }
			 $("[inlinegrid]").each(function() {
                $(this).click();
            });
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.T_ExportDataConfigurationIsHiddenRule))
    {
        @Html.Raw(ViewBag.T_ExportDataConfigurationIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_ExportDataConfigurationIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.T_ExportDataConfigurationIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.T_ExportDataConfigurationIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.T_ExportDataConfigurationIsSetValueUIRule);
    }
}
<div>
    <style>
        .formbuttonfix {
            margin-right: 4px;
        }

        .CEntityCount {
            display: none !important;
        }
    </style>
    <div class="content-heading">
        <strong>
            <a href="@Url.Action("Index")">@EntityDisplayName</a>
            <small>
                Details - <span class="EntityDisplayName"> @Html.DisplayFor(model => model.DisplayValue)</span></span>
            </small>
        </strong>
        <div class="ml-auto">

            <ul class="dropdown-menu pull-left">
                <li>
                    @if (User.CanEdit("T_ExportDataConfiguration"))
                    {
                        <a href="@Url.Action("Edit","T_ExportDataConfiguration", new {UrlReferrer = backUrl,id = Model.Id,AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) },null)"><i class="fa fa-edit"></i>  Edit</a>
                    }
                </li>
                <li>
                    @if (User.CanDelete("T_ExportDataConfiguration"))
                    {
                        <a href="@Url.Action("Delete", "T_ExportDataConfiguration", new { UrlReferrer = backUrl,id = Model.Id, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="fa fa-remove-sign"></i>  Delete</a>
                    }
                </li>
                <li class="divider" style="clear:both"></li>
                <li class="dropdown-submenu pull-left" id="AddAssociationdropmenuT_ExportDataConfiguration">
                    @{ var dropmenu = false; }
                    <a tabindex="-1" href="#" style="margin-bottom:10px;"><i class="fam-anchor small"></i> Add</a>
                    <ul class="dropdown-menu pull-left">
                        @if (User.CanAdd("T_ExportDataDetails"))
                        {
                            dropmenu = true;
                            <li>
                                <a onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_ExportDataDetails",
						new { UrlReferrer = Request.Url.PathAndQuery,
								AssociatedType ="T_ExportDataConfigurationExportDataDetailsAssociation",
							HostingEntityName = "T_ExportDataConfiguration",
							HostingEntityID = @Convert.ToString(Model.Id) }, null) + "');")>
                                    <i class="fa fa-plus"></i>  Export Data Details
                                </a>
                            </li>
                        }
                    </ul>
                </li>
                @if (!dropmenu)
                {
                    <script>
                        $("#AddAssociationdropmenuT_ExportDataConfiguration").hide();
                    </script>
                }
            </ul>
        </div>
    </div>
</div>
<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
    <div id="errorsMsgEdit"></div>
    <div id="errorsEdit"></div>
</div>
@Html.Partial("~/Views/Shared/ErrorTemplate.cshtml")
<div class="wrapper wrapper-content animated fadeInRight ecommerce">
    <div class="tabs-container">
        <ul class="nav nav-tabs tabellipsis">
            <li class="nav-item">
                <a class="nav-link active" href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab" title="Details">Details</a>
            </li>

            @if (User.CanView("T_ExportDataDetails"))
            {
                <li class="nav-item">

                    <a class="nav-link" id="dvGroupT_ExportDataConfigurationExportDataDetailsAssociation" onclick="LoadTab('T_ExportDataConfigurationExportDataDetailsAssociation','@User.JavaScriptEncodedName@Model.Id','@Html.Raw(Url.Action("Index", "T_ExportDataDetails", new {RenderPartial=true, HostingEntity ="T_ExportDataConfiguration", HostingEntityID = @Model.Id, AssociatedType = "T_ExportDataConfigurationExportDataDetailsAssociation",TabToken = DateTime.Now.Ticks,}))')" href="#T_ExportDataConfigurationExportDataDetailsAssociation" data-toggle="tab" title="Export Data Details">
                        Export Data Details
                        <span class="badge bg-primary"><div id="dvcnt_T_ExportDataConfigurationExportDataDetailsAssociation">@ViewBag.T_ExportDataConfigurationExportDataDetailsAssociationCount</div></span>
                    </a>
                </li>
            }

            @if (User.CanView("JournalEntry"))
            {
                <li class="nav-item">
                    <a class="nav-link" onclick="LoadTab('JournalEntryToT_ExportDataConfigurationRelation','@User.JavaScriptEncodedName@Model.Id','@Url.Action("Index", "JournalEntry", new { RenderPartial = true, RelatedEntityRecords = "T_ExportDataConfiguration", HostingEntity = "T_ExportDataConfiguration", HostingEntityID = @Model.Id, AssociatedType = "JournalEntry", TabToken = DateTime.Now.Ticks })')" href="#JournalEntryToT_ExportDataConfigurationRelation" data-toggle="tab" title="Export Data Configuration Journal">Export Data Configuration Journal</a>
                </li>
            }

        </ul>
        @Html.HiddenFor(model => model.Id)
        <div class="tab-content">
            <div class="tab-pane fade show active" id="Details">
                <div class="AppForm">
                    <div class="">

                        <div class="row">
                            <div class="col-sm-12 col-md-12 col-xs-12" id="accordion">
                                <div class="card card-default" id="dvGroupT_ExportDataConfigurationBasicInformation">
                                    <div class="card-header clearfix">


                                        <h3 class="card-title">Basic Information</h3>
                                    </div>
                                    <div class="card-body row">


                                        @if (User.CanView("T_ExportDataConfiguration", "T_AutoNo") && !hiddenProperties.Contains("T_AutoNo"))
                                        {
                                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_AutoNo">
                                                <div class='form-group' title="@Model.T_AutoNo">
                                                    <label class="col-sm-5 col-md-5 float-left col-xs-12">@Html.DisplayNameFor(model => model.T_AutoNo) </label>
                                                    <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">

                                                        <p id="lblT_AutoNo" class="viewlabel">@Model.T_AutoNo</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (User.CanView("T_ExportDataConfiguration", "T_Name") && !hiddenProperties.Contains("T_Name"))
                                        {
                                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Name">
                                                <div class='form-group' title="@Model.T_Name">
                                                    <label class="col-sm-5 col-md-5 float-left col-xs-12">@Html.DisplayNameFor(model => model.T_Name) </label>
                                                    <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">

                                                        <p id="lblT_Name" class="viewlabel">@Model.T_Name</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (User.CanView("T_ExportDataConfiguration", "T_EntityName") && !hiddenProperties.Contains("T_EntityName"))
                                        {
                                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_EntityName">
                                                <div class='form-group' title="@Model.T_EntityName">
                                                    <label class="col-sm-5 col-md-5 float-left col-xs-12">@Html.DisplayNameFor(model => model.T_EntityName) </label>
                                                    <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">

                                                        <p id="lblT_EntityName" class="viewlabel">@Model.T_EntityName</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (User.CanView("T_ExportDataConfiguration", "T_AllowedRoles") && !hiddenProperties.Contains("T_AllowedRoles"))
                                        {
                                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_AllowedRoles">
                                                <div class='form-group' title="@Model.T_AllowedRoles">
                                                    <label class="col-sm-5 col-md-5 float-left col-xs-12">@Html.DisplayNameFor(model => model.T_AllowedRoles)</label>
                                                    <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">
                                                        <p class="viewlabelmultiline">@Model.T_AllowedRoles</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (User.CanView("T_ExportDataConfiguration", "T_Description") && !hiddenProperties.Contains("T_Description"))
                                        {
                                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Description">
                                                <div class='form-group' title="@Model.T_Description">
                                                    <label class="col-sm-5 col-md-5 float-left col-xs-12">@Html.DisplayNameFor(model => model.T_Description)</label>
                                                    <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">
                                                        <p class="viewlabelmultiline">@Model.T_Description</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (User.CanView("T_ExportDataConfiguration", "T_Disable") && !hiddenProperties.Contains("T_Disable"))
                                        {
                                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_Disable">
                                                <div class='form-group' title="@Model.T_Disable">
                                                    <label class="col-sm-5 col-md-5 float-left col-xs-12">@Html.DisplayNameFor(model => model.T_Disable) </label>
                                                    <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">

                                                        @Html.DisplayFor(model => model.T_Disable)
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 col-md-12 col-xs-12" id="accordion">
                                <div class="card card-default" id="dvGroupT_ExportDataConfigurationUIInformation">
                                    <div class="card-header clearfix">


                                        <h3 class="card-title">UI Information</h3>
                                    </div>
                                    <div class="card-body row">


                                        @if (User.CanView("T_ExportDataConfiguration", "T_BackGroundColor") && !hiddenProperties.Contains("T_BackGroundColor"))
                                        {
                                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_BackGroundColor">
                                                <div class='form-group' title="@Model.T_BackGroundColor">
                                                    <label class="col-sm-5 col-md-5 float-left col-xs-12">@Html.DisplayNameFor(model => model.T_BackGroundColor) </label>
                                                    <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">

                                                        <p id="lblT_BackGroundColor" class="viewlabel">@Model.T_BackGroundColor</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (User.CanView("T_ExportDataConfiguration", "T_FontColor") && !hiddenProperties.Contains("T_FontColor"))
                                        {
                                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_FontColor">
                                                <div class='form-group' title="@Model.T_FontColor">
                                                    <label class="col-sm-5 col-md-5 float-left col-xs-12">@Html.DisplayNameFor(model => model.T_FontColor) </label>
                                                    <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">

                                                        <p id="lblT_FontColor" class="viewlabel">@Model.T_FontColor</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (User.CanView("T_ExportDataConfiguration", "T_ToolTip") && !hiddenProperties.Contains("T_ToolTip"))
                                        {
                                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvT_ToolTip">
                                                <div class='form-group' title="@Model.T_ToolTip">
                                                    <label class="col-sm-5 col-md-5 float-left col-xs-12">@Html.DisplayNameFor(model => model.T_ToolTip)</label>
                                                    <div class="input-group col-sm-7 col-md-7 float-left col-xs-12">
                                                        <p class="viewlabelmultiline">@Model.T_ToolTip</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="@footerclassdiv1">
                    <div class="@footerclassdiv2">
                        <a class="btn btn-white btn-sm pull-left formbuttonfix" Onclick="goBack('@Url.Action("Index","T_ExportDataConfiguration")');">Back</a>
                        @*@Html.ActionLink("Back", "Cancel", new { UrlReferrer = backUrl }, new { @class = "btn btn-white btn-sm pull-left formbuttonfix" })*@
                        @if (User.CanEdit("T_ExportDataConfiguration"))
                        {
                            @Html.ActionLink("Edit", "Edit", new { UrlReferrer = backUrl, id = Model.Id, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, new { @class = "btn btn-primary btn-sm pull-left formbuttonfix" })
                        }
                        @foreach (var item in (List<GeneratorBase.MVC.Models.T_DocumentTemplate>)ViewBag.DocumentTemplates)
                        {
                            if (item.T_DisplayType == "Button")
                            {
                                var isdownload = item.T_EnableDownload.HasValue ? item.T_EnableDownload.Value : false;
                                var ispreview = item.T_EnablePreview.HasValue ? item.T_EnablePreview.Value : false;
                                if (ispreview)
                                {
                                    <a class="btn btn-primary btn-sm pull-left formbuttonfix" style="fore-color:@item.T_FontColor!important;background-color:@item.T_BackGroundColor!important;" data-placement="top" data-original-title="@item.T_Name" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntityBR('addPopup','"+Model.DisplayValue+"','dvPopup','" + Url.Action("ViewPDF", "T_ExportDataConfiguration", new { id=Model.Id, DocumentId=item.T_Document, documentName=item.T_Name, outputFormat=item.T_DefaultOutputFormat, isdownload=false, ispreview=true }) + "')")" alt="@item.T_Name" title="@item.T_Name">
                                        <i class="fa fa-file-pdf"></i> @item.T_Name
                                    </a>
                                }
                                else
                                {

                                    <a class="btn btn-primary btn-sm pull-left formbuttonfix" style="fore-color:@item.T_FontColor!important;background-color:@item.T_BackGroundColor!important;" id="vrb1_@string.Join("", item.T_Name.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries))" onclick="GenerateDocumentFromButton(this,'@isdownload');" dataurl="@Url.Action("GenerateDocument", "T_ExportDataConfiguration", new { id = Model.Id, DocumentId = item.T_Document, documentName = item.T_Name, outputFormat = item.T_DefaultOutputFormat, isdownload = isdownload, ispreview = ispreview }, null)"> @item.T_Name</a>
                                }
                            }
                        }
                        @if (((List<GeneratorBase.MVC.Models.T_DocumentTemplate>)ViewBag.DocumentTemplates).Where(p => p.T_DisplayType == "CheckBox").Count() > 0)
                        {
                            <div class="modal fade" id="addGenerateDocument" tabindex="-1" role="dialog" aria-labelledby="addGenerateDocumentLabel" aria-hidden="true" data-keyboard="false" data-backdrop="static">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h4 class="modal-title" id="addGenerateDocumentLabel">Generate Document</h4>
                                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true" onclick="cancelQuickAdd();">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="row col-md-12 col-sm-12 col-xs-12" id="dvGroupGenerateDocument">
                                                @foreach (var item in ((List<GeneratorBase.MVC.Models.T_DocumentTemplate>)ViewBag.DocumentTemplates).Where(p => p.T_DisplayType == "CheckBox"))
                                                {
                                                    var isdownload = item.T_EnableDownload.HasValue ? item.T_EnableDownload.Value : false;
                                                    <div class="col-sm-4">
                                                        <input type="checkbox" verbName="_@string.Join("", item.T_Name.Split(default(string[]), StringSplitOptions.RemoveEmptyEntries))" name="SelectedGenerateDocumentTemplate" @(isdownload ? "download=true" : "download:false") dataurl='@Url.Action("GenerateDocument", "T_ExportDataConfiguration", new { id = Model.Id, DocumentId = item.T_Document, documentName = item.T_Name, outputFormat = item.T_DefaultOutputFormat, isdownload = item.T_EnableDownload.HasValue ? item.T_EnableDownload.Value : false }, null)' /> @item.T_Name
                                                    </div>
                                                }
                                            </div>
                                            <div class="card-body row pull-right">
                                                <label id="lblGenerateDocument" class="text-primary"></label>
                                                <button type="button" data-dismiss="modal" aria-hidden="true" class="btn btn-default btn-sm" onclick="cancelQuickAdd();">Close</button>
                                                <a class="btn btn-primary btn-sm pull-right" style="margin-left:5px;" onclick="GenerateDocument(this,'dvGroupGenerateDocument','default');"> Generate</a>
                                                <a class="btn btn-primary btn-sm pull-right" style="margin-left:5px;" onclick="GenerateDocument(this,'dvGroupGenerateDocument','pdf');"> Generate (PDF)</a>
                                            </div>
                                        </div>

                                        <div style="clear:both"></div>
                                    </div>
                                </div>
                            </div>
                            <a class="btn btn-primary btn-sm pull-left formbuttonfix" id="vrb1GenerateDocument" data-original-title="Generate Document" data-toggle="modal" data-target="#addGenerateDocument"> Generate Document</a>
                        }


                        @{List<string> hiddenVerb = new List<string>(); var Verblist = "";
                            if (User.businessrules.Any(p => p.EntityName == "T_ExportDataConfiguration" && p.ActionTypeID.Contains(16)))
                            {
                                hiddenVerb = Model.ApplyHiddenVerbRule(User.businessrules, "T_ExportDataConfiguration");
                                Verblist = string.Join(",", hiddenVerb.ToList());
                            }
                            if (User.businessrules.Any(p => p.EntityName == "T_ExportDataConfiguration" && p.ActionTypeID.Contains(16)))
                            {
                                <script>HideVerbFromBR('@Verblist');</script>
                            }
                        }

                        @{ var dropmenubottom = false; }
                        <div class="dropdown pull-left formbuttonfix" style="" id="AddAssociationdropmenubottomT_ExportDataConfiguration">
                            <button type="button" class="btn btn-primary btn-sm dropdown-toggle" id="dropdownMenu1" data-toggle="dropdown">
                                Add
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                                @if (User.CanAdd("T_ExportDataDetails"))
                                {
                                    dropmenubottom = true;
                                    <li>
                                        <a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_ExportDataDetails",
						new { UrlReferrer = Request.Url.PathAndQuery,
								AssociatedType ="T_ExportDataConfigurationExportDataDetailsAssociation",
						HostingEntityName = "T_ExportDataConfiguration",
                              HostingEntityID = @Convert.ToString(Model.Id)
                        }, null) + "');")>
                                            Add  Export Data Details
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                        @if (!dropmenubottom)
                        {
                            <script>
                                $("#AddAssociationdropmenubottomT_ExportDataConfiguration").hide();
                            </script>
                        }
                    </div>
                </div><div class="clearfix" style="clear:both"></div>
            </div>
            <div class="tab-pane fade in" id="JournalEntryToT_ExportDataConfigurationRelation">
            </div>
            <div class="tab-pane fade in" id="T_ExportDataConfigurationExportDataDetailsAssociation">
            </div>
        </div> <!-- /tab-content -->
    </div>
</div>
@{
    if (ViewData["VerbHiddenForDetails"] != null)
    {
        foreach (var verb in ViewData["VerbHiddenForDetails"] as Dictionary<string, string>)
        {
            <script>
			$("#vrb" + '@verb.Value').remove();
			$("#vrb1" + '@verb.Value').remove();
            </script>

        }
    }
}
@if (ViewData["LockRecordMsg"] != null)
{

    var htmlstr = Convert.ToString(ViewData["LockRecordMsg"]);
    <script>
        $(document).ready(function () {
        debugger;
            var failuremsg = '@htmlstr';
            $("#divDisplayLockRecord").removeAttr("style");
            $("#divDisplayLockRecord").html(getMsgTableLockBR());
            $("#ErrmsgLockRecord").html(failuremsg.replace(/,\s*$/, ""));
            $("#divDisplayLockRecord1").html($("#divDisplayLockRecord").html());
    });
    </script>
}
<script type='text/javascript'>
    $(document).ready(function ()
    {
		ShowHelpIcon(@Html.Raw("'"+Url.Action("ShowHelpIcon", "PropertyHelpPage")+"'"),'T_ExportDataConfiguration','details',false,'Export Data Configuration')
        //instruction feature
         ShowInstructionLabel(@Html.Raw("'"+Url.Action("ShowInstructionLabel", "PropertyHelpPage")+"'"),'T_ExportDataConfiguration','edit',false,'Export Data Configuration')
		 var arrgroup = '@lstHiddenGroupFLS'.split(',');
            $.each( arrgroup, function( index, value ){
                $("#"+value).hide();
            });
    });
</script>


