@model GeneratorBase.MVC.Models.PropertyValidationandFormat
@{
    if (ViewBag.IsPartial == true)
    {
        <link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
        <link href="@Url.Content("~/Content/chosen.css")" rel="stylesheet" type="text/css" />
        <script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>
        <script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>
        <script type="text/javascript">
            var config = {
                '.chosen-select': {},
                '.chosen-select-deselect': { allow_single_deselect: true },
                '.chosen-select-no-single': { disable_search_threshold: 10 },
                '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                '.chosen-select-width': { width: "95%" }
            }
            for (var selector in config) {
                $(selector).chosen(config[selector]);
            }
        </script>
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.PropertyValidationandFormatIsHiddenRule))
    {
        @Html.Raw(ViewBag.PropertyValidationandFormatIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.PropertyValidationandFormatIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.PropertyValidationandFormatIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.PropertyValidationandFormatIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.PropertyValidationandFormatIsSetValueUIRule);
    }
}
<script>
    $(document).ready(function () {
        $('#EntityName').change(function () {
            var SelectedText = $('#EntityName :selected').val();
            if (SelectedText.length == 0) {
                window.location.reload();
                return false;
            }
            $('#EntityName').val(SelectedText);

            $.ajax({
                url: '@Url.Action("GetPropertiesofEntity")' + '?Entity=' + SelectedText,
                type: "GET",
                cache: false,
                async: false,
                success: function (result) {
                    var optionDOM = '<option value="SelectProperty">--Select Property--</option>';
                    for (i = 0; i < result.length; i++) {
                        optionDOM += '<option datatype="' + result[i].DataType + '" value="' + result[i].Name + '">' + result[i].DisplayName + '</option>';
                    }
                    $("#" + "PropertyName").html(optionDOM);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                }
            })

        });
        $('#PropertyName').change(function () {
            var SelectedText = $('#EntityName :selected').val();
            var SelectedTextProperty = $('#PropertyName :selected').val();
            $("#dvRegExPattern").hide();
            $("#dvMaskPattern").hide();
            $("#dvErrorMessage").hide();
            $("#dvDisplayFormat").hide();
            //$("#dvOther1").hide();
            $.ajax({
                url: '@Url.Action("GetRegExofProperty")' + '?Entity=' + SelectedText+'&Property='+SelectedTextProperty,
                type: "GET",
                cache: false,
                async: false,
                success: function (result) {
                    $("#RegExPattern").val(result.regex);
                    $("#MaskPattern").val(result.mask);
                    if(result.regex.length > 0)
                    {
                        $("#dvRegExPattern").show();
                        $("#dvMaskPattern").show();
                        $("#dvErrorMessage").show();
                    }
                    $("#DisplayFormat").val(result.displayformat);
                    //$("#Other1").val(result.uidisplayformat);
                    if(result.displayformat.length > 0)
                    {
                        $("#dvDisplayFormat").show();
                        //$("#dvOther1").show();
                    }
                    $("#ErrorMessage").val("Invalid " + $('#PropertyName :selected').text());
                },
                error: function (jqXHR, textStatus, errorThrown) {
                }
            })
        });
    });
</script>
@using (Html.BeginForm("Create", "PropertyValidationandFormat", new { UrlReferrer = Convert.ToString(ViewData["PropertyValidationandFormatParentUrl"]), IsDDAdd = ViewBag.IsDDAdd }, FormMethod.Post, new { enctype = "multipart/form-data", id = "frmPropertyValidationandFormat" }))
{
    @Html.AntiForgeryToken();
                            Html.ValidationSummary(true);
                            Html.EnableClientValidation();
                            <input type="hidden" id="ErrMsg" />
                            @*<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>*@
                            <div id="errorContainer" style="display: none">
                                <div id="errorsMsg"></div>
                                <div id="errors"></div>
                            </div>
                            <div id="divDisplayThresholdLimit" style="display:none;">
                            </div>
                            <div id="divDisplayBRmsgMandatory" style="display:none;">
                            </div>
                            <div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
                            </div>
                            <div id="divDisplayCodeFragment" style="display:none;">
                            </div>
                            <div class="row">
                                <div class="col-md-12 col-sm-12 col-xs-12">
                                    <div class="AppForm">
                                        <div class="">
                                            <div class="row">
                                                @Html.Hidden("AssociatedEntity", Convert.ToString(ViewData["AssociatedType"]))
                                                @Html.Hidden("HostingEntityName", Convert.ToString(ViewData["HostingEntityName"]))
                                                @Html.Hidden("HostingEntityID", Convert.ToString(ViewData["HostingEntityID"]))
                                                <div class="col-md-12 col-sm-12 col-xs-12">
                                                    <div class="panel panel-default AppForm">
                                                        <div class="panel-body">
                                                            <div class="row">

                                                                @if (User.CanView("PropertyValidationandFormat", "EntityName"))
                                                                {

                                                                    <div class='col-sm-6' id="dvEntityName">
                                                                        <div class='form-group' title="Entity Name">
                                                                            <label>@Html.LabelFor(model => model.EntityName) <span class="text-danger-reg">*</span></label>
                                                                            @Html.DropDownList("EntityName", null, "-- Select --", new { @required = "required", @class = "form-control" })
                                                                            @*@Html.TextBoxFor(model => model.EntityName, new { @class = "form-control" })*@
                                                                            @Html.ValidationMessageFor(model => model.EntityName)

                                                                        </div>
                                                                    </div>
                                                                }
                                                                @if (User.CanView("PropertyValidationandFormat", "PropertyName"))
                                                                {
                                                                    <div class='col-sm-6' id="dvPropertyName">
                                                                        <div class='form-group' title="Property Name">
                                                                            <label>@Html.LabelFor(model => model.PropertyName) <span class="text-danger-reg">*</span></label>
                                                                            @Html.DropDownList("PropertyName", null, "-- Select --", new { @required = "required", @class = "form-control" })
                                                                            @*@Html.TextBoxFor(model => model.PropertyName, new { @class = "form-control" })*@
                                                                            @Html.ValidationMessageFor(model => model.PropertyName)

                                                                        </div>
                                                                    </div>
                                                                }
                                                                @if (User.CanView("PropertyValidationandFormat", "RegExPattern"))
                                                                {
                                                                    <div class='col-sm-6' id="dvRegExPattern">
                                                                        <div class='form-group' title="RegEx Pattern">
                                                                            <label>@Html.LabelFor(model => model.RegExPattern) </label>

                                                                            @Html.TextBoxFor(model => model.RegExPattern, new { @class = "form-control" })
                                                                            @Html.ValidationMessageFor(model => model.RegExPattern)

                                                                        </div>
                                                                    </div>
                                                                }
                                                                @if (User.CanView("PropertyValidationandFormat", "MaskPattern"))
                                                                {
                                                                    <div class='col-sm-6' id="dvMaskPattern">
                                                                        <div class='form-group' title="Mask Pattern">
                                                                            <label>@Html.LabelFor(model => model.MaskPattern) </label>

                                                                            @Html.TextBoxFor(model => model.MaskPattern, new { @class = "form-control" })
                                                                            @Html.ValidationMessageFor(model => model.MaskPattern)

                                                                        </div>
                                                                    </div>
                                                                }
                                                                @if (User.CanView("PropertyValidationandFormat", "ErrorMessage"))
                                                                {
                                                                    <div class='col-sm-6' id="dvErrorMessage">
                                                                        <div class='form-group' title="Error Message">
                                                                            <label>@Html.LabelFor(model => model.ErrorMessage) </label>

                                                                            @Html.TextBoxFor(model => model.ErrorMessage, new { @class = "form-control" })
                                                                            @Html.ValidationMessageFor(model => model.ErrorMessage)

                                                                        </div>
                                                                    </div>
                                                                }
                                                                @*@if (User.CanView("PropertyValidationandFormat", "LowerBound"))
                                                                    {
                                                                        <div class='col-sm-6' id="dvLowerBound">
                                                                            <div class='form-group' title="Lower Bound">
                                                                                <label>@Html.LabelFor(model => model.LowerBound) </label>

                                                                                @Html.TextBoxFor(model => model.LowerBound, new { @class = "form-control" })
                                                                                @Html.ValidationMessageFor(model => model.LowerBound)

                                                                            </div>
                                                                        </div>
                                                                    }
                                                                    @if (User.CanView("PropertyValidationandFormat", "UpperBound"))
                                                                    {
                                                                        <div class='col-sm-6' id="dvUpperBound">
                                                                            <div class='form-group' title="Upper Bound">
                                                                                <label>@Html.LabelFor(model => model.UpperBound) </label>

                                                                                @Html.TextBoxFor(model => model.UpperBound, new { @class = "form-control" })
                                                                                @Html.ValidationMessageFor(model => model.UpperBound)

                                                                            </div>
                                                                        </div>
                                                                    }*@
                                                                @if (User.CanView("PropertyValidationandFormat", "DisplayFormat"))
                                                                {
                                                                    <div class='col-sm-6' id="dvDisplayFormat">
                                                                        <div class='form-group' title="Display Format">
                                                                            <label>@Html.LabelFor(model => model.DisplayFormat) </label>

                                                                            @Html.TextBoxFor(model => model.DisplayFormat, new { @class = "form-control" })
                                                                            @Html.ValidationMessageFor(model => model.DisplayFormat)

                                                                        </div>
                                                                    </div>
                                                                }

                                                                @*@if (User.CanView("PropertyValidationandFormat", "Other1"))
                                                                    {
                                                                        <div class='col-sm-6' id="dvOther1">
                                                                            <div class='form-group' title="Display Format">
                                                                                <label>@Html.LabelFor(model => model.Other1) </label>

                                                                                @Html.TextBoxFor(model => model.Other1, new { @class = "form-control" })
                                                                                @Html.ValidationMessageFor(model => model.Other1)

                                                                            </div>
                                                                        </div>
                                                                    }*@
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="divDisplayThresholdLimit1">
                            </div>
                            <div id="divDisplayBRmsgMandatory1">
                            </div>
                            <div id="divDisplayBRmsgBeforeSaveProp1">
                            </div>
                            <div id="divDisplayCodeFragment1">
                            </div>
    if (ViewBag.IsPartial == null)
    {
        <a class="btn btn-default btn-sm" onclick="goBack('@Url.Action("Index","PropertyValidationandFormat")');" alt="Cancel" title="Cancel">Cancel</a>
    }
    if (ViewBag.IsPartial == null)
    {
        <input type="submit" name="command" value="Create" class="btn btn-primary btn-sm" alt="Create" title="Create" />
    }
    if (ViewBag.IsPartial == null)
    {
        if (ViewBag.IsDDAdd == null && User.CanEdit("PropertyValidationandFormat"))
        {
            <input type="submit" name="command" value="Create & Continue" class="btn btn-primary btn-sm" alt="Create & Continue" title="Create & Continue" />
            <input type="submit" name="command" value="Create & Add another" class="btn btn-primary btn-sm" alt="Create & Add another" title="Create & Add another" />
        }
    }
    <input type="hidden" name="hdncommand" value="" />
    
}
<script>
    $(function () {
        ApplyAreYouSure();
    });
</script>
@{
    var businessrule = User.businessrules.Where(p => p.EntityName == "PropertyValidationandFormat").ToList();
    if ((businessrule != null && businessrule.Count > 0))
    {
        <script>
            $("form").submit(function (event) {
                //if (!$("#frmPropertyValidationandFormat").valid()) return;
                var flag = true;
                document.getElementById("ErrMsg").innerHTML = "";
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
                //var form = $(this).serialize();
                form = $("#frmPropertyValidationandFormat").serialize();

                dataurl = "@Url.Action("businessruletype", "PropertyValidationandFormat", new { ruleType = "OnCreate"})";
                flag = ApplyBusinessRuleOnSubmit(dataurl, "PropertyValidationandFormat", false, "ErrMsg", form);
                //business rules on inline associations
                if (flag) {
                    $('input:hidden[name="hdncommand"]').val($(document.activeElement).val());
                    $("#frmPropertyValidationandFormat").find(':input').removeAttr('disabled');
                }
                else
                    $("html, body").animate({ scrollTop: 0 }, "fast");
                return flag;
            });
        </script>
    }
    else
    {
        <script>
            $("input[type='submit']").click(function (event) {
                if (!$("#frmPropertyValidationandFormat").valid()) return;
                var $this = $(this);
                $('input:hidden[name="hdncommand"]').val($this.val());
            });
        </script>

    }
}

<script type='text/javascript'>
    $(document).ready(function () {
        try {
            focusOnControl('frmPropertyValidationandFormat');
        }
        catch (ex) { }
        ShowHelpIcon(@Html.Raw("'"+Url.Action("ShowHelpIcon", "PropertyHelpPage")+"'"),'PropertyValidationandFormat','create',false,'Property Validation and Format')
    });
</script>
<script>
    $(document).ready(function () {
        try {
            LockHostDropdownOnCreate('@Convert.ToString(ViewData["AssociatedType"])');
        }
        catch (ex) { }
    });
</script>
<div class="panel-body panel-collapse">
    <a class="accordion-toggle collapsed" data-toggle="collapse" href="#Des_Table">
        <span class="glyphicon glyphicon-chevron-down"></span> Help - Date Time Format
    </a>
    <div id="Des_Table" class="table-responsive collapse" style="overflow-x:auto;">
        <table class="table table-hover table-striped default-bordered default-condensed">
            <thead>
                <tr>
                    <th>
                        Format
                    </th>
                    <th>
                        Result
                    </th>
                </tr>
                <tr> <td>{0:MM/dd/yyyy} </td><td>	05/29/2015 </td></tr>
                <tr> <td>{0:dd/MM/yyyy} </td><td>	29/05/2015 </td></tr>
                <tr> <td>{0:dd/MMM/yyyy} </td><td>	29/May/2015 </td></tr>
                <tr> <td>{0:dd-MMM-yyyy} </td><td>	29-May-2015 </td></tr>
                <tr> <td>{0:dddd, dd MMMM yyyy} </td><td>	Friday, 29 May 2015 </td></tr>
                <tr> <td>{0:dddd, dd MMMM yyyy HH:mm} </td><td>	Friday, 29 May 2015 05:50 </td></tr>
                <tr> <td>{0:dddd, dd MMMM yyyy hh:mm tt} </td><td>	Friday, 29 May 2015 05:50 AM </td></tr>
                <tr> <td>{0:dddd, dd MMMM yyyy H:mm} </td><td>	Friday, 29 May 2015 5:50 </td></tr>
                <tr> <td>{0:dddd, dd MMMM yyyy h:mm tt} </td><td>	Friday, 29 May 2015 5:50 AM </td></tr>
                <tr> <td>{0:dddd, dd MMMM yyyy HH:mm:ss} </td><td>	Friday, 29 May 2015 05:50:06 </td></tr>
                <tr> <td>{0:MM/dd/yyyy HH:mm} </td><td>	5/29/2015 5:50 </td></tr>
                <tr> <td>{0:MM/dd/yyyy hh:mm tt} </td><td>	5/29/2015 5:50 AM</td></tr>
                <tr> <td>{0:MM/dd/yyyy H:mm} </td><td>	5/29/2015 5:50 </td></tr>
                <tr> <td>{0:MM/dd/yyyy h:mm tt} </td><td>	5/29/2015 5:50 AM</td></tr>
                <tr> <td>{0:MM/dd/yyyy HH:mm:ss} </td><td>	5/29/2015 5:50:06 </td></tr>
                <tr> <td>{0:MMMM dd} </td><td>	May 29 </td></tr>
                <tr> <td>{0:HH:mm} </td><td>	5:50 </td></tr>
                <tr> <td>{0:hh:mm tt} </td><td>	5:50 AM </td></tr>
                <tr> <td>{0:H:mm} </td><td>	5:50 </td></tr>
                <tr> <td>{0:h:mm tt} </td><td>	5:50 AM </td></tr>
                <tr> <td>{0:HH:mm:ss} </td><td>	5:50:06 </td></tr>
                <tr> <td>{0:yyyy MMMM} </td><td>	2015 May </td></tr>

        </table>
    </div>
</div>



