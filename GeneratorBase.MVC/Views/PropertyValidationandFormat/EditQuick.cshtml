@model GeneratorBase.MVC.Models.PropertyValidationandFormat
@using PagedList;
@{
    ViewBag.Title = "Edit Property Validation and Format";
    var EditPermission = User.CanEditItem("PropertyValidationandFormat", Model, User);
    var DeletePermission = User.CanDeleteItem("PropertyValidationandFormat", Model, User);
    Layout = null;
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("PropertyValidationandFormat", Property))
        {
            return new { @class = "form-control" };
        } return new { @class = "form-control", @readonly = "readonly" };
    }
}
<script>
    $(document).ready(function () {
        $("#dvRegExPattern").hide();
        $("#dvMaskPattern").hide();
        $("#dvErrorMessage").hide();
        $("#dvDisplayFormat").hide();
        //$("#dvOther1").hide();
        if ('@Model.RegExPattern'.length > 0) {
            $("#dvRegExPattern").show();
            $("#dvMaskPattern").show();
            $("#dvErrorMessage").show();
        }
        if ('@Model.DisplayFormat'.length > 0) {
            $("#dvDisplayFormat").show();
            //$("#dvOther1").show();
        }
        $('#EntityName').change(function () {
            var SelectedText = $('#EntityName :selected').val();
            if (SelectedText.length == 0) {
                window.location.reload();
                return false;
            }
            $('#EntityName').val(SelectedText);
            $.ajax({
                url: '@Url.Action("GetPropertiesofEntity")' + '?Entity=' + SelectedText,
                type: "GET",
                cache: false,
                async: false,
                success: function (result) {
                    var optionDOM = '<option value="SelectProperty">--Select Property--</option>';
                    for (i = 0; i < result.length; i++) {
                        optionDOM += '<option datatype="' + result[i].DataType + '" value="' + result[i].Name + '">' + result[i].DisplayName + '</option>';
                    }
                    $("#" + "PropertyName").html(optionDOM);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                }
            })
        });
        $('#PropertyName').change(function () {
            var SelectedText = $('#EntityName :selected').val();
            var SelectedTextProperty = $('#PropertyName :selected').val();
            $("#dvRegExPattern").hide();
            $("#dvMaskPattern").hide();
            $("#dvErrorMessage").hide();
            $("#dvDisplayFormat").hide();
            //$("#dvOther1").hide();
            $.ajax({
                url: '@Url.Action("GetRegExofProperty")' + '?Entity=' + SelectedText + '&Property=' + SelectedTextProperty,
                type: "GET",
                cache: false,
                async: false,
                success: function (result) {
                    $("#RegExPattern").val(result.regex);
                    $("#MaskPattern").val(result.mask);
                    if (result.regex.length > 0) {
                        $("#dvRegExPattern").show();
                        $("#dvMaskPattern").show();
                        $("#dvErrorMessage").show();
                    }
                    $("#DisplayFormat").val(result.displayformat);
                    //$("#Other1").val(result.uidisplayformat);
                    if (result.displayformat.length > 0) {
                        $("#dvDisplayFormat").show();
                        //$("#dvOther1").show();
                    }
                    $("#ErrorMessage").val("Invalid " + $('#PropertyName :selected').text());
                },
                error: function (jqXHR, textStatus, errorThrown) {
                }
            })
        });
    });
</script>
<script type="text/javascript">
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }
    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }
</script>
<script>
$(document).ready(function () {
    $('#EntityName').change(function () {
        var SelectedText = $('#EntityName :selected').val();
        if (SelectedText.length == 0) {
            window.location.reload();
            return false;
        }
        $('#EntityName').val(SelectedText);
        $.ajax({
            url: '@Url.Action("GetPropertiesofEntity")' + '?Entity=' + SelectedText,
            type: "GET",
            cache: false,
            async: false,
            success: function (result) {
                var optionDOM = '<option value="SelectProperty">--Select Property--</option>';
                for (i = 0; i < result.length; i++) {
                    optionDOM += '<option datatype="' + result[i].DataType + '" value="' + result[i].Name + '">' + result[i].DisplayName + '</option>';
                }
                $("#" + "PropertyName").html(optionDOM);
            },
            error: function (jqXHR, textStatus, errorThrown) {
            }
        })
    });
    $('#PropertyName').change(function () {
        var SelectedText = $('#EntityName :selected').val();
        var SelectedTextProperty = $('#PropertyName :selected').val();
        $.ajax({
            url: '@Url.Action("GetRegExofProperty")' + '?Entity=' + SelectedText + '&Property=' + SelectedTextProperty,
            type: "GET",
            cache: false,
            async: false,
            success: function (result) {
                $("#RegExPattern").val(result.regex);
                $("#MaskPattern").val(result.mask);
                $("#DisplayFormat").val(result.displayformat);
                $("#Other1").val(result.uidisplayformat);
                $("#ErrorMessage").val("Invalid " + $('#PropertyName :selected').text());
            },
            error: function (jqXHR, textStatus, errorThrown) {
            }
        })
    });
});
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.PropertyValidationandFormatIsHiddenRule))
    {
        @Html.Raw(ViewBag.PropertyValidationandFormatIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.PropertyValidationandFormatIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.PropertyValidationandFormatIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.PropertyValidationandFormatIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.PropertyValidationandFormatIsSetValueUIRule);
    }
}
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
<div class="">
    <div class="">
        @*<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>*@
        <input type="hidden" id="ErrMsg" />
        <div id="errorContainerEdit" style="display: none">
            <div id="errorsMsgEdit"></div>
            <div id="errorsEdit"></div>
        </div>
        <div class="" >
            <h6 class="text-primary">
                <span id="HostingEntityDisplayValue">@Html.DisplayFor(model => model.DisplayValue)</span>
            </h6>
        </div>

    </div>
    <!-- /.col-lg-12 -->
    <div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
    </div>
    <div id="divDisplayBRmsgMandatory" style="display:none;">
    </div>
    <div id="divDisplayLockRecord" style="display:none;">
    </div>
    <div id="divDisplayBRReadOnly" style="display:none;">
    </div>
    <br />
</div>
@using (Html.BeginForm("EditQuick", "PropertyValidationandFormat", new { UrlReferrer = Convert.ToString(ViewData["PropertyValidationandFormatParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data", @id = "frmQEditPropertyValidationandFormat" }))
{
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.ConcurrencyKey)
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="card card-default AppForm">
                <div class="card-body">
                    @Html.Hidden("AssociatedEntity", Convert.ToString(ViewData["AssociatedType"]))
                    <div class="row">
                        @if (User.CanView("PropertyValidationandFormat", "EntityName"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvEntityName">
                                <div class='form-group' title="Entity Name">
                                    <label>@Html.LabelFor(model => model.EntityName)  <span class="text-danger-reg">*</span> </label>
                                     @Html.DropDownList("EntityName", null, "-- Select --", new { @required = "required", @class = "form-control" })
                                    @*@Html.TextBoxFor(model => model.EntityName, getHtmlAttributes("EntityName"))*@
                                    @Html.ValidationMessageFor(model => model.EntityName)
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.EntityName, new { @class = "form-control" })}
                        @if (User.CanView("PropertyValidationandFormat", "PropertyName"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvPropertyName">
                                <div class='form-group' title="Property Name">
                                    <label>@Html.LabelFor(model => model.PropertyName)  <span class="text-danger-reg">*</span> </label>
                                    @Html.DropDownList("PropertyName", null, "-- Select --", new { @required = "required", @class = "form-control" })
                                    @*@Html.TextBoxFor(model => model.PropertyName, getHtmlAttributes("PropertyName"))*@
                                    @Html.ValidationMessageFor(model => model.PropertyName)


                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.PropertyName, new { @class = "form-control" })}
                        @if (User.CanView("PropertyValidationandFormat", "RegExPattern"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvRegExPattern">
                                <div class='form-group' title="RegEx Pattern">
                                    <label>@Html.LabelFor(model => model.RegExPattern)   </label>


                                    @Html.TextBoxFor(model => model.RegExPattern, getHtmlAttributes("RegExPattern"))
                                    @Html.ValidationMessageFor(model => model.RegExPattern)


                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.RegExPattern, new { @class = "form-control" })}
                        @if (User.CanView("PropertyValidationandFormat", "MaskPattern"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvMaskPattern">
                                <div class='form-group' title="Mask Pattern">
                                    <label>@Html.LabelFor(model => model.MaskPattern)   </label>


                                    @Html.TextBoxFor(model => model.MaskPattern, getHtmlAttributes("MaskPattern"))
                                    @Html.ValidationMessageFor(model => model.MaskPattern)


                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.MaskPattern, new { @class = "form-control" })}
                        @if (User.CanView("PropertyValidationandFormat", "ErrorMessage"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvErrorMessage">
                                <div class='form-group' title="Error Message">
                                    <label>@Html.LabelFor(model => model.ErrorMessage)   </label>


                                    @Html.TextBoxFor(model => model.ErrorMessage, getHtmlAttributes("ErrorMessage"))
                                    @Html.ValidationMessageFor(model => model.ErrorMessage)


                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.ErrorMessage, new { @class = "form-control" })}
                        @*@if (User.CanView("PropertyValidationandFormat", "LowerBound"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvLowerBound">
                                <div class='form-group' title="Lower Bound">
                                    <label>@Html.LabelFor(model => model.LowerBound)   </label>


                                    @Html.TextBoxFor(model => model.LowerBound, getHtmlAttributes("LowerBound"))
                                    @Html.ValidationMessageFor(model => model.LowerBound)


                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.LowerBound, new { @class = "form-control" })}
                        @if (User.CanView("PropertyValidationandFormat", "UpperBound"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvUpperBound">
                                <div class='form-group' title="Upper Bound">
                                    <label>@Html.LabelFor(model => model.UpperBound)   </label>


                                    @Html.TextBoxFor(model => model.UpperBound, getHtmlAttributes("UpperBound"))
                                    @Html.ValidationMessageFor(model => model.UpperBound)


                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.UpperBound, new { @class = "form-control" })}*@
                        @if (User.CanView("PropertyValidationandFormat", "DisplayFormat"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvDisplayFormat">
                                <div class='form-group' title="Display Format">
                                    <label>@Html.LabelFor(model => model.DisplayFormat)   </label>
                                    @Html.TextBoxFor(model => model.DisplayFormat, getHtmlAttributes("DisplayFormat"))
                                    @Html.ValidationMessageFor(model => model.DisplayFormat)
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.DisplayFormat, new { @class = "form-control" })}
                        @if (User.CanView("PropertyValidationandFormat", "IsEnabled"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvIsEnabled">
                                <div class="form-group" title="Is Enabled">
                                    <label class="col-sm-5 col-md-5 col-xs-12">
                                        @Html.LabelFor(model => model.IsEnabled)
                                    </label>
                                    <div class="input-group col-sm-7 col-md-7 col-xs-12">
                                        @Html.CheckBox("IsEnabled", Model.IsEnabled.HasValue ? Model.IsEnabled : false)
                                        @Html.ValidationMessageFor(model => model.IsEnabled)
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.IsEnabled, new { @class = "form-control" })}
                        @*@if (User.CanView("PropertyValidationandFormat", "Other1"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvOther1">
                                <div class='form-group' title="UI Display Format">
                                    <label>@Html.LabelFor(model => model.Other1)   </label>
                                    @Html.TextBoxFor(model => model.Other1, getHtmlAttributes("Other1"))
                                    @Html.ValidationMessageFor(model => model.Other1)
                                </div>
                            </div>
                        }
                        else
                        { @Html.HiddenFor(model => model.DisplayFormat, new { @class = "form-control" })}*@
                    </div>
                    @Html.HiddenFor(model => model.IsEnabled, new { @class = "form-control" })
                    @*@Html.HiddenFor(model => model.Other1, new { @class = "form-control" })*@
                    @Html.HiddenFor(model => model.Other2, new { @class = "form-control" })
                </div>
            </div>
        </div>
    </div>
    @Html.AntiForgeryToken();
                                 var businessrule1 = User.businessrules.Where(p => p.EntityName == "PropertyValidationandFormat").ToList();
                                 var lstinlineentityname = "";
                                 var lstinlineassocdispname = "";
                                 var lstinlineassocname = "";
                                <button id="CancelQuickAdd" type="button" class="btn btn-secondary " data-dismiss="modal" aria-hidden="true" onclick="$('#PropertyValidationandFormatRefresh').click();">Cancel</button>
    if (EditPermission)
    {
        <input type="submit" id="command" name="command" value="Save & Close" class="btn btn-primary  " onclick="QuickEditFromGrid(event,true,'PropertyValidationandFormat','@ViewData["AssociatedType"]',false,'@businessrule1',@businessrule1.Count,'OnEdit','ErrMsg',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname');" />
        <input type="submit" id="sevranBtn" style="display:none;" name="command" value="Save" class="btn btn-primary btn-sm" onclick="QuickEditFromGrid(event,false,'PropertyValidationandFormat','@ViewData["AssociatedType"]',false,'@businessrule1',@businessrule1.Count,'OnEdit','ErrMsg',false,'@lstinlineassocname','@lstinlineassocdispname','@lstinlineentityname','True');" />
        <input type="hidden" name="hdncommand" value="" />
    }
}
<script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>
<script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>
<script>
    $("input[type='submit']").click(function (event) {
        if (!$("#frmQEditPropertyValidationandFormat").valid()) return;
        var $this = $(this);
        $('input:hidden[name="hdncommand"]').val($this.val());
    });
</script>
@{
    var businessrule = User.businessrules.Where(p => p.EntityName == "PropertyValidationandFormat").ToList();
    if ((businessrule != null && businessrule.Count > 0))
    {
        var typelist = string.Join(",", businessrule.SelectMany(p => p.ActionTypeID).Distinct().ToList());
        <script>
            $(document).ready(function () {
                document.getElementById("ErrMsg").innerHTML = "";
                var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
                form = $("#frmQEditPropertyValidationandFormat");
                dataurl = "@Url.Action("businessruletype", "PropertyValidationandFormat", new { ruleType = "OnEdit"})";
                ApplyBusinessRuleOnPageLoad("@typelist",dataurl, "PropertyValidationandFormat", false, "ErrMsg", form);
                //business rules on inline associations
            });
        </script>
        <script>
            $("form").submit(function (event) {
                if (!$("#frmQEditPropertyValidationandFormat").valid()) return;
                document.getElementById("ErrMsg").innerHTML = "";
                var flag = true;
                var form = $("#frmQEditPropertyValidationandFormat").serialize();
            });
        </script>
    }
}


