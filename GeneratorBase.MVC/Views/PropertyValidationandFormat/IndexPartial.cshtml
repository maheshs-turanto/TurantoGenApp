@model PagedList.IPagedList<GeneratorBase.MVC.Models.PropertyValidationandFormat>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
    var BackUrl = Request.Url.PathAndQuery;
    if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
    {
        BackUrl = Request.UrlReferrer.PathAndQuery;
    }
    var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "PropertyValidationandFormat");
    var RecycleView = ViewData["ShowDeleted"] != null && Convert.ToBoolean(ViewData["ShowDeleted"]);
}
<style>
    .pagination-container {
        margin-left: auto !important;
    }

    .pagination li a {
        position: relative;
        display: block;
        border: 1px solid #dee2e6;
        border-radius: 0.2rem;
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        margin: 1px 1px 10px 1px;
    }

    .pagination li.active a {
        color: #ffffff !important;
        background-color: #62a8d1;
    }
</style>
<div id="PropertyValidationandFormat">
    @if (RecycleView)
    {
        <span class="text text-danger"><span class="fa fa-recycle"></span> Recycle Bin</span>
        <br /><br />
    }
    <script type="text/javascript">
        $(document).ready(function () {
            $(".pagination a").click(function (e) {
                PaginationClick(e, 'PropertyValidationandFormat', '@User.JavaScriptEncodedName')
            })
            if ("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH") {
                $("#fsearchPropertyValidationandFormat").addClass('in');
                FSearchColumnsShowHide('@ViewData["HideColumns"]', 'PropertyValidationandFormat');
            }
            $("#SearchStringPropertyValidationandFormat").keypress(function (e) {
                if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                    $("#PropertyValidationandFormatSearch").bind("click", (function () {
                    }));
                    $('#PropertyValidationandFormatSearch').trigger("click");
                    return false;
                }
            })
            $("#btnShowHidePropertyValidationandFormat").mouseup(function () {
                if (document.getElementById('ColumnShowHidePropertyValidationandFormat').className == 'collapse') {
                    $('#lblPropertyValidationandFormat').css('display', 'none');
                }
            })
            if ($("#ErrmsgLockRecord").length > 0 && $("#ErrmsgLockRecord").text().length > 0) {
                $(".pull-left.actionbar").hide();
            }
        });
    </script>
    @functions {
        object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport, string ExportType = null)
        {
            if (IsPaging)
            {
                return new
                {
                    page,
                    sortBy = ViewBag.CurrentSort,
                    isAsc = ViewBag.IsAsc,
                    currentFilter = ViewBag.CurrentFilter,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    HostingEntityID = ViewData["HostingEntityID"],
                    IsExport = IsExport,
                    ExportType = ExportType,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                    IsDivRender = ViewBag.IsDivRender,

                    LowerBoundFrom = Request.QueryString["LowerBoundFrom"],
                    LowerBoundFromhdn = Request.QueryString["LowerBoundFromhdn"],
                    LowerBoundTo = Request.QueryString["LowerBoundTo"],
                    LowerBoundTohdn = Request.QueryString["LowerBoundTohdn"],
                    UpperBoundFrom = Request.QueryString["UpperBoundFrom"],
                    UpperBoundFromhdn = Request.QueryString["UpperBoundFromhdn"],
                    UpperBoundTo = Request.QueryString["UpperBoundTo"],
                    UpperBoundTohdn = Request.QueryString["UpperBoundTohdn"],
                    IsEnabled = Request.QueryString["IsEnabled"],
                    search = Request.QueryString["search"],
                    SortOrder = Request.QueryString["SortOrder"],
                    viewtype = ViewBag.TemplatesName,
                    HideColumns = ViewData["HideColumns"],
                    GroupByColumn = ViewBag.GroupByColumn,
                    FilterCondition = ViewBag.FilterCondition,
                    inbuiltSearchCriteria = ViewBag.inbuiltSearchCriteria,
                    ShowDeleted = ViewData["ShowDeleted"]
                };
            }
            else
            {
                return new
                {
                    sortBy = sortby,
                    currentFilter = Request.QueryString["currentFilter"],
                    searchString = Request.QueryString["searchString"],
                    isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                    page = ViewBag.Pages,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    IsExport = IsExport,
                    ExportType = ExportType,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                    IsDivRender = ViewBag.IsDivRender,
                    LowerBoundFrom = Request.QueryString["LowerBoundFrom"],
                    LowerBoundFromhdn = Request.QueryString["LowerBoundFromhdn"],
                    LowerBoundTo = Request.QueryString["LowerBoundTo"],
                    LowerBoundTohdn = Request.QueryString["LowerBoundTohdn"],
                    UpperBoundFrom = Request.QueryString["UpperBoundFrom"],
                    UpperBoundFromhdn = Request.QueryString["UpperBoundFromhdn"],
                    UpperBoundTo = Request.QueryString["UpperBoundTo"],
                    UpperBoundTohdn = Request.QueryString["UpperBoundTohdn"],
                    IsEnabled = Request.QueryString["IsEnabled"],
                    search = Request.QueryString["search"],
                    SortOrder = Request.QueryString["SortOrder"],
                    viewtype = ViewBag.TemplatesName,
                    HideColumns = ViewData["HideColumns"],
                    GroupByColumn = ViewBag.GroupByColumn,
                    FilterCondition = ViewBag.FilterCondition,
                    inbuiltSearchCriteria = ViewBag.inbuiltSearchCriteria,
                    ShowDeleted = ViewData["ShowDeleted"]
                };
            }
        }
    }
    @if (ViewData["IsdrivedTab"] == null)
    {
        if (!RecycleView)
        {
            <div class="pull-left actionbar mb-2">
                @if (User.CanAdd("PropertyValidationandFormat"))
                {
                    <div class="btn-group " id='@ViewData["HostingEntity"]_PropertyValidationandFormat'>
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" type="button">
                                <i class="fa fa-plus-circle"></i> Add
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                @if (User.CanAdd("PropertyValidationandFormat"))
                                {
                                    @*<a data-original-title="Full Add" data-placement="top" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "PropertyValidationandFormat", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), viewtype = Convert.ToString(ViewBag.TemplatesName) }, null) + "');") alt="Full Add" title="Full Add">
                                            <i class="fa fa-plus-circle"></i> Full Add
                                        </a>*@
                                    if (ViewBag.IsDivRender != true)
                                    {
                                        <li class="dropdown-item">
                                            <a class="dropdown-link" data-placement="top" id="addPropertyValidationandFormat" data-original-title="Quick Add" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','" + (HttpUtility.JavaScriptStringEncode(Html.DisplayName("Property Validation and Format").ToString())) + "','dvPopup','" + Url.Action("CreateQuick", "PropertyValidationandFormat", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")" alt="Quick Add" title="Quick Add">
                                                <i class="fa fa-plus-circle"></i> Quick Add
                                            </a>
                                        </li>
                                    }

                                }
                            </ul>
                        </div>


                    </div>
                }

                @if (ViewBag.IsDivRender == null || ViewBag.IsDivRender == false)
                {
                    if ((User.CanEdit("PropertyValidationandFormat") && User.CanUseVerb("BulkUpdate", "PropertyValidationandFormat", User)) || (User.CanDelete("PropertyValidationandFormat") && User.CanUseVerb("BulkDelete", "PropertyValidationandFormat", User)))
                    {
                        <div class="btn-group">
                            <button class="btn btn-secondary dropdown-toggle" data-original-title="Bulk Actions" data-toggle="dropdown" href="#">
                                <i class="fa fa-wrench"></i> Bulk
                            </button>
                            <ul class="dropdown-menu dropdown-content" role="menu" aria-labelledby="dropdownMenuButton">
                                @if (User.CanEdit("PropertyValidationandFormat") && User.CanUseVerb("BulkUpdate", "PropertyValidationandFormat", User))
                                {
                                    <li class="dropdown-item">
                                        <a data-placement="top" data-toggle="modal" data-target="#dvPopup"
                                           onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update Property Validation and Format','dvPopup','" + Url.Action("BulkUpdate", "PropertyValidationandFormat", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "','PropertyValidationandFormat')")">
                                            <i class="fa fa-pen" aria-hidden="true"></i>
                                            Update
                                        </a>
                                    </li>
                                }

                                @if (User.CanDelete("PropertyValidationandFormat") && User.CanUseVerb("BulkDelete", "PropertyValidationandFormat", User))
                                {
                                    <li class="dropdown-item">
                                        <a onclick="PerformBulkOperation(this,'PropertyValidationandFormat','Bulk Delete','@Url.Action("DeleteBulk", "PropertyValidationandFormat")','@ViewData["AssociatedType"]');">
                                            <i class="fa fa-trash" aria-hidden="true"></i>
                                            Delete
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                }
                @if (ViewBag.IsDivRender == null || ViewBag.IsDivRender == false)
                {
                    <div class="btn-group">
                        <button class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" alt="Tools" title="Tools">
                            Tools
                        </button>
                        <ul class="dropdown-menu dropdown-content" role="menu" aria-labelledby="dropdownMenuButton">
                            <li class="dropdown-item">
                                @if (ViewData["HostingEntity"] != null && User.CanEdit(ViewData["HostingEntity"].ToString()))
                                {
                                    <a class="dropdown-link" id="showAssociateBtn" data-placement="top" data-original-title="Associate Property Validation and Format with @GeneratorBase.MVC.Models.ModelConversion.GetDisplayNameOfEntity(ViewData["HostingEntity"].ToString())" data-toggle="modal" data-target="#dvPopupBulkOperation" onclick="@Html.Raw("OpenPopUpEntity1M(this,'PopupBulkOperation','Property Validation and Format','dvPopupBulkOperation','" + Url.Action("Index", "PropertyValidationandFormat", new { BulkOperation = "multiple", BulkAssociate = true, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName) }) + "')")">
                                        <i class="fa fa-plus-circle"></i> Add Association
                                    </a>
                                    <script>
                                        if ($("#HostingEntityDisplayValue").attr('id') == undefined)
                                            $("#showAssociateBtn").hide();
                                    </script>
                                }

                            </li>
                            @*<li class="dropdown-item">
                                    @if (User.CanAdd("PropertyValidationandFormat") && User.CanUseVerb("ImportExcel", "PropertyValidationandFormat", User))
                                    {

                                        <a class="dropdown-link" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "PropertyValidationandFormat", new { filetype = "xls" }) + "');") alt="Import Excel" title="Import Excel">
                                            <i class="fa fa-upload" style="margin-right:3px"></i> Import Excel
                                        </a>

                                    }
                                </li>
                                <li class="dropdown-item">
                                    @if (User.CanAdd("PropertyValidationandFormat") && User.CanUseVerb("ImportCSV", "PropertyValidationandFormat", User))
                                    {

                                        <a class="dropdown-link" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "PropertyValidationandFormat", new { filetype = "csv" }) + "');") alt="Import CSV" title="Import CSV">
                                            <i class="fa fa-upload" style="margin-right:3px"></i> Import CSV
                                        </a>

                                    }
                                </li>*@

                            <li class="dropdown-item">
                                @if (User.CanView("PropertyValidationandFormat") && User.CanUseVerb("ExportExcel", "PropertyValidationandFormat", User))
                                {
                                    <a class="dropdown-link" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"PropertyValidationandFormat",getSortHtmlAttributes(null, false, null, true, "xls"), null) + "');") alt="Export Excel" title="Export Excel">
                                        <i class="fa fa-download" style="margin-right:3px"></i> Export Excel
                                    </a>
                                }
                            </li>
                            <li class="dropdown-item">
                                @if (User.CanView("PropertyValidationandFormat") && User.CanUseVerb("ExportCSV", "PropertyValidationandFormat", User))
                                {
                                    <a class="dropdown-link" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"PropertyValidationandFormat",getSortHtmlAttributes(null, false, null, true, "csv"), null) + "');") alt="Export CSV" title="Export CSV">
                                        <i class="fa fa-download" style="margin-right:3px"></i> Export CSV
                                    </a>
                                }
                            </li>
                        </ul>
                    </div>
                }

                <div class="btn-group">
                    <a href="" class="btn btn-secondary" onclick="@Html.Raw("NavigateToUrl('" + Url.Action("GlobalDateTimeSetting", "PropertyValidationandFormat", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), viewtype = Convert.ToString(ViewBag.TemplatesName) }, null) + "');")">
                        <i class="fa fa-plus-circle"></i> Global DateTime Setting
                    </a>
                </div>
            </div>
        }
        <div class="pull-right">
            <div class="input-group">
                @Html.TextBox("SearchStringPropertyValidationandFormat", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                <div class="input-group-btn">
                    <a id="PropertyValidationandFormatSearch" onclick="SearchClick(event, 'PropertyValidationandFormat', '@Html.Raw(Url.Action("Index", "PropertyValidationandFormat", new {ShowDeleted = ViewData["ShowDeleted"], IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-white tip-top" alt="Grid Search" title="Search on grid"><span class="fa fa-search"></span></a>
                    <a id="PropertyValidationandFormatDeepSearch" onclick="SearchClick(event, 'PropertyValidationandFormat', '@Html.Raw(Url.Action("Index", "PropertyValidationandFormat", new {ShowDeleted = ViewData["ShowDeleted"], IsFilter = ViewData["IsFilter"], IsDeepSearch = true, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString() ,viewtype = Convert.ToString(ViewBag.TemplatesName)}))','@User.JavaScriptEncodedName');" data-original-title="Deep Search" class="btn btn-white tip-top" alt="Deep Search" title="Search deep"><span class="fa fa-search-plus"></span></a>
                    <a id="PropertyValidationandFormatCancel" class="btn btn-white collapse-data-btn tip-top" onclick="CancelSearch('PropertyValidationandFormat','@Html.Raw(Url.Action("Index", "PropertyValidationandFormat", new {ShowDeleted = ViewData["ShowDeleted"],IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName) }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top" alt="Clear Search" title="Clear Search">
                        <span class="fa fa-minus-circle"></span>
                    </a>
                    <a id="PropertyValidationandFormatSearchCancel" class="btn btn-white collapse-data-btn tip-top" onclick="CancelSearch('PropertyValidationandFormat','@Html.Raw(Url.Action("Index", "PropertyValidationandFormat", new {ShowDeleted = ViewData["ShowDeleted"], IsFilter=ViewData["IsFilter"], itemsPerPage=Convert.ToInt32(ViewBag.PageSize),HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(ViewBag.TemplatesName)}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" alt="Refresh Grid" title="Refresh Grid">
                        <span class="fa fa-refresh"></span>
                    </a>
                    <a id="PropertyValidationandFormatRefresh" class="d-none" onclick="CancelSearch('PropertyValidationandFormat','@Html.Raw(Url.Action(ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes(ViewBag.CurrentSort, false,null, false)))','@User.Name')"></a>
                    @if (ViewData["HostingEntity"] == null)
                    {
                        <a data-toggle="dropdown" data-original-title="Queries" class="d-none btn btn-secondary" alt="Queries" title="Queries"><span class="fa fa-binoculars"></span></a>
                        <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenuButton">

                            <li class="dropdown-item">
                                @foreach (var fsearch in User.GetFacetedSearch("PropertyValidationandFormat", User))
                                {
                                    <a class="dropdown-link" href="~/@fsearch.T_LinkAddress&ShowDeleted=@Convert.ToString(ViewData["ShowDeleted"])" data-placement="top" alt="@fsearch.T_Description" title="@fsearch.T_Description">
                                        <span class="fa fa-filter"></span> @fsearch.T_Name
                                    </a>
                                }
                            </li>
                        </ul>
                    }
                </div>
            </div>
        </div>
    }
    <div style="clear:both"></div>
    @if (ViewBag.SearchResult != "")
    {
        <div id="fsearchPropertyValidationandFormat" class="collapse QueryResult" style="margin-top:5px">
            @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, ""))
            <div class="pull-right" style="margin-top:-6px;">
                @if (ActionNameUrl == "FSearch" && ViewData["HostingEntity"] != null)
                {
                    <a onclick="window.location.reload();" class="btn btn-primary btn-sm"><span class="fa fa-times-circle"></span> Clear</a>
                }
                else
                {
                    <a href="@Url.Action("Index", "PropertyValidationandFormat",new{ShowDeleted = ViewData["ShowDeleted"], viewtype = Convert.ToString(ViewBag.TemplatesName)})" class="btn btn-primary btn-sm"><span class="fa fa-times-circle"></span> Clear</a>
                }
                @if (User.CanAdd("T_FacetedSearch"))
                {
                    <a onclick="@Html.Raw("OpenPopUpEntity('addPopup','Query','dvPopup','" + Url.Action("CreateQuick", "T_FacetedSearch", new { EntityName="PropertyValidationandFormat",Url=Html.Raw(Request.Url.PathAndQuery) }) + "')")" class="btn btn-primary btn-sm"><span class="fa fa-floppy-o"></span> Save</a>
                }
            </div>
        </div>
    }
    @if (Model.Count > 0)
    {
        <div id="pagination" class="MyPagination1">
            @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes(null, true, page, false)))
            <div class="fixPageSize">
                Page Size :
                @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
                            , new
                            {
                                @id = "pagesizelistPropertyValidationandFormat",
                                @onchange = @Html.Raw("pagesizelistChange(event,'PropertyValidationandFormat','"
                                + @User.JavaScriptEncodedName + "')"),
                                @Url = Html.Raw(@Url.Action(ActionNameUrl, "PropertyValidationandFormat",
                                getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
                                null, false), null))
                            })
                <span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                <script>
                    $(document).ready(function () {
                        $.validator.setDefaults({
                            ignore: "#pagesizelistPropertyValidationandFormat"
                        })
                    });
                </script>
            </div>
        </div>
        <div style="clear:both"></div>
    }
    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
        <table class="table table-hover default-bordered default-condensed">
            <thead>
                <tr>
                    @if ((ViewBag.IsDivRender == null || ViewBag.IsDivRender == false) && ((User.CanEdit("PropertyValidationandFormat") && User.CanUseVerb("BulkUpdate", "PropertyValidationandFormat", User)) || (User.CanDelete("PropertyValidationandFormat") && User.CanUseVerb("BulkDelete", "PropertyValidationandFormat", User))))
                    {
                        <th class="col0" style="width:20px;" scope="col" data-sort-ignore="true">
                            <input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);" />
                            @Html.Hidden("SelectedItems")
                        </th>
                    }
                    <th scope="col" class="col1" style="width:75px;" alt="Actions" title="Actions" data-sort-ignore="true">Actions</th>
                    @if (User.CanView("PropertyValidationandFormat", "EntityName"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "EntityName");
                        <th scope="col" class="col2">
                            @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("EntityName", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "EntityName")
                            {<i class="fa fa-sort-desc"></i>}
                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "EntityName")
                            {<i class="fa fa-sort-asc"></i>}
                        </th>
                    }
                    @if (User.CanView("PropertyValidationandFormat", "PropertyName"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "PropertyName");
                        <th scope="col" class="col3">
                            @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("PropertyName", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "PropertyName")
                            {<i class="fa fa-sort-desc"></i>}
                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "PropertyName")
                            {<i class="fa fa-sort-asc"></i>}
                        </th>
                    }
                    @if (User.CanView("PropertyValidationandFormat", "RegExPattern"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "RegExPattern");
                        <th scope="col" class="col4">
                            @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("RegExPattern", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "RegExPattern")
                            {<i class="fa fa-sort-desc"></i>}
                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "RegExPattern")
                            {<i class="fa fa-sort-asc"></i>}
                        </th>
                    }
                    @if (User.CanView("PropertyValidationandFormat", "MaskPattern"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "MaskPattern");
                        <th scope="col" class="col4">
                            @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("MaskPattern", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "MaskPattern")
                            {<i class="fa fa-sort-desc"></i>}
                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "MaskPattern")
                            {<i class="fa fa-sort-asc"></i>}
                        </th>
                    }
                    @if (User.CanView("PropertyValidationandFormat", "ErrorMessage"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "ErrorMessage");
                        <th scope="col" class="col5">
                            @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("ErrorMessage", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "ErrorMessage")
                            {<i class="fa fa-sort-desc"></i>}
                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "ErrorMessage")
                            {<i class="fa fa-sort-asc"></i>}
                        </th>
                    }
                    @*@if (User.CanView("PropertyValidationandFormat", "LowerBound"))
                        {
                            var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "LowerBound");
                            <th scope="col" class="col6">
                                @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("LowerBound", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "LowerBound")
                                {<i class="fa fa-sort-desc"></i>}
                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "LowerBound")
                                {<i class="fa fa-sort-asc"></i>}
                            </th>
                        }
                        @if (User.CanView("PropertyValidationandFormat", "UpperBound"))
                        {
                            var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "UpperBound");
                            <th scope="col" class="col7">
                                @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("UpperBound", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "UpperBound")
                                {<i class="fa fa-sort-desc"></i>}
                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "UpperBound")
                                {<i class="fa fa-sort-asc"></i>}
                            </th>
                        }*@
                    @if (User.CanView("PropertyValidationandFormat", "DisplayFormat"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "DisplayFormat");
                        <th scope="col" class="col8">
                            @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("DisplayFormat", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "DisplayFormat")
                            {<i class="fa fa-sort-desc"></i>}
                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "DisplayFormat")
                            {<i class="fa fa-sort-asc"></i>}
                        </th>
                    }
                    @*@if (User.CanView("PropertyValidationandFormat", "Other1"))
                        {
                            var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "Other1");
                            <th scope="col" class="col8">
                                @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("Other1", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                                @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "Other1")
                                {<i class="fa fa-sort-desc"></i>}
                                @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "Other1")
                                {<i class="fa fa-sort-asc"></i>}
                            </th>
                        }*@
                    @if (User.CanView("PropertyValidationandFormat", "IsEnabled"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "IsEnabled");
                        <th scope="col" class="col8">
                            @Html.ActionLink(SortPropertyName.DisplayName, ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes("IsEnabled", false, null, false), new { @onclick = "SortLinkClick(event,'PropertyValidationandFormat');" })
                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "IsEnabled")
                            {<i class="fa fa-sort-desc"></i>}
                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "IsEnabled")
                            {<i class="fa fa-sort-asc"></i>}
                        </th>
                    }
                </tr>
            </thead>
            @{ bool isFirst = true; var oldKey = string.Empty; }
            @foreach (var item in Model)
            {
                List<string> hiddenProperties = new List<string>();
                if (User.businessrules.Any(p => p.EntityName == "PropertyValidationandFormat" && p.ActionTypeID.Contains(6)))
                {
                    hiddenProperties = item.ApplyHiddenRule(User.businessrules, "PropertyValidationandFormat");
                }
                if (ViewBag.IsGroupBy != null && Convert.ToBoolean(ViewBag.IsGroupBy))
                {
                    var groupKey = item.m_DisplayValue;
                    if (oldKey != groupKey)
                    {
                        isFirst = true;
                        oldKey = item.m_DisplayValue;
                    }
                    if (isFirst || (string.IsNullOrEmpty(oldKey)))
                    {
                        isFirst = false;
                        string groupString = string.Empty;
                        <tr>
                            <td colspan="9" style="background: #EDF5FA; font-weight:bold"> @groupKey @groupString</td>
                        </tr>
                    }
                }
                <tr scope="row">
                    @if ((ViewBag.IsDivRender == null || ViewBag.IsDivRender == false) && ((User.CanEdit("PropertyValidationandFormat") && User.CanUseVerb("BulkUpdate", "PropertyValidationandFormat", User)) || (User.CanDelete("PropertyValidationandFormat") && User.CanUseVerb("BulkDelete", "PropertyValidationandFormat", User))))
                    {
                        <td>
                            <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" />
                        </td>
                    }
                    <td class="btnaction" rowid="btnrow_@item.Id" businessrule='@Html.Raw(Url.Action("ApplyBusinessRuleBeforeById", new { objectId = item.Id }))'>
                        <div style="display:none;">
                            <div class="btn-group tdDoubleClickGroup">
                                <a onclick="SavePropertiesValue(this,'PropertyValidationandFormat',@item.Id,'@Url.Action("SavePropertiesValue")');" class="btn dropdown-toggle btn-primary" alt="Save" title="Save" style="color:white">
                                    <i class="fa fa-save"></i> Save
                                </a>
                                <a onclick="$('#PropertyValidationandFormatRefresh').click();" class="btn dropdown-toggle btn-secondary" alt="Cancel" title="Cancel">
                                    <i class="fa fa-close"></i> Cancel
                                </a>
                            </div>
                        </div>
                        <div>
                            <div class="btn-group">
                                @if (User.CanEdit("PropertyValidationandFormat"))
                                {

                                    <a class="btn btn-secondary" id='aBtnQuickEditPropertyValidationandFormat_@item.Id' style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntityQuickEdit('addPopup','" + (HttpUtility.JavaScriptStringEncode(Html.DisplayName("Edit Property Validation and Format").ToString())) + "','dvPopup','" + Url.Action("EditQuick", "PropertyValidationandFormat", new
																			{
																				id = item.Id,
                                                                                UrlReferrer = Request.Url.PathAndQuery,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)
																			}) + "')")"><i class="fa fa-edit"></i></a>



                                }
                                @if (!User.CanEdit("PropertyValidationandFormat"))
                                {
                                    <a href="@Url.Action("Details", "PropertyValidationandFormat", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), viewtype = Convert.ToString(ViewBag.TemplatesName) }, null)" class="btn btn-secondary dropdown-toggle">
                                        <i class="fa fa-eye-open"></i>
                                    </a>
                                }
                                <a data-toggle="dropdown" class="btn btn-secondary dropdown-toggle " alt="More Options" title="More Options">

                                </a>
                                <ul class="dropdown-menu pull-left">

                                    @if (User.CanEdit("PropertyValidationandFormat"))
                                    {

                                        <li class="dropdown-item">
                                            <a class="dropdown-link" id='aBtnQuickEditPropertyValidationandFormat_@item.Id' style="cursor:pointer;" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntityQuickEdit('addPopup','" + (HttpUtility.JavaScriptStringEncode(Html.DisplayName("Edit Property Validation and Format").ToString())) + "','dvPopup','" + Url.Action("EditQuick", "PropertyValidationandFormat", new
																			{
																				id = item.Id,
                                                                                UrlReferrer = Request.Url.PathAndQuery,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = Convert.ToString(ViewBag.TemplatesName)
																			}) + "')")"><i class="fa fa-pen"></i>Quick Edit</a>
                                        </li>
                                    }

                                    @if (User.CanDelete("PropertyValidationandFormat"))
                                    {
                                        <li class="dropdown-item">
                                            <a class="dropdown-link" href="@Url.Action("Delete", "PropertyValidationandFormat", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(ViewBag.TemplatesName) }, null)"><i class="fa fa-trash" style="color: #E7574B;"></i> Delete</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </td>
                    @if (User.CanView("PropertyValidationandFormat", "EntityName"))
                    {

                        <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                            @Html.DisplayFor(modelItem => item.EntityName)
                        </td>
                    }
                    @if (User.CanView("PropertyValidationandFormat", "PropertyName"))
                    {

                        <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                            @Html.DisplayFor(modelItem => item.PropertyName)
                        </td>
                    }
                    @if (User.CanView("PropertyValidationandFormat", "RegExPattern"))
                    {

                        <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                            @Html.DisplayFor(modelItem => item.RegExPattern)
                        </td>
                    }
                    @if (User.CanView("PropertyValidationandFormat", "MaskPattern"))
                    {

                        <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                            @Html.DisplayFor(modelItem => item.MaskPattern)
                        </td>
                    }
                    @if (User.CanView("PropertyValidationandFormat", "ErrorMessage"))
                    {

                        <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                            @Html.DisplayFor(modelItem => item.ErrorMessage)
                        </td>
                    }
                    @*@if (User.CanView("PropertyValidationandFormat", "LowerBound"))
                        {

                            <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                                @Html.DisplayFor(modelItem => item.LowerBound)
                            </td>
                        }
                        @if (User.CanView("PropertyValidationandFormat", "UpperBound"))
                        {

                            <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                                @Html.DisplayFor(modelItem => item.UpperBound)
                            </td>
                        }*@
                    @if (User.CanView("PropertyValidationandFormat", "DisplayFormat"))
                    {

                        <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                            @Html.DisplayFor(modelItem => item.DisplayFormat)
                        </td>
                    }
                    @*@if (User.CanView("PropertyValidationandFormat", "Other1"))
                        {

                            <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                                @Html.DisplayFor(modelItem => item.Other1)
                            </td>
                        }*@
                    @if (User.CanView("PropertyValidationandFormat", "IsEnabled"))
                    {

                        <td onclick="OpenQuickEdit('PropertyValidationandFormat','@item.Id',event);">
                            @Html.ValueFor(modelItem => item.IsEnabled)
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
    @if (Model.Count > 0)
    {
        <div id="pagination" class="MyPagination1">
            @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "PropertyValidationandFormat", getSortHtmlAttributes(null, true, page, false)))
            <div class="fixPageSize">
                Page Size :
                @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
                            , new
                            {
                                @id = "pagesizelistPropertyValidationandFormat",
                                @onchange = @Html.Raw("pagesizelistChange(event,'PropertyValidationandFormat','"
                                + @User.JavaScriptEncodedName + "')"),
                                @Url = Html.Raw(@Url.Action(ActionNameUrl, "PropertyValidationandFormat",
                                getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
                                null, false), null))
                            })
                <span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                <script>
                    $(document).ready(function () {
                        $.validator.setDefaults({
                            ignore: "#pagesizelistPropertyValidationandFormat"
                        })
                    });
                </script>
            </div>
        </div>
    }
    @Html.DropDownList("EntityPropertyValidationandFormatDisplayValue", null, null, new { @Style = "display:none;" })
</div>