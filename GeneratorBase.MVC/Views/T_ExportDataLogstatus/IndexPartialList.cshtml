@model T_ExportDataLogstatusIndexViewModel
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
	var BackUrl =  Request.Url.PathAndQuery;
	 if (ViewData["HostingEntity"] != null && (Request.QueryString["TabToken"] != null || Request.IsAjaxRequest()))
	{
		BackUrl =  Request.UrlReferrer != null ?  Request.UrlReferrer.PathAndQuery : "";
	}
	var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "T_ExportDataLogstatus");
			}
<div id="T_ExportDataLogstatus">
<script type="text/javascript">
    $(document).ready(function () {
	 $(".pagination a").click(function (e) {
            //PaginationClick(e,'T_ExportDataLogstatus')
			PaginationClick(e, 'T_ExportDataLogstatus','@User.JavaScriptEncodedName')
        })
	    $("#SearchStringT_ExportDataLogstatus").keypress(function (e) {
			if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
				 $("#T_ExportDataLogstatusSearch").bind("click", (function () {
                        }));
                $('#T_ExportDataLogstatusSearch').trigger("click");
                return false;
			}
        })
        $("#btnShowHideT_ExportDataLogstatus").mouseup(function () {
            if (document.getElementById('ColumnShowHideT_ExportDataLogstatus').className == 'collapse') {
				 $('#lblT_ExportDataLogstatus').css('display', 'none');
            }
        })
		if ($("#ErrmsgLockRecord").length > 0 && $("#ErrmsgLockRecord").text().length > 0) {
                   $(".pull-left.btn-group.actionbar").hide();
		}
    });
</script>

<style>
.dropdown:hover>.dropdown-menu {
  display: block;
}
.GenappListFix{
overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;}
</style>

@functions {
    object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
    {
        if (IsPaging)
        {
            return new
            {
                page,
                sortBy = Model.CurrentSort,
                isAsc = Model.IsAsc,
				searchString = Request.QueryString["searchString"],
                currentFilter = Model.currentFilter,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                HostingEntityID = ViewData["HostingEntityID"],
				IsExport = IsExport,
				FSFilter = Model.FSFilter == null ? "Fsearch" : Model.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                
				search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = Model.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = Model.GroupByColumn,
		 FilterCondition = Model.FilterCondition,
            };
        }
        else
        {
            return new
            {
                sortBy = sortby,
                currentFilter = Request.QueryString["currentFilter"],
                searchString = Request.QueryString["searchString"],
                isAsc = (Model.IsAsc == "ASC" ? "DESC" : ""),
                page = Model.Pages,
                HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
				IsExport = IsExport,
				FSFilter = Model.FSFilter == null ? "Fsearch" : Model.FSFilter,
				IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
		search=Request.QueryString["search"],
		SortOrder = Request.QueryString["SortOrder"],
		viewtype = Model.TemplatesName,
		HideColumns = ViewData["HideColumns"],
		 GroupByColumn = Model.GroupByColumn,
		 FilterCondition = Model.FilterCondition,
            };
        }
    }
}
<div class="">
        <div class="card">
            <div class="card-header">
<div class="row">
    <div class="col-md-12 col-sm-12 col-sx-12">
	   <div style="display:block; padding:0px 0px 5px 0px;">
            <div class="pull-left btn-group actionbar">
                 <div class="btn-group" id='@ViewData["HostingEntity"]_T_ExportDataLogstatus'>
				                 <div class="dropdown mr-1">
                    <a class="btn btn-secondary dropdown-toggle" data-original-title="Filter-Groupby" data-toggle="dropdown" href="#">
                        <i class="fa fa-plus-circle"></i> Add
                    </a>
					 <ul class="dropdown-menu" role="menu">
				  @if (User.CanAdd("T_ExportDataLogstatus"))
				  {
				<li>	<a class="btn dropdown-item" data-placement="top" id="addT_ExportDataLogstatus" data-original-title="Quick Add" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','" + (HttpUtility.JavaScriptStringEncode(Html.DisplayName("ExportDataLog Status").ToString())) + "','dvPopup','" + Url.Action("CreateQuick", "T_ExportDataLogstatus", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS=DateTime.Now,viewtype = Convert.ToString(Model.TemplatesName) }) + "')")">
						<i class="fa fa-plus-circle"></i> Quick Add
                    </a></li>
					<li><a class="btn dropdown-item"  data-original-title="Full Add" data-placement="top" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_ExportDataLogstatus", new { UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(Model.TemplatesName) }, null) + "');")>
						<i class="fa fa-plus-circle" style="margin-right:3px"></i> Add
					</a></li>
			}
               </ul> </div> </div>
		<div class="">
                   </div>
@if ((User.CanEdit("T_ExportDataLogstatus") && User.CanUseVerb("BulkUpdate", "T_ExportDataLogstatus", User)) || (User.CanDelete("T_ExportDataLogstatus") && User.CanUseVerb("BulkDelete", "T_ExportDataLogstatus", User)))
{
 <div class="">
  <div class="dropdown mr-1">
    <a class="btn btn-secondary dropdown-toggle" data-original-title="Bulk Actions" data-toggle="dropdown" href="#">
           <span class="fa fa-wrench"></span> Bulk
        </a>
        <ul class="dropdown-menu" role="menu">
	@if ( User.CanEdit("T_ExportDataLogstatus")&&  User.CanUseVerb("BulkUpdate","T_ExportDataLogstatus",User))
	{
	<li>
		<a class="dropdown-item" data-placement="top"  data-toggle="modal" data-target="#dvPopup"
			onclick="@Html.Raw("OpenPopUpBulKUpdate('addPopup','Bulk Update ExportDataLog Status','dvPopup','" + Url.Action("BulkUpdate", "T_ExportDataLogstatus", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "','T_ExportDataLogstatus')")">Update</a>
	</li>
	}
 
	 @if ( User.CanDelete("T_ExportDataLogstatus") && User.CanUseVerb("BulkDelete","T_ExportDataLogstatus",User))
     {
	 <li>
		<a class="dropdown-item" onclick="PerformBulkOperation(this,'T_ExportDataLogstatus','Bulk Delete','@Url.Action("DeleteBulk", "T_ExportDataLogstatus")','@ViewData["AssociatedType"]');">Delete</a>
	 </li>
	 }
                        </ul>
                    </div>
					 </div>
					}
					 <div class="">
					  <div class="dropdown mr-1">
                        <a class="btn btn-secondary dropdown-toggle tip-top" data-original-title="View As" data-toggle="dropdown" href="#">
                            <span class="fa fa fa-table"></span> View As
                           
                        </a>
                        <ul class="dropdown-menu" role="menu" style="min-width:110px">
                            <li>
                                <a class="dropdown-item" data-placement="top" style="cursor:pointer;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_ExportDataLogstatus','" + Url.Action("Index", "T_ExportDataLogstatus", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialGallery" }) + "')")">
                                    <span class="fa fa-th"></span> Gallery
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" style="display:block; margin:0px;"
                                   onclick="@Html.Raw("LoadTabTemplate('T_ExportDataLogstatus','" + Url.Action("Index", "T_ExportDataLogstatus", new { UrlReferrer = BackUrl, AssociatedType = ViewData["AssociatedType"], HostingEntity = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now, viewtype = "IndexPartialList" }) + "')")">
                                    <span class="fa fa-list"></span> List
                                </a>
                            </li>
                        </ul>
                    </div>
					 </div>
<div class="">
<div class="dropdown mr-1">
                            <a class="btn btn-secondary dropdown-toggle tip-top" data-toggle="dropdown" href="#">
                                Tools
                              
                            </a>
                            <ul class="dropdown-menu" role="menu" style="min-width:110px">
							 <li>
									        
                                </li>
                                <li>
				@if ( User.CanAdd("T_ExportDataLogstatus") && User.CanUseVerb("ImportExcel", "T_ExportDataLogstatus", User))
			{
				if (ViewData["HostingEntity"]==null)
				{ 
				 <a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Upload", "T_ExportDataLogstatus") + "');")>
                        <i class="fa fa-upload" ></i>    Import Excel
                 </a>
				}
			}
                                </li>
                                <li>
				@if (User.CanView("T_ExportDataLogstatus") && User.CanUseVerb("ExportExcel", "T_ExportDataLogstatus", User))
                {
					<a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action(ActionNameUrl,"T_ExportDataLogstatus",getSortHtmlAttributes(null, false, null, true), null) + "');")>
						<i class="fa fa-download" ></i>  Export Excel
					</a>
				}
                                </li>
                    			<li class="">
                <a class="collapse-data-btn dropdown-item" id="btnShowHideT_ExportDataLogstatus" data-original-title="Show/Hide Column" data-placement="top" onclick=@Html.Raw("showhideColumns(event,'T_ExportDataLogstatus');")>
                    <span class="fa fa-table"></span>  Show/Hide Column
                </a>
            </li>
                                </ul>
                        </div>
						 </div>
</div>					
					<div class="pull-right" style="width:400px; padding-top:4px; ">
                        <div class="input-group">
                            @Html.TextBox("SearchStringT_ExportDataLogstatus", Model.currentFilter as string, null, new { @class = "form-control fixsearchbox", @value = Model.HomeVal, @placeholder = "Search" })
                            <div class="input-group-btn">
                              <a id="T_ExportDataLogstatusSearch" onclick="SearchClick(event, 'T_ExportDataLogstatus', '@Html.Raw(Url.Action("Index", "T_ExportDataLogstatus", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], SearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(Model.TemplatesName) }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-secondary" ><span class="fa fa-search"></span></a>
								<button id="T_ExportDataLogstatusCancel" type="button" class="btn btn-secondary collapse-data-btn" onclick="CancelSearch('T_ExportDataLogstatus','@Html.Raw(Url.Action("Index", "T_ExportDataLogstatus", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(Model.TemplatesName) }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top">
                                    <span class="fa fa-minus-circle"></span>
                                </button>
                                <button id="T_ExportDataLogstatusSearchCancel" type="button" class="btn btn-secondary collapse-data-btn" onclick="CancelSearch('T_ExportDataLogstatus','@Html.Raw(Url.Action("Index", "T_ExportDataLogstatus", new {IsFilter=ViewData["IsFilter"], itemsPerPage=Convert.ToInt32(Model.PageSize),HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]),HideColumns = ViewData["HideColumns"], ClearSearchTimeStamp = DateTime.Now.Ticks.ToString(),viewtype = Convert.ToString(Model.TemplatesName)}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top">
                                    <span class="fa fa-refresh"></span>
                                </button>
								<a id="T_ExportDataLogstatusRefresh" type="button" class="hidden" onclick="CancelSearch('T_ExportDataLogstatus','@Html.Raw(Url.Action("Index", "T_ExportDataLogstatus", getSortHtmlAttributes(Model.CurrentSort, Model.Pages == 1 ? false : true,null, false)))','@User.Name')"></a>
                            </div>
                        </div>
                    </div>
			 <div style="clear:both"></div>
            <div id="dvShowHideT_ExportDataLogstatus" class="collapse">
            </div>
                    @if (Model.list.Count > 0)
                    {
                        <div class="ViewMessage p-1 mt-1 mb-1">
                            <label><input type="checkbox" value="" class="tip-top" data-placement="top" data-original-title="Select All" onclick="CommonSelectAllRows(this, 'divTurantoList');"> Select All</label>
                        </div>
                    }
			 <div id="divTurantoList">
 @if (Model.list.Count > 0)
        {
		@Html.Hidden("SelectedItems")
foreach (var item in Model.list) 
{
List<string> hiddenProperties = new List<string>();
if (User.businessrules.Any(p => p.EntityName == "T_ExportDataLogstatus" && p.ActionTypeID.Contains(6)))
{
	hiddenProperties = item.ApplyHiddenRule(User.businessrules, "T_ExportDataLogstatus");
}

  <div class="GenappList card card-body border">
                <div class="d-flex justify-content-between p-1" style="background: #f5f6f9;">

<table class="p-2">
                <tr>
                    <td>
                        <input type="checkbox" id="@item.Id" onclick="CommonSelectForBulkOperation(this,'@item.Id', 'divTurantoList');"  style="position:absolute"/>
                    </td>
                </tr>
            </table>

			 <h4 class="card-title" title="@item.DisplayValue">@item.DisplayValue</h4>
			 <div class="dropdown">
			<button class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" >
                                                    Action
                                                   
                                                </button>
                        <ul class="dropdown-menu">
							                            @if (User.CanEdit("T_ExportDataLogstatus"))
                            {
                                <li class="dropdown-item">
                                    <a id='aBtnQuickEditT_ExportDataLogstatus_@item.Id' data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntityQuickEdit('addPopup','" + (HttpUtility.JavaScriptStringEncode(Html.DisplayName("Edit ExportDataLog Status").ToString())) + "','dvPopup','" + Url.Action("EditQuick", "T_ExportDataLogstatus",
															new {
																				id = item.Id,
																				UrlReferrer = Request.Url.PathAndQuery,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = Convert.ToString(Model.TemplatesName)
																			}) + "')")"><i class="fa fa-pen"></i> Quick Edit</a>
                                </li>
                            }
                         				@if (User.CanEdit("T_ExportDataLogstatus"))
                {
				<li class="dropdown-item">
                        <a href="@Url.Action("Edit","T_ExportDataLogstatus", new { id = item.Id,  UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(Model.TemplatesName) },null)"><i class="fa fa-edit"></i>  Edit</a>
                </li> 
				}
			@if (User.CanDeleteItem("T_ExportDataLogstatus", item, User))
                 {
				<li class="dropdown-item">
                    <a  href="@Url.Action("Delete", "T_ExportDataLogstatus", new { id = item.Id, UrlReferrer = BackUrl, AssociatedType=ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(Model.TemplatesName) }, null)"><i class="fa fa-trash"></i> Delete</a>
                </li>
				 }
	<li class="dropdown-submenu dropdown-item pull-left" id="AddAssociationdropmenuT_ExportDataLogstatus_@item.Id">
	 @{ var dropmenu = false; }
	<a tabindex="-1" href="#"><i class="fa fa-plus"></i> Add</a>
    <ul class="dropdown-menu pull-left">
				@if ( User.CanView("T_ExportDataLog"))
				{ dropmenu = true;
				<li>
						<a class="dropdown-item" onclick=@Html.Raw("NavigateToUrl('" + Url.Action("Create", "T_ExportDataLog", 
						new { UrlReferrer = BackUrl,
								AssociatedType ="T_AssociatedExportDataLogStatus", 
							HostingEntityName = "T_ExportDataLogstatus",
							HostingEntityID = @Convert.ToString(item.Id) }, null) + "');")>
							<i class="fa fa-plus"></i>  ExportDataLogs
						</a>
					</li>
				}
			</ul>
</li>
@if(!dropmenu)
{
    <script>
        $("#AddAssociationdropmenuT_ExportDataLogstatus_@item.Id").hide();
    </script>
}
                        </ul>
                    </div>
		
</div>

	
	 		























			<div class="col-sm-12  p-2 border">
				<div class="">
				
   <div class='col-sm-12 pl-5' >
				</div>




				</div>


					<div class="row">
								@if(User.CanView("T_ExportDataLogstatus","T_Name"))
			{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_Name");
			<div class="col2 col-sm-3">
			 <div class=" overflow GenappListFix" title="@SortPropertyName.DisplayName">
            <strong>@Html.ActionLink(SortPropertyName.DisplayName+" :", ActionNameUrl, "T_ExportDataLogstatus", getSortHtmlAttributes("T_Name", false, null, false), new { @onclick = "SortLinkClick(event,'T_ExportDataLogstatus');", @Style = "text-decoration: none;color: inherit;" })
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_Name")
				{<i class="fa fa-sort-desc"></i>}
				@if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_Name")
				{<i class="fa fa-sort-asc"></i>}</strong>
				<span class=" overflow GenappListFix" title="@Html.DisplayFor(modelItem => item.T_Name)">
										                                        @Html.DisplayFor(modelItem => item.T_Name)
										                                        </span>
                                        </div>
                                        
			</div>
			}
						@if(User.CanView("T_ExportDataLogstatus","T_Description"))
			{
			var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "T_Description");
			<div class="col3 col-sm-3">
			 <div class=" overflow GenappListFix" title="@SortPropertyName.DisplayName">
            <strong>@Html.ActionLink(SortPropertyName.DisplayName+" :", ActionNameUrl, "T_ExportDataLogstatus", getSortHtmlAttributes("T_Description", false, null, false), new { @onclick = "SortLinkClick(event,'T_ExportDataLogstatus');", @Style = "text-decoration: none;color: inherit;" })
				@if (Model.IsAsc == "DESC" && Model.CurrentSort == "T_Description")
				{<i class="fa fa-sort-desc"></i>}
				@if (Model.IsAsc == "ASC" && Model.CurrentSort == "T_Description")
				{<i class="fa fa-sort-asc"></i>}</strong>
				<span class=" overflow GenappListFix" title="@Html.DisplayFor(modelItem => item.T_Description)">
										                                        @Html.DisplayFor(modelItem => item.T_Description)
										                                        </span>
                                        </div>
                                        
			</div>
			}
			 </div>
    <div class="col-sm-1 GenappListFix" style="display:none">
      <div class="btn-group-vertical" style="left:-15px" >
                        <a title="View" href="@Url.Action(User.CanEdit("T_ExportDataLogstatus") ? "Edit" : "Details", "T_ExportDataLogstatus",
                        new { id = item.Id, AssociatedType = ViewData["AssociatedType"],
                            HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
                            HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(Model.TemplatesName)  },
                            null)"  class="btn btn-default" style="text-align: left">
                            <span class="fa fa-eye icon-listbut"></span> View
                        </a>
@if (User.CanEdit("T_ExportDataLogstatus"))
                                                        {
                        <a title="Quick Edit" style="color: #5d9cec;" class="btn btn-secondary" onclick="@Html.Raw("OpenPopUpEntity('addPopup','" + (HttpUtility.JavaScriptStringEncode(Html.DisplayName("Edit ExportDataLog Status").ToString())) + "','dvPopup','" + Url.Action("EditQuick", "T_ExportDataLogstatus", new
																			{
																				id = item.Id,
																				UrlReferrer = Request.Url.PathAndQuery,
																				AssociatedType = ViewData["AssociatedType"],
																				HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
																				HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
																				TS = DateTime.Now,viewtype = Convert.ToString(Model.TemplatesName)
																			}) + "')")" >
                            <span class="fa fa-pen icon-listbut"></span> Quick Edit
                        </a>
}
@if (User.CanEdit("T_ExportDataLogstatus"))
                                                        {
                        <a title="Full Edit" href="@Url.Action("Edit","T_ExportDataLogstatus",
                        new { id = item.Id,  UrlReferrer = BackUrl,
                            AssociatedType=ViewData["AssociatedType"],
                            HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]),
                            HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),viewtype = Convert.ToString(Model.TemplatesName) },
                            null)"  class="btn btn-secondary" style="text-align: left">
                            <span class="fa fa-edit icon-listbut"></span> Edit
                        </a>
}
 <a href="" class="btn btn-secondary" ><span class="fa fa-chevron-circle-down"></span> more</a>
					</div>
				</div>
				






  
</div>
  </div>
							  <div style="clear:both"></div>
						   //model loop end    
                            }
					}
					else
								{
								  <div class="ViewMessage"> <i class="fa fa-info-circle"></i> No Record Available!</div>
					}
               </div>       
  			   @if (Model.list.Count > 0)
                {
                    <div id="pagination" class="MyPagination1">
                        @Html.PagedListPager(Model.list, page => Url.Action(ActionNameUrl, "T_ExportDataLogstatus", getSortHtmlAttributes(null, true, page, false)))
                        <div class="fixPageSize">
                            Page Size :
                            @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
							, new {@class="ignorefield", @id = "pagesizelistT_ExportDataLogstatus",
							 @onchange = @Html.Raw("pagesizelistChange(event,'T_ExportDataLogstatus','"
							  + @User.JavaScriptEncodedName + "')"),
							 @Url = Html.Raw(@Url.Action(ActionNameUrl, "T_ExportDataLogstatus",
							 getSortHtmlAttributes(Model.CurrentSort, Model.Pages == 1 ? false : true,
							 null, false), null)) })
							<span style="text-align:right;"> Total Count: @(Model.list.TotalItemCount)</span>
                        </div>
                    </div>
                }
				@Html.DropDownList("EntityT_ExportDataLogstatusDisplayValue", null,null, new { @Style = "display:none;" })
				</div>
            </div>
        </div>
 </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        loadGallery(true, 'a.thumbnail');
        //This function disables buttons when needed
        function disableButtons(counter_max, counter_current) {
            $('#show-previous-image, #show-next-image').show();
            if (counter_max == counter_current) {
                $('#show-next-image').hide();
            } else if (counter_current == 1) {
                $('#show-previous-image').hide();
            }
        }
        function loadGallery(setIDs, setClickAttr) {
            var current_image,
                selector,
                counter = 0;
            $('#show-next-image, #show-previous-image').click(function () {
                if ($(this).attr('id') == 'show-previous-image') {
                    current_image--;
                } else {
                    current_image++;
                }
                selector = $('[data-image-id="' + current_image + '"]');
                updateGallery(selector);
            });
            function updateGallery(selector) {
                var $sel = selector;
                current_image = $sel.data('image-id');
                $('#image-gallery-caption').text($sel.data('caption'));
                $('#image-gallery-title').text($sel.data('title'));
                $('#image-gallery-image').attr('src', $sel.data('image'));
                disableButtons(counter, $sel.data('image-id'));
            }
            if (setIDs == true) {
                $('[data-image-id]').each(function () {
                    counter++;
                    $(this).attr('data-image-id', counter);
                });
            }
            $(setClickAttr).on('click', function () {
                updateGallery($(this));
            });
        }
    });
</script>

