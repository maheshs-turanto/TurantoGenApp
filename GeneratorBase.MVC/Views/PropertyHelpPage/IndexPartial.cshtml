@model PagedList.IPagedList<GeneratorBase.MVC.Models.PropertyHelpPage>
@using PagedList.Mvc;
@{
    var EntityReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "PropertyHelpPage");
    var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "PropertyHelpPage");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Property Help Page";

    if (ViewBag.IsPartial != null && ViewBag.IsPartial == true)
    {
        Layout = null;
    }
}


<link href='@Url.Content("~/Scripts/summernote.css")' rel='stylesheet' type='text/css' />
<script src='@Url.Content("~/Scripts/summernote.js")' type='text/javascript'></script>
<div id="PropertyHelpPage">
    <style>
        .table-responsive > .fixed-column {
            position: absolute;
            display: block;
            width: auto;
            border: 0px solid transparent;
            border-top: 1px solid #c3ddec;
        }

        .fixed-column th {
            background: #fff;
        }

        .fixed-column td {
            background: #fff;
        }
    </style>
    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
        <table class="table table-hover table-striped">
            <thead>
                <tr>
                    @if (User.CanView("PropertyHelpPage", "PropertyHelpOfEntityID"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "PropertyHelpOfEntityID");
                        <th scope="col" class="col1" @(Convert.ToString(ViewData["HostingEntity"]) == "EntityPage" && Convert.ToString(ViewData["AssociatedType"]) == "PropertyHelpOfEntity" ? "hidden" : "")>
                            @SortPropertyName.DisplayName
                        </th>
                    }
                    @if (User.CanView("PropertyHelpPage", "PropertyName"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "PropertyName");
                        <th scope="col" class="col2">
                            @SortPropertyName.DisplayName
                        </th>
                    }
                    @if (User.CanView("PropertyHelpPage", "PropertyDataType"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "PropertyDataType");
                        <th scope="col" class="col3">
                            @SortPropertyName.DisplayName
                        </th>
                    }
                    @if (User.CanView("PropertyHelpPage", "ObjectType"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "ObjectType");
                        <th scope="col" class="col4">
                            @SortPropertyName.DisplayName
                        </th>
                    }
                    @if (User.CanView("PropertyHelpPage", "Tooltip"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "Tooltip");
                        <th scope="col" class="col5">
                            @SortPropertyName.DisplayName
                        </th>
                    }
                    @if (User.CanView("PropertyHelpPage", "HelpText"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "HelpText");
                        <th scope="col" class="col6">
                            @SortPropertyName.DisplayName
                        </th>
                    }
                    @if (User.CanView("PropertyHelpPage", "EntityName"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "EntityName");
                        <th scope="col" class="col7" @(Convert.ToString(ViewData["HostingEntity"]) == "EntityPage" && Convert.ToString(ViewData["AssociatedType"]) == "PropertyHelpOfEntity" ? "hidden" : "")>
                            @SortPropertyName.DisplayName
                        </th>
                    }
                    @if (User.CanView("PropertyHelpPage", "Disable"))
                    {
                        var SortPropertyName = EntityReflector.Properties.FirstOrDefault(q => q.Name == "Disable");
                        <th scope="col" class="col8">
                            @SortPropertyName.DisplayName
                        </th>
                    }
                </tr>
            </thead>
            @foreach (var item in Model)
            {
                <tr scope="row">

                    @if (User.CanView("PropertyHelpPage", "PropertyHelpOfEntityID"))
                    {
                        <td style="display:none;">
                            @ModelReflector.Entities.FirstOrDefault(p => p.Name == item.EntityName).DisplayName
                        </td>
                    }
                    @if (User.CanView("PropertyHelpPage", "PropertyName"))
                    {
                        <td>
                            @if (item.ObjectType == "Group")
                            {@item.GroupName}
                            else if (item.ObjectType == "Verb")
                            {@item.PropertyName}
							//instruction feature
                            else if (item.ObjectType == "Instruction")
                            {@item.PropertyName}
                            else
                            {
                                @ModelReflector.Entities.FirstOrDefault(p => p.Name == item.EntityName).Properties.FirstOrDefault(p => p.Name == item.PropertyName).DisplayName
                            }
                        </td>
                    }
                    @if (User.CanView("PropertyHelpPage", "PropertyDataType"))
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.PropertyDataType)
                        </td>
                    }
                    @if (User.CanView("PropertyHelpPage", "ObjectType"))
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.ObjectType)
                        </td>
                    }

                    @if (User.CanView("PropertyHelpPage", "Tooltip"))
                    {
                        <td ondblclick="tdDoubleClickPropertyHelp(this);">
                            @if (User.CanEdit("PropertyHelpPage", "Tooltip"))
                            {
                                <div style="display:none;">
                                    @Html.TextArea("Tooltip" + item.Id, item.Tooltip, new { @controlname = "Tooltip", @onblur = "SavePropertyValueHome(this,'PropertyHelpPage'," + item.Id + ",'" + item.Tooltip + "','" + Url.Action("SavePropertyValue") + "','" + item.EntityName + "','" + item.PropertyDataType + "','" + item.PropertyName + "','" + item.ObjectType + "');" })
                                    @Html.ValidationMessageFor(model => item.Tooltip)
                                </div>
                            }
                            @Html.DisplayFor(modelItem => item.Tooltip)
                        </td>
                    }
                    @if (User.CanView("PropertyHelpPage", "HelpText"))
                    {
                        <td ondblclick="tdDoubleClickPropertyHelp(this);">
                            @if (User.CanEdit("PropertyHelpPage", "HelpText"))
                            {
                                <div style="display:none;">

                                    @using (Html.BeginForm("SavePropertyHelpPageForHelpText", "EntityHelpPage", FormMethod.Post, new { enctype = "multipart/form-data", @id = "frmPropertyHelpPage" + item.PropertyName + item.Id }))
                                    {

                                        @Html.Hidden("prop" + item.PropertyName + item.Id, item.Id)
                                        @Html.Hidden("Tooltip" + item.PropertyName + item.Id, item.Tooltip)
                                        @Html.Hidden("EntityName" + item.PropertyName + item.Id, item.EntityName)
                                        @Html.Hidden("PropertyDataType" + item.PropertyName + item.Id, item.PropertyDataType)
                                        @Html.Hidden("ObjectType" + item.PropertyName + item.Id, item.ObjectType)
                                        @Html.Hidden("PropertyName" + item.PropertyName + item.Id, item.PropertyName)
                                        @Html.Hidden("PropertyHelpOfEntityID" + item.PropertyName + item.Id, item.PropertyHelpOfEntityID)
                                        @Html.TextArea("HelpText" + item.PropertyName + item.Id, item.HelpText, new { @id = "HelpText" + item.PropertyName + item.Id })
                                        @Html.ValidationMessageFor(model => item.HelpText)
                                        <a type="submit" name="@Html.Raw("btnsavePropertyHelp"+ item.PropertyName+ item.Id)" id="@Html.Raw("btnsavePropertyHelp"+ item.PropertyName+ item.Id)" alt="Save" title="Save"
                                           class="btn btn-white btn-white btn-sm" onclick="SavePropertyHelpText(@Html.Raw("event, this,'"+item.PropertyName +"','"+item.Id + "','" + Url.Action("SavePropertyHelpPageForHelpText", "PropertyHelpPage") + "'"))">
                                            <i class="fa fa-floppy-o"></i> Save
                                        </a>
                                        <script type='text/javascript'>
                                            $(document).ready(function () {
                                                @Html.Raw("$('#HelpText" + item.PropertyName + item.Id + "').summernote();");
                                                @Html.Raw("'HelpText" + item.PropertyName + item.Id + "'");
                                            });
                                        </script>
                                    }
                                </div>

                            }
                            <label style="font-weight:initial;">@Html.Raw(item.HelpText)</label>
                        </td>
                    }
                    @if (User.CanView("PropertyHelpPage", "Disable"))
                    {
                        <td ondblclick="tdDoubleClickPropertyHelp(this);">
                            @if (User.CanView("PropertyHelpPage", "Disable"))
                            {
                                <div style="display:none;">
                                    <input type="checkbox" name="Disable_@item.Id" id="Disable_@item.Id" value="@(item.Disable.HasValue && item.Disable.Value ? "true" : "false")" controlname="Disable"
                                           onchange="SavePropertyValueHome(this,'PropertyHelpPage', @item.Id , @(item.Disable.HasValue && item.Disable.Value ? "true" : "false"),'@Url.Action("SavePropertyValue")','@item.EntityName','@item.PropertyDataType','@item.PropertyName','@item.ObjectType');" @(item.Disable.HasValue && item.Disable.Value ? "checked=checked" : "") />
                                </div>
                            }
                            @Html.ValueFor(modelItem => item.Disable)
                        </td>
                    }
                    @if (User.CanView("PropertyHelpPage", "EntityName"))
                    {
                        <td @(Convert.ToString(ViewData["HostingEntity"]) == "EntityPage" && Convert.ToString(ViewData["AssociatedType"]) == "PropertyHelpOfEntity" ? "hidden" : "")>
                            @Html.DisplayFor(modelItem => item.EntityName)
                        </td>
                    }
                </tr>
            }
        </table>
        <div style="display:none;">
            <a id="PropertyHelpPageSearchCancel" type="button" class="btn btn-white collapse-data-btn tip-top" onclick="CancelSearch('PropertyHelpPage','@Html.Raw(Url.Action("Index", "PropertyHelpPage", new { HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now.Ticks.ToString()}))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top" alt="Refresh Grid" title="Refresh Grid">
                <span class="fa fa-refresh"></span>
            </a>
        </div>
    </div>
</div>
<script>
    function tdDoubleClickPropertyHelp(obj) {
        if (!$(obj).hasClass("edit")) {
            var divcontrol = $(obj).find("div");
            var controltype = $(obj).attr("controltype");
            firstControl = divcontrol.find(':first');
            if (firstControl.length > 0 && firstControl.is('select')) {
                $(obj).html("<div class='ChosenWrapper'>" + divcontrol.html().replace("class=\"form-control\"", "class=\"chosen-select form-control\"") + "</div>");
                var config = {
                    '.chosen-select': {},
                    '.chosen-select-deselect': { allow_single_deselect: true },
                    '.chosen-select-no-single': { disable_search_threshold: 10 },
                    '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                    '.chosen-select-width': { width: "95%" }
                }
                for (var selector in config) {
                    $(selector).chosen(config[selector]);
                }
            } else {
                //$(divcontrol).show();
                $(obj).find("div:first").show();
                $("label", $(obj)).hide();
            }
            $(obj).addClass("edit");
            try {
                document.getElementById(firstControl.attr("id")).focus();
                if (firstControl.is('select')) {
                    $("#" + firstControl.attr("id")).trigger("chosen:open");
                }
            } catch (ex) { }
        }
    }
    function SavePropertyHelpText(e, obj, PropertyName, Id, url) {
        var form = $("#frmPropertyHelpPage" + PropertyName + Id);
        var fd = form.serialize();
        try {
            var fd = new FormData(form[0]);
            fd.append('Id', $("#prop" + PropertyName + Id).val());
            fd.append('Tooltip', $("#Tooltip" + PropertyName + Id).val());
            fd.append('PropertyName', $("#PropertyName" + PropertyName + Id).val());
            if ($("#frmPropertyHelpPage" + PropertyName + Id).find(".note-editable").html() == "<br>")
                fd.append('HelpText', "");
            else
                fd.append('HelpText', $("#frmPropertyHelpPage" + PropertyName + Id).find(".note-editable").html());
            fd.append('PropertyDataType', $("#PropertyDataType" + PropertyName + Id).val());
            fd.append('PropertyHelpOfEntityID', $("#PropertyHelpOfEntityID" + PropertyName + Id).val());
            fd.append('ObjectType', $("#ObjectType" + PropertyName + Id).val());
            fd.append('EntityName', $("#EntityName" + PropertyName + Id).val());
            $.ajax({
                url: url,
                type: "POST",
                cache: false,
                data: fd,
                dataType: "json",
                processData: false,
                contentType: false,
                success: function (result) {
                    if (result == "Success") {
                        $('#PropertyHelpPageSearchCancel').click();
                    }
                }
            });
        } catch (ex) {
        }

    }
</script>