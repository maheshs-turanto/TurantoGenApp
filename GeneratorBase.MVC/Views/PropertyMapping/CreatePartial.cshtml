@model GeneratorBase.MVC.Models.PropertyMapping
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])' != null) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                 $('#' + hostingEntityName + 'ID').attr("lock","true");
				  $('#' + hostingEntityName + 'ID').trigger("change");
            }
        }
        catch (ex) { }
    });
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.PropertyMappingIsHiddenRule))
    {
        @Html.Raw(ViewBag.PropertyMappingIsHiddenRule);
    }
}
@using (Html.BeginForm("Create", "PropertyMapping",new {UrlReferrer = Convert.ToString(ViewData["PropertyMappingParentUrl"]), IsDDAdd = ViewBag.IsDDAdd }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
   @Html.AntiForgeryToken();
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
	<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>
    <div id="errorContainer" style="display: none">
        <div id="errorsMsg"></div>
        <div id="errors"></div>
    </div>
	
	<div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="card card-default AppForm">
                <div class="card-body">
               <div class="row">  
                   <h2 class="text-primary">@Html.DisplayFor(model => model.DisplayValue)</h2>       
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvPropertyName">
                                <div class='form-group'>
                                   <label class="" >@Html.LabelFor(model => model.PropertyName) <span class="text-danger-reg">*</span></label>
									<div class="input-group">
									
                                    @Html.TextBoxFor(model => model.PropertyName, new { @class = "form-control" })
                                    
									</div>
                                    @Html.ValidationMessageFor(model => model.PropertyName)
                                </div>
					</div>
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvDataName">
                                <div class='form-group'>
                                   <label class="" >@Html.LabelFor(model => model.DataName) </label>
									<div class="input-group">
									
                                    @Html.TextBoxFor(model => model.DataName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DataName)
									</div>
                                </div>
					</div>
						<div class='col-sm-12 col-md-12 col-xs-12' id="dvDataSource">
                                <div class='form-group'>
                                   <label class="" >@Html.LabelFor(model => model.DataSource) </label>
									<div class="input-group">
                                    @Html.TextAreaFor(model => model.DataSource, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DataSource)
									</div>
                                </div>
						</div>
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvSourceType">
                                <div class='form-group'>
                                   <label class="" >@Html.LabelFor(model => model.SourceType) </label>
									<div class="input-group">
									
                                    @Html.TextBoxFor(model => model.SourceType, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.SourceType)
									</div>
                                </div>
					</div>
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvMethodType">
                                <div class='form-group'>
                                   <label class="" >@Html.LabelFor(model => model.MethodType) </label>
									<div class="input-group">
									
                                    @Html.TextBoxFor(model => model.MethodType, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.MethodType)
									</div>
                                </div>
					</div>
					<div class='col-sm-6 col-md-6 col-xs-12' id="dvAction">
                                <div class='form-group'>
                                   <label class="" >@Html.LabelFor(model => model.Action) </label>
									<div class="input-group">
									
                                    @Html.TextBoxFor(model => model.Action, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Action)
									</div>
                                </div>
					</div>
				 <div class='col-sm-6 col-md-6 col-xs-12' id="dvEntityPropertyMappingID">
                        <div class='form-group'>
                            <label class="">@Html.LabelFor(model => model.EntityPropertyMappingID) </label>
							<div class="input-group">
                            <div class="input-group" style="width:100%;">
									@Html.DropDownList("EntityPropertyMappingID", null, "-- Select --", new {       @class = "chosen-select form-control", @HostingName = "EntityDataSource", @dataurl = Url.Action("GetAllValue", "EntityDataSource",new { caller = "EntityPropertyMappingID" }) })
                                @Html.ValidationMessageFor(model => model.EntityPropertyMappingID)
								@if ( User.CanAdd("EntityDataSource"))
                                    {
                                <div class="input-group-btn">
									<a class="btn btn-secondary ie8fix"  data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Entity Data Source','dvPopup','" + Url.Action("CreateQuick", "EntityDataSource", new { UrlReferrer = Request.Url.PathAndQuery, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop = true }) + "')")">
										<span class="fa fa-plus"></span>
                                    </a>
                                </div>
								}
                            </div>
							</div>
                        </div>
                    </div>
       </div>
                        </div>
                    </div>
                </div>
        </div>
          @Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["PropertyMappingParentUrl"] }, new { @onclick = "", @class = "btn btn-secondary" })
	<input type="submit" name="command" value="Create" class="btn btn-primary" />
    if (ViewBag.IsDDAdd == null && User.CanEdit("PropertyMapping"))
    {
	<input type="submit" name="command" value="Create & Continue" class="btn btn-primary" />
	}
	 <input type="hidden" name="hdncommand" value="" />
	<br/><br/>
}
	<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
	<script>
            $("input[type='submit']").click(function () {
                var $this = $(this);
                $('input:hidden[name="hdncommand"]').val($this.val());
            });
	</script>
@{
    var businessrule = User.businessrules.Where(p => p.EntityName == "PropertyMapping").ToList();
    if ((businessrule != null && businessrule.Count > 0))
    {
        <script>
            $("form").submit(function () {
                var flag = true;
                
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "@Url.Action("GetMandatoryProperties", "PropertyMapping")",
                    data: $(this).serialize(),
                     success: function (data) {
                        $('[businessrule="mandatory"]').each(function () {
                            $(this).removeAttr('required');
                        });
                        document.getElementById('ErrMsg').innerHTML = "";
                        for (var key in data) {
                            if ($.trim($('#' + key).val()).length == 0 && $.trim($("input[type='radio'][name='" + key + "']:checked").val()).length == 0)
                            {
                                $('#' + key).attr('required', 'required');
                                $('#' + key).attr('businessrule', 'mandatory');
                                $("input[type='radio'][name='" + key + "']").attr('required', 'required');
                                $("input[type='radio'][name='" + key + "']").attr('businessrule', 'mandatory');
                                flag = false;
                                document.getElementById('ErrMsg').innerHTML += data[key] + " is Mandatory.<br/>";
                            }
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
                return flag;
            });
        </script>
    }
    else
    {
           
    }
}


