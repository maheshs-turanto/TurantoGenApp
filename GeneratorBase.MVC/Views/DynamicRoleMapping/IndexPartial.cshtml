@model PagedList.IPagedList<GeneratorBase.MVC.Models.DynamicRoleMapping>
@using PagedList.Mvc;
@{
    var ActionNameUrl = "Index";
    if (HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper() == "FSEARCH")
    {
        ActionNameUrl = "FSearch";
    }
}
<div id="DynamicRoleMapping">
    <style>
        .table-responsive > .fixed-column {
            position: absolute;
            display: block;
            width: auto;
            border: 0px solid transparent;
            border-top: 1px solid #c3ddec;
        }

        .fixed-column th {
            background: #fff;
        }

        .fixed-column td {
            background: #fff;
        }
    </style>
    <script type="text/javascript">
        $(document).ready(function () {
            $(".pagination a").click(function (e) {
                //PaginationClick(e,'DynamicRoleMapping')
                PaginationClick(e, 'DynamicRoleMapping', '@User.JavaScriptEncodedName')
            })
            if ("@HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString().ToUpper()" == "FSEARCH") {
                $("#fsearchDynamicRoleMapping").addClass('in');
            }
            $("#SearchStringDynamicRoleMapping").keypress(function (e) {
                if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                    $("#DynamicRoleMappingSearch").bind("click", (function () {
                    }));
                    $('#DynamicRoleMappingSearch').trigger("click");
                    return false;
                }
            })
            $("#btnShowHideDynamicRoleMapping").mouseup(function () {
                if (document.getElementById('ColumnShowHideDynamicRoleMapping').className == 'collapse') {
                    $('#lblDynamicRoleMapping').css('display', 'none');
                }
            })
        });
    </script>
    @functions {
        object getSortHtmlAttributes(string sortby, bool IsPaging, int? page, bool? IsExport)
        {
            if (IsPaging)
            {
                return new
                {
                    page,
                    sortBy = ViewBag.CurrentSort,
                    isAsc = ViewBag.IsAsc,
                    currentFilter = ViewBag.CurrentFilter,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    HostingEntityID = ViewData["HostingEntityID"],
                    IsExport = IsExport,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                    Flag = Request.QueryString["Flag"],
                    search = Request.QueryString["search"],
                };
            }
            else
            {
                return new
                {
                    sortBy = sortby,
                    currentFilter = Request.QueryString["currentFilter"],
                    searchString = Request.QueryString["searchString"],
                    isAsc = (ViewBag.IsAsc == "ASC" ? "DESC" : ""),
                    page = ViewBag.Pages,
                    HostingEntity = @Convert.ToString(ViewData["HostingEntity"]),
                    HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]),
                    AssociatedType = @Convert.ToString(ViewData["AssociatedType"]),
                    IsExport = IsExport,
                    FSFilter = ViewBag.FSFilter == null ? "Fsearch" : ViewBag.FSFilter,
                    IsFilter = @Convert.ToBoolean(ViewData["IsFilter"]),
                    Flag = Request.QueryString["Flag"],
                    search = Request.QueryString["search"],
                };
            }
        }
    }
  
            <div class="card">
                <div class="card-body" >
                    <div class="btn-group">
                        @if (User.CanAdd("DynamicRoleMapping"))
                        {
                            <a href="#"  class="btn btn-secondary" data-placement="top" data-original-title="Quick Add" data-toggle="modal" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Dynamic Role','dvPopup','" + Url.Action("CreateQuick", "DynamicRoleMapping", new { UrlReferrer = Request.Url.PathAndQuery, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), TS = DateTime.Now }) + "')")">
                                <span class="fa fa-plus-circle"></span> Quick Add
                            </a>
                        }
                    </div>

                    <div class="btn-group">                        
                        <a class="btn btn-secondary dropdown-toggle" data-original-title="Bulk Actions" data-toggle="dropdown" type="button" href="#">
                            <span class="fa fa-wrench"></span> Bulk
                        </a>
                        <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenuButton">
                            <li>
                                @if (User.CanDelete("DynamicRoleMapping"))
                                {
                                    <a class="dropdown-item"  onclick="PerformBulkOperation(this,'DynamicRoleMapping','Bulk Delete','@Url.Action("DeleteBulk", "DynamicRoleMapping")');">Delete</a>
                                }
                            </li>
                        </ul>
                    </div>
                    <div class="pull-right">
                        <div class="input-group">
                            @Html.TextBox("SearchStringDynamicRoleMapping", ViewBag.CurrentFilter as string, null, new { @class = "form-control fixsearchbox", @value = ViewBag.Homeval, @placeholder = "Search" })
                            <div class="input-group-btn">
                                <a id="DynamicRoleMappingSearch" onclick="SearchClick(event, 'DynamicRoleMapping', '@Html.Raw(Url.Action("Index", "DynamicRoleMapping", new { IsFilter = ViewData["IsFilter"], IsDeepSearch = false, searchString = "_SearchString", HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), SearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName');" data-original-title="Grid Search" class="btn btn-white  tip-top"><span class="fa fa-search"></span></a>
                                <button id="DynamicRoleMappingCancel" type="button" class="btn btn-secondary collapse-data-btn" onclick="CancelSearch('DynamicRoleMapping','@Html.Raw(Url.Action("Index", "DynamicRoleMapping", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName')" data-original-title="Clear Search" data-placement="top">
                                    <span class="fa fa-plus-circle"></span>
                                </button>
                                <button id="DynamicRoleMappingSearchCancel" type="button" class="btn btn-secondary collapse-data-btn" onclick="CancelSearch('DynamicRoleMapping','@Html.Raw(Url.Action("Index", "DynamicRoleMapping", new {IsFilter=ViewData["IsFilter"], HostingEntity = Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = Convert.ToString(ViewData["HostingEntityID"]), AssociatedType = Convert.ToString(ViewData["AssociatedType"]), ClearSearchTimeStamp = DateTime.Now }))','@User.JavaScriptEncodedName')" data-original-title="Refresh Grid" data-placement="top">
                                    <span class="fa fa-refresh"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (ViewData["HostingEntity"] == null)
                    {
                        if (ViewBag.SearchResult != "")
                        {
                            <div id="fsearchDynamicRoleMapping" class="collapse MessageFSearch">
                                @Html.Raw(Html.Encode(ViewBag.SearchResult).Replace(Environment.NewLine, "<br/>"))
                                <a href="@Url.Action("Index", "DynamicRoleMapping")" style="float:right"><span class="fa fa-remove-sign"></span> Clear</a>
                            </div>
                        }
                    }
                  
                    <div id="Des_Table" class="table-responsive" style="overflow-x:auto;">
                        <table class="table table-hover table-striped default-bordered default-condensed">
                            <thead>
                                <tr>
                                    <th class="col2" style="width:20px;">
                                        <input type="checkbox" class="tip-top" data-placement="top" data-original-title="Select All" onclick="SelectAllRows(this);" />
                                        @Html.Hidden("SelectedItems")
                                    </th>
                                    <th class="col1" style="width:70px;">Actions</th>
                                    @if (User.CanView("DynamicRoleMapping", "EntityName"))
                                    {
                                        <th class="col2">
                                            @Html.ActionLink("Entity Name", ActionNameUrl, "DynamicRoleMapping", getSortHtmlAttributes("EntityName", false, null, false), new { @onclick = "SortLinkClick(event,'DynamicRoleMapping');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "EntityName")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "EntityName")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("DynamicRoleMapping", "RoleId"))
                                    {
                                        <th class="col3">
                                            @Html.ActionLink("Role", ActionNameUrl, "DynamicRoleMapping", getSortHtmlAttributes("RoleId", false, null, false), new { @onclick = "SortLinkClick(event,'DynamicRoleMapping');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "RoleId")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "RoleId")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("DynamicRoleMapping", "Condition"))
                                    {
                                        <th class="col4">
                                            @Html.ActionLink("Entity Column", ActionNameUrl, "DynamicRoleMapping", getSortHtmlAttributes("Condition", false, null, false), new { @onclick = "SortLinkClick(event,'DynamicRoleMapping');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "Condition")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "Condition")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("DynamicRoleMapping", "Value"))
                                    {
                                        <th class="col5">
                                            @Html.ActionLink("Value", ActionNameUrl, "DynamicRoleMapping", getSortHtmlAttributes("Value", false, null, false), new { @onclick = "SortLinkClick(event,'DynamicRoleMapping');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "Value")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "Value")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                    @if (User.CanView("DynamicRoleMapping", "UserRelation"))
                                    {
                                        <th class="col6">
                                            @Html.ActionLink("User Relation", ActionNameUrl, "DynamicRoleMapping", getSortHtmlAttributes("UserRelation", false, null, false), new { @onclick = "SortLinkClick(event,'DynamicRoleMapping');" })
                                            @if (ViewBag.IsAsc == "DESC" && ViewBag.CurrentSort == "UserRelation")
                                            {<i class="fa fa-sort-desc"></i>}
                                            @if (ViewBag.IsAsc == "ASC" && ViewBag.CurrentSort == "UserRelation")
                                            {<i class="fa fa-sort-asc"></i>}
                                        </th>
                                    }
                                </tr>
                                @foreach (var item in Model)
                                {
                                    var Entity = ModelReflector.Entities.FirstOrDefault(p => p.Name == item.EntityName);
                                    var EntityDisplayName = item.EntityName;
                                    if (Entity != null)
                                    {
                                        EntityDisplayName = Entity.DisplayName;
                                    }
                                    <tr>
                                        <td>
                                            <input type="checkbox" id="@item.Id" onclick="SelectForBulkOperation(this,'@item.Id');" />
                                        </td>
                                        <td>
                                            <div>
                                                <div class="btn-group">
                                                    <button class="btn btn-secondary pull-right dropdown-toggle" data-toggle="dropdown" type="button">
                                                        Action                                                       
                                                    </button>
                                                    <ul class="dropdown-menu pull-left" aria-labelledby="dropdownMenuButton">
                                                        <li>
                                                            @if (User.CanDelete("DynamicRoleMapping"))
                                                            {
                                                                <a class="dropdown-item" href="@Url.Action("Delete", "DynamicRoleMapping", new { id = item.Id, UrlReferrer = Request.Url.PathAndQuery, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)"><i class="fa fa-remove-sign"></i>  Delete</a>
                                                            }
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </td>
                                        @if (User.CanView("DynamicRoleMapping", "EntityName"))
                                        {
                                            <td>
                                                @EntityDisplayName
                                            </td>
                                        }
                                        @if (User.CanView("DynamicRoleMapping", "RoleId"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.RoleId)
                                            </td>
                                        }
                                        @if (User.CanView("DynamicRoleMapping", "Condition"))
                                        {
                                            if (Entity != null)
                                            {
                                                var PropName = Entity.Properties.FirstOrDefault(p => p.Name == item.Condition);
                                                var PropDispName = PropName != null ? PropName.DisplayName : item.Condition;
                                                <td>
                                                    @PropDispName
                                                </td>
                                            }
                                            else
                                            {
                                                <td>Invalid - Delete and Recreate</td>}
                                        }
                                        @if (User.CanView("DynamicRoleMapping", "Value"))
                                        {
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Value)
                                            </td>
                                        }
                                        @if (User.CanView("DynamicRoleMapping", "UserRelation"))
                                        {
                                            if (Entity != null)
                                            {
                                                var AssoName = Entity.Associations.FirstOrDefault(p => p.AssociationProperty == item.UserRelation);
                                                var AssoDispName = AssoName != null ? AssoName.DisplayName : item.UserRelation;
                                                <td>
                                                    @AssoDispName
                                                    @*@Html.DisplayFor(modelItem => item.UserRelation)*@
                                                </td>
                                            }
                                            else
                                            {
                                                <td>Invalid</td>}
                                        }
                                    </tr>
                                }
                        </table>
                    </div>
                    <ul id="Mob_List" class="list-group d-none">
                        @foreach (var item in Model)
                        {
                            <li class="list-group-item">
                                @if (User.CanView("DynamicRoleMapping", "EntityName"))
                                {
                                    <p>
                                        <span class="text-primary"> Entity Name </span> : <span>
                                            @Html.DisplayFor(modelItem => item.EntityName)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("DynamicRoleMapping", "RoleId"))
                                {
                                    <p>
                                        <span class="text-primary"> Role </span> : <span>
                                            @Html.DisplayFor(modelItem => item.RoleId)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("DynamicRoleMapping", "Condition"))
                                {
                                    <p>
                                        <span class="text-primary"> Entity Column </span> : <span>
                                            @Html.DisplayFor(modelItem => item.Condition)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("DynamicRoleMapping", "Value"))
                                {
                                    <p>
                                        <span class="text-primary"> Value </span> : <span>
                                            @Html.DisplayFor(modelItem => item.Value)
                                        </span>
                                    </p>
                                }
                                @if (User.CanView("DynamicRoleMapping", "UserRelation"))
                                {
                                    <p>
                                        <span class="text-primary"> User Relation </span> : <span>
                                            @Html.DisplayFor(modelItem => item.UserRelation)
                                        </span>
                                    </p>
                                }
                                <span class="label label-danger text-linkwhite">
                                    @if (User.CanDelete("DynamicRoleMapping"))
                                    {
                                        @Html.ActionLink("Delete", "Delete", "DynamicRoleMapping", new { id = item.Id, UrlReferrer = Request.Url.PathAndQuery, AssociatedType = ViewData["AssociatedType"], HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]) }, null)
                                    }
                                </span>
                            </li>
                        }
                    </ul>
                    @if (Model.Count > 0)
                    {
                        <div id="pagination" class="MyPagination1">
                            @Html.PagedListPager(Model, page => Url.Action(ActionNameUrl, "DynamicRoleMapping", getSortHtmlAttributes(null, true, page, false)))
                            <div class="fixPageSize">
                                Page Size :
                                @Html.DropDownList("PageSize", new SelectList(new Dictionary<string, int> { { "10", 10 }, { "20", 20 }, { "50", 50 }, { "100", 100 } }, "Key", "Value")
                            , new
                            {
                                @id = "pagesizelistDynamicRoleMapping",
                                @onchange = @Html.Raw("pagesizelistChange(event,'DynamicRoleMapping','"
                                 + @User.JavaScriptEncodedName + "')"),
                                @Url = Html.Raw(@Url.Action(ActionNameUrl, "DynamicRoleMapping",
                                getSortHtmlAttributes(ViewBag.CurrentSort, ViewBag.Pages == 1 ? false : true,
                                null, false), null))
                            })
                                <span style="text-align:right;"> Total Count: @(Model.TotalItemCount)</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        
</div>
