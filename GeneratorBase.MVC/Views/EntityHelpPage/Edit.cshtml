@model GeneratorBase.MVC.Models.EntityHelpPage
@using PagedList;
@{
    ViewBag.Title = "Edit Entity Help Page";
    var EditPermission = User.CanEditItem("EntityHelpPage", Model, User);
    var DeletePermission = User.CanDeleteItem("EntityHelpPage", Model, User);
    var EntityDisplayNameReflector = ModelReflector.Entities.FirstOrDefault(p => p.Name == "EntityHelpPage");
    var EntityDisplayName = EntityDisplayNameReflector != null ? EntityDisplayNameReflector.DisplayName : "Entity Help Page";
    if (ViewBag.IsPartial != null && ViewBag.IsPartial == true)
    {
        Layout = null;
    }
}
@functions {
    object getHtmlAttributes(string Property)
    {
        if (User.CanEdit("EntityHelpPage", Property))
        {
            return new { @class = "form-control" };
        }
        return new { @class = "form-control", @readonly = "readonly" };
    }
}
<link href='@Url.Content("~/Scripts/summernote.css")' rel='stylesheet' type='text/css' />
<script src='@Url.Content("~/Scripts/summernote.js")' type='text/javascript'></script>
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])'.length > 0) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                $('#' + hostingEntityName + 'ID').attr("lock", "true");
                // $('#' + hostingEntityName + 'ID').trigger("change");
                $("input[type='radio'][name='" + hostingEntityName + "ID']").each(function () {
                    if (!this.checked)
                        this.closest("li").style.display = "none";
                });
            }
            if ($.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') != null) {
                $('a[href="#' + $.cookie('@User.JavaScriptEncodedName@Model.Id' + 'TabCookie') + '"]').click();
            }
            var Value = $('#EntityOfEntityHelpID option:selected').val();
            if (Value.length > 0) {
                Value = $('#EntityOfEntityHelpID option:selected').text();
                $("#EntityNameDD").val(Value);
                var entvalue = $('#EntityNameDD option:selected').val();
                $("#EntityName").val(entvalue);
            }
        }
        catch (ex) { }
    });
    function SetEntityName(obj, entityName) {

        var Value = $('#EntityOfEntityHelpID option:selected').val();
        if (Value.length > 0) {
            $("#EntityNameDD").val(entityName);
            var entvalue = $('#EntityNameDD option:selected').val();
            $("#EntityName").val(entvalue);
        }
        else
            $("#EntityName").val();

    }
</script>
@{
    if (!string.IsNullOrEmpty(ViewBag.EntityHelpPageIsHiddenRule))
    {
        @Html.Raw(ViewBag.EntityHelpPageIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.EntityHelpPageIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.EntityHelpPageIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.EntityHelpPageIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.EntityHelpPageIsSetValueUIRule);
    }
}
<div class="content-heading">
    <div class="col-lg-6">

        <strong>
            <a href="@Url.Action("Index")"> @EntityDisplayName</a>

           <small>
                Edit - <span id="HostingEntityDisplayValue" class="EntityDisplayName" title="@Html.DisplayFor(model => model.DisplayValue)">@Html.DisplayFor(model => model.DisplayValue)</span>
               </small>
</strong>
    </div>
    <div class="col-lg-6">
        @if (ViewBag.IsPartial == null && EditPermission)
        {
            <div class="pull-right">
                <button class="btn btn-primary btn-small pull-right" id="nextEdit" onclick="@Html.Raw("nextFunEdit('EntityHelpPage',event,'hdnNextPrevId')")" alt="Next" title="Next" style="border-radius:0px !important;"><i class="fa fa-chevron-right"></i></button>
                @Html.DropDownList("EntityEntityHelpPageDisplayValueEdit", null, null, new { @onchange = "FillDisplayValueEditPage('EntityHelpPage','frmEntityHelpPage','" + Model.Id + "',event)", @class = "pull-right", @Style = "height: 23px;width: 170px;font-size: small;" })
                <button class="btn btn-primary btn-small pull-right" id="prevEdit" onclick="@Html.Raw("prevFunEdit('EntityHelpPage',event,'hdnNextPrevId')")" alt="Prev" title="Prev" style="border-radius:0px !important;"><i class="fa fa-chevron-left"></i></button>
            </div>}
    </div>
</div>
<input type="hidden" id="ErrMsg" />
<div id="errorContainerEdit" style="display: none">
    <div id="errorsMsgEdit"></div>
    <div id="errorsEdit"></div>
</div>
<div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
</div>
<div id="divDisplayBRmsgMandatory" style="display:none;">
</div>
<div id="divDisplayLockRecord" style="display:none;">
</div>
<div id="divDisplayBRReadOnly" style="display:none;">
</div>
<div id="divDisplayCodeFragment" style="display:none;">
</div>
<div class="wrapper wrapper-content animated fadeInRight ecommerce">
    <div class="tabs-container">
        <ul class="nav nav-tabs">
            <li class="nav-item"><a class="nav-link active" href="#Details" onclick="ClearTabCookie('@User.JavaScriptEncodedName@Model.Id');" data-toggle="tab" alt="Details" title="Details">Details</a></li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane container active" id="Details">
                @using (Html.BeginForm("Edit", "EntityHelpPage", new { UrlReferrer = Convert.ToString(ViewData["EntityHelpPageParentUrl"]) }, FormMethod.Post, new { enctype = "multipart/form-data", @id = "frmEntityHelpPage" }))
                {
                    Html.ValidationSummary(true);
                    Html.EnableClientValidation();
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.ConcurrencyKey)
                    <div class="col-md-12 col-sm-12 col-xs-12" style="padding:0px; margin:0px;">
                        <div class="card card-default AppForm">
                            <div class="card-body">
                                <div class="row">
                                    @if (User.CanView("EntityHelpPage", "EntityOfEntityHelpID"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvEntityOfEntityHelpID">
                                            <div class='form-group'>
                                                <label>@Html.LabelFor(model => model.EntityOfEntityHelpID) <span class="text-danger-reg">*</span></label>

                                                <div class="input-group" style="width:100%;">
                                                    @if (User.CanEdit("EntityHelpPage", "EntityOfEntityHelpID"))
                                                    {

                                                        @Html.DropDownList("EntityOfEntityHelpID", null, "-- Select --", new { @required = "required", @onchange = Html.Raw("SetEntityName(this,'" + Model.entityofentityhelp.EntityName + "')"), @class = "chosen-select form-control", @HostingName = "EntityPage", @dataurl = Url.Action("GetAllValue", "EntityPage", new { caller = "EntityOfEntityHelpID" }) })
                                                    }
                                                    else
                                                    {
                                                        @Html.HiddenFor(model => model.EntityOfEntityHelpID, new { @class = "form-control" })
                                                        @Html.DropDownList("EntityOfEntityHelpID", null, "-- Select --", new { @required = "required", @onchange = Html.Raw("FillDerivedDetails(this,event);"), @class = "chosen-select form-control", @disabled = "disabled", @HostingName = "EntityPage", @dataurl = Url.Action("GetAllValue", "EntityPage", new { caller = "EntityOfEntityHelpID" }) })
                                                    }
                                                    @Html.ValidationMessageFor(model => model.EntityOfEntityHelpID, "The Entity Name field is required.")
                                                </div>

                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.EntityOfEntityHelpID, new { @class = "form-control" })}
                                    @if (User.CanView("EntityHelpPage", "SectionName"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvSectionName">
                                            <div class='form-group' title="Section Name">
                                                <label>@Html.LabelFor(model => model.SectionName)  <span class="text-danger-reg">*</span> </label>


                                                @Html.TextBoxFor(model => model.SectionName, getHtmlAttributes("SectionName"))
                                                @Html.ValidationMessageFor(model => model.SectionName)

                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.SectionName, new { @class = "form-control" })}
                                    @if (User.CanView("EntityHelpPage", "Order"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvOrder">
                                            <div class='form-group' title="Order">
                                                <label>@Html.LabelFor(model => model.Order)  <span class="text-danger-reg">*</span> </label>


                                                @Html.TextBoxFor(model => model.Order, getHtmlAttributes("Order"))
                                                @Html.ValidationMessageFor(model => model.Order)

                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.Order, new { @class = "form-control" })}
                                    @if (User.CanView("EntityHelpPage", "SectionText"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvSectionText">
                                            <div class='form-group' title="Section Text">
                                                <label>@Html.LabelFor(model => model.SectionText) </label>
                                                @Html.ValidationMessageFor(model => model.SectionText)
                                                @Html.TextArea("SectionText", new { @id = "SectionText" })
                                                @*@Html.TextAreaFor(model => model.SectionText, new { @id = "summernote" })*@
                                                @Html.ValidationMessageFor(model => model.SectionText)
                                                <script>
                                                    $(document).ready(function () {
                                                        $("#SectionText").summernote();
                                                    });
                                                </script>


                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.SectionText, new { @class = "form-control" })}
                                    @if (User.CanView("EntityHelpPage", "Disable"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvDisable">
                                            <div class="form-group" title="Disable">
                                                <label>
                                                    @Html.LabelFor(model => model.Disable)
                                                </label>

                                                @Html.CheckBox("Disable", Model.Disable.HasValue ? Model.Disable : false)
                                                @Html.ValidationMessageFor(model => model.Disable)

                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.Disable, new { @class = "form-control" })}
                                    @if (User.CanView("EntityHelpPage", "EntityName"))
                                    {
                                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvEntityName" style="display:none;">
                                            <div class='form-group' title="Entity Name">
                                                <label>@Html.LabelFor(model => model.EntityName)   </label>
                                                @Html.TextBoxFor(model => model.EntityName, getHtmlAttributes("EntityName"))
                                                @Html.ValidationMessageFor(model => model.EntityName)
                                            </div>
                                        </div>
                                    }
                                    else
                                    { @Html.HiddenFor(model => model.EntityName, new { @class = "form-control" })}
                                </div>
                            </div>
                        </div>
                    </div>
                    @Html.AntiForgeryToken();
                                            if (ViewBag.IsPartial == null)
                                            {
                                                <a class="btn btn-secondary  pull-left formbuttonfix" onclick="goBack('@Url.Action("Index", "EntityHelpPage")');" alt="Cancel" title="Cancel">Cancel</a>
                                            }
                                            @*@Html.ActionLink("Cancel", "Cancel", new { UrlReferrer = ViewData["EntityHelpPageParentUrl"] }, new { @onclick = "", @class = "btn btn-default btn-sm pull-left formbuttonfix", @alt="Cancel", @title="Cancel" })*@if (EditPermission)
                                            {
                                                if (ViewBag.IsPartial == null)
                                                {
                                                    <input type="submit" name="command" value="Save" class="btn btn-primary pull-left formbuttonfix" alt="Save" title="Save" />
                                                }
                                                @*if (ViewBag.IsPartial == null)
                                            {
                                                <input type="submit" id="sevranBtnEdit" style="display:none;" name="command" value="SaveNextPrev" alt="SaveNextPrev" title="SaveNextPrev" />
                                                                            <input type="submit" name="command" value="Save & Stay" class="btn btn-primary btn-sm pull-left formbuttonfix" alt="Save & Stay" title="Save & Stay" />}
                                            <input type="hidden" name="hdncommand" value="" />
                                                                            <input type="hidden" name="hdnNextPrevId" value="" />*@
                                            }
                                            <div style="display:none;">
                                                @Html.DropDownList("EntityNameDD", null, "-- Select --", new { @required = "required", @class = "form-control" })
                                            </div>
                }
                @{
                    var dropmenubottom = false;
                }
                <div class="dropdown pull-left formbuttonfix" style="display:none" id="AddAssociationdropmenubottomEntityHelpPage">
                    <button type="button" class="btn btn-primary dropdown-toggle" id="dropdownMenu1" data-toggle="dropdown" alt="Add Association" title="Add Association">
                        Add
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu " role="menu" aria-labelledby="dropdownMenu1"></ul>
                </div>
                @if (!dropmenubottom || !EditPermission)
                {
                    <script>
                        $("#AddAssociationdropmenubottomEntityHelpPage").hide();
                    </script>
                }
                <div class="clearfix" style="clear:both; margin-bottom:8px"></div>
            </div>
        </div> <!-- /tab-content --><br />
        <br />
    </div>
</div>
<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
@{
    var businessruleforemailpage = User.businessrules.Where(p => p.EntityName == "EntityHelpPage").ToList();

    var ruleidsforemailpage = businessruleforemailpage.Select(q => q.Id).ToList();
    var typelistforemailpage = string.Join(",", (new GeneratorBase.MVC.Models.RuleActionContext()).RuleActions.Where(p => ruleidsforemailpage.Contains(p.RuleActionID.Value) && p.associatedactiontype.TypeNo.HasValue).Select(p => p.associatedactiontype.TypeNo.Value).Distinct().ToList());
    var isbrrequired = false;
    if (businessruleforemailpage != null && businessruleforemailpage.Count > 0)
    {
        isbrrequired = true;
    }
}
@{
    if (ViewBag.IsPartial == true)
    {
        <script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>
        <script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>
        <script type="text/javascript">
            var config = {
                '.chosen-select': {},
                '.chosen-select-deselect': { allow_single_deselect: true },
                '.chosen-select-no-single': { disable_search_threshold: 10 },
                '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                '.chosen-select-width': { width: "95%" }
            }
            for (var selector in config) {
                $(selector).chosen(config[selector]);
            }
        </script>
        <script>
            function CancelFromDivTab_EntityHelpPage() {
                var associationname = '@Convert.ToString(ViewData["AssociatedType"])';
                if (associationname != '' && associationname != null) {
                }
            }
            function EditFromDivTab_EntityHelpPage(obj) {
                $('input:hidden[name="hdncommand"]').val(obj);
                var associationname = '@Convert.ToString(ViewData["AssociatedType"])';
                var form2 = $("#frmEntityHelpPage");
                if (!form2.valid()) { return; }
                var form = "";
                form = $("#frmEntityHelpPage").serialize();
                if ('@isbrrequired') {
                    if (!ApplyBusinessRule(form))
                        return false;
                }
                var frmUrl = form2.attr('action') + "&RenderPartial=true";
                var fdata = new FormData(form2[0]);
                $.ajax({
                    url: frmUrl,
                    type: "POST",
                    cache: false,
                    data: fdata,
                    processData: false,
                    contentType: false,
                    success: function (result) {
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert('failed');
                        return false;
                    }
                });
            }
            function ApplyBusinessRule(form) {
                var flag = true;
                dataurl = "@Url.Action("businessruletype", "EntityHelpPage", new { ruleType = "OnEdit"})";
                flag = ApplyBusinessRuleOnSubmit(dataurl, "EntityHelpPage", false, "ErrMsg", form);
                //business rules on inline associations
                if (flag) {
                    $("#frmEntityHelpPage").find(':input').removeAttr('disabled');
                    $("#divDisplayBRmsgMandatory").hide();
                    $("#divDisplayBRmsgBeforeSaveProp").hide();
                    $("#divDisplayLockRecord").hide();
                    $("#divDisplayBRReadOnly").hide();
                }
                return flag;
            }
        </script>
    }
}
@{
    var businessrule = User.businessrules.Where(p => p.EntityName == "EntityHelpPage").ToList();
    if ((businessrule != null && businessrule.Count > 0))
    {
        var ruleids = businessrule.Select(q => q.Id).ToList();
        var typelist = string.Join(",", (new GeneratorBase.MVC.Models.RuleActionContext()).RuleActions.Where(p => ruleids.Contains(p.RuleActionID.Value) && p.associatedactiontype.TypeNo.HasValue).Select(p => p.associatedactiontype.TypeNo.Value).Distinct().ToList());
        <script>
            $(document).ready(function () {
                document.getElementById("ErrMsg").innerHTML = "";
                var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
                form = $("#frmEntityHelpPage");
                dataurl = "@Url.Action("businessruletype", "EntityHelpPage", new { ruleType = "OnEdit"})";
                ApplyBusinessRuleOnPageLoad("@typelist", dataurl, "EntityHelpPage", false, "ErrMsg", form);
                //business rules on inline associations
            });
        </script>
        <script>
            $("form").submit(function (event) {
                if (!$("#frmEntityHelpPage").valid()) return;
                document.getElementById("ErrMsg").innerHTML = "";
                var flag = true;
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
                form = $("#frmEntityHelpPage").serialize();
                dataurl = "@Url.Action("businessruletype", "EntityHelpPage", new { ruleType = "OnEdit"})";
                flag = ApplyBusinessRuleOnSubmit(dataurl, "EntityHelpPage", false, "ErrMsg", form);
                //business rules on inline associations
                if (flag) {
                    $('input:hidden[name="hdncommand"]').val($(this.id).context.activeElement.value);
                    if ($(document.activeElement).attr('id') == "nextEdit" || $(document.activeElement).attr('id') == "prevEdit")
                        $('input:hidden[name="hdncommand"]').val("SaveNextPrev");
                    $("#frmEntityHelpPage").find(':input').removeAttr('disabled');
                }
                return flag;
            });
        </script>
    }
    else
    {
        <script>
            $("input[type='submit']").click(function (event) {
                debugger;
                if (!$("#frmEntityHelpPage").valid()) return;
                if ($("#frmEntityHelpPage").find(".note-editable").html() == "<br>") {
                    $("#frmEntityHelpPage").find(".note-editable").html("");
                } else {
                    $("#SectionText").text($("#frmEntityHelpPage").find(".note-editable").html());
                }
                var $this = $(this);
                var actionName = $this.attr("actionName")
                if (actionName == undefined)
                    actionName = $this.val();
                $('input:hidden[name="hdncommand"]').val(actionName);
            });
        </script>
    }
}

<script type='text/javascript'>
    $(document).ready(function () {
        try {
            focusOnControl('frmEntityHelpPage');
        }
        catch (ex) { }
    });
    $(document).ready(function () {
        var RecIdEdit = $("#frmEntityHelpPage").find("input:hidden[name='Id']").val();
        $("#EntityEntityHelpPageDisplayValueEdit").val(RecIdEdit);
        var textedit = $("option:selected", $("#EntityEntityHelpPageDisplayValueEdit")).text();
        $("#EntityEntityHelpPageDisplayValueEdit").attr('data-toggle', 'tooltip')
        $("#EntityEntityHelpPageDisplayValueEdit").attr('title', textedit);
        var lastOptionValEdit = $('#EntityEntityHelpPageDisplayValueEdit option:last-child').val();
        var fristOptionValEdit = $('#EntityEntityHelpPageDisplayValueEdit option:first-child').val();
        if (lastOptionValEdit == RecIdEdit) {
            $('#nextEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
        }
        if (fristOptionValEdit == RecIdEdit)
            $('#prevEdit').attr({ "disabled": "true", "style": "background-color:#eeeeee !important; color:#969696 !important; border-color:#ccc !important" });
    });
</script>
