@model GeneratorBase.MVC.Models.EntityHelpPage
@{
    if (ViewBag.IsPartial == true)
    {
        <link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
        <link href="@Url.Content("~/Content/chosen.css")" rel="stylesheet" type="text/css" />
        <script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>
        <script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>
            <script type="text/javascript">
                var config = {
                    '.chosen-select': {},
                    '.chosen-select-deselect': { allow_single_deselect: true },
                    '.chosen-select-no-single': { disable_search_threshold: 10 },
                    '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                    '.chosen-select-width': { width: "95%" }
                }
                for (var selector in config) {
                    $(selector).chosen(config[selector]);
                }
            </script>}
}
@{
    if (!string.IsNullOrEmpty(ViewBag.EntityHelpPageIsHiddenRule))
    {
        @Html.Raw(ViewBag.EntityHelpPageIsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.EntityHelpPageIsGroupsHiddenRule))
    {
        @Html.Raw(ViewBag.EntityHelpPageIsGroupsHiddenRule);
    }
}
@{
    if (!string.IsNullOrEmpty(ViewBag.EntityHelpPageIsSetValueUIRule))
    {
        @Html.Raw(ViewBag.EntityHelpPageIsSetValueUIRule);
    }
}
<link href='@Url.Content("~/Scripts/summernote.css")' rel='stylesheet' type='text/css' />
<script src='@Url.Content("~/Scripts/summernote.js")' type='text/javascript'></script>
@using (Html.BeginForm("Create", "EntityHelpPage", new { UrlReferrer = Convert.ToString(ViewData["EntityHelpPageParentUrl"]), IsDDAdd = ViewBag.IsDDAdd }, FormMethod.Post, new { enctype = "multipart/form-data", id = "frmEntityHelpPage" }))
{
    @Html.AntiForgeryToken();
    Html.ValidationSummary(true);
    Html.EnableClientValidation();
    <input type="hidden" id="ErrMsg" />
    @*<label id="ErrMsg" class="text-primary small pull-right" style="color:red; vertical-align:middle; font-weight:100;"></label>*@
    <div id="errorContainer" style="display: none">
        <div id="errorsMsg"></div>
        <div id="errors"></div>
    </div>
    <div id="divDisplayThresholdLimit" style="display:none;">
    </div>
    <div id="divDisplayBRmsgMandatory" style="display:none;">
    </div>
    <div id="divDisplayBRmsgBeforeSaveProp" style="display:none;">
    </div>
    <div id="divDisplayCodeFragment" style="display:none;">
    </div>
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="AppForm">
                <div class="">
                    <div class="row">

                        <div class='col-sm-6 col-md-6 col-xs-12' id="dvEntityOfEntityHelpID" style="display:none;">
                            <div class='form-group'>
                                <label>@Html.LabelFor(model => model.EntityOfEntityHelpID) <span class="text-danger-reg">*</span></label>
                                <div class="input-group" style="width:100%;">
                                    @Html.DropDownList("EntityOfEntityHelpID", null, "-- Select --", new { @required = "required", @onchange = "SetEntityName(this);", @class = "chosen-select form-control", @HostingName = "EntityPage", @dataurl = Url.Action("GetAllValue", "EntityPage", new { caller = "EntityOfEntityHelpID" }) })
                                    @Html.ValidationMessageFor(model => model.EntityOfEntityHelpID, "The Entity Name field is required.")
                                    @if (User.CanAdd("EntityPage"))
                                    {
                                        <div class="input-group-btn">
                                            <a class="btn btn-default btn ie8fix" id="addEntityPage" data-target="#dvPopup" onclick="@Html.Raw("OpenPopUpEntity('addPopup','Entity Name','dvPopup','" + Url.Action("CreateQuick", "EntityPage", new { UrlReferrer = Request.Url.PathAndQuery, HostingEntityName = @Convert.ToString(ViewData["HostingEntity"]), HostingEntityID = @Convert.ToString(ViewData["HostingEntityID"]), IsAddPop = true }) + "')")">
                                                <span class="fa fa-plus"></span>
                                            </a>
                                        </div>
                                    }
                                </div>

                            </div>
                        </div>
                        @if (User.CanView("EntityHelpPage", "SectionName"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvSectionName">
                                <div class='form-group' title="Section Name">
                                    <label>@Html.LabelFor(model => model.SectionName) <span class="text-danger-reg">*</span></label>


                                    @Html.TextBoxFor(model => model.SectionName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.SectionName)

                                </div>
                            </div>
                        }
                        @if (User.CanView("EntityHelpPage", "Order"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvOrder">
                                <div class='form-group' title="Order">
                                    <label>@Html.LabelFor(model => model.Order) <span class="text-danger-reg">*</span></label>


                                    @Html.TextBoxFor(model => model.Order, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Order)

                                </div>
                            </div>
                        }
                        @if (User.CanView("EntityHelpPage", "SectionText"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvSectionText">
                                <div class='form-group' title="Section Text">
                                    <label>@Html.LabelFor(model => model.SectionText) </label>
                                    @Html.TextAreaFor(model => model.SectionText, new { @id = "summernote" })
                                    @Html.ValidationMessageFor(model => model.SectionText)
                                    <script>
                                        $(document).ready(function () {
                                            $("#summernote").summernote();
                                        });
                                    </script>
                                </div>
                            </div>
                        }
                        @if (User.CanView("EntityHelpPage", "Disable"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvDisable" style="display:none;">
                                <div class="form-group" title="Disable">
                                    <label>
                                        @Html.LabelFor(model => model.Disable)
                                    </label>

                                    @Html.CheckBox("Disable", false)
                                    @Html.ValidationMessageFor(model => model.Disable)

                                </div>
                            </div>}
                        @if (User.CanView("EntityHelpPage", "EntityName"))
                        {
                            <div class='col-sm-6 col-md-6 col-xs-12' id="dvEntityName" style="display:none;">
                                <div class='form-group' title="Entity Name">
                                    <label>@Html.LabelFor(model => model.EntityName) </label>


                                    @Html.TextBoxFor(model => model.EntityName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.EntityName)

                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    if (ViewBag.IsPartial == null)
    {
        <a class="btn btn-default " onclick="goBack('@Url.Action("Index","EntityHelpPage")');" alt="Cancel" title="Cancel">Cancel</a>
    }
    if (ViewBag.IsPartial == null)
    {
        <input type="submit" name="command" value="Create" class="btn btn-primary " alt="Create" title="Create" />
    }
    if (ViewBag.IsPartial == null)
    {
        if (ViewBag.IsDDAdd == null && User.CanEdit("EntityHelpPage"))
        {
            <input type="submit" name="command" value="Create & Continue" class="btn btn-primary " alt="Create & Continue" title="Create & Continue" />
            <input type="submit" name="command" value="Create & Add another" class="btn btn-primary " alt="Create & Add another" title="Create & Add another" />   }
    }
    <input type="hidden" name="hdncommand" value="" />
    <br /><br />
    <div style="display:none;">
        @Html.DropDownList("EntityNameDD", null, "-- Select --", new { @required = "required", @class = "form-control" })
    </div>
}

<script type="text/javascript">
    function CancelFromDivTab_EntityHelpPage() {
        var associationname = '@Convert.ToString(ViewData["AssociatedType"])';
        if (associationname != '' && associationname != null) {
        }
    }
    function CreateFromDivTab_EntityHelpPage() {
        $('input:hidden[name="hdncommand"]').val("Create");
        var form2 = $("#frmEntityHelpPage");
        if (!form2.valid()) { return; }
        var form = form2.serialize();
        var frmUrl = form2.attr('action');
        var fdata = new FormData(form2[0]);
        $.ajax({
            url: frmUrl,
            type: "POST",
            cache: false,
            data: fdata,
            processData: false,
            contentType: false,
            success: function (result) {
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert('failed');
                return false;
            }
        });
    }
</script>
<script>
    $(function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        var browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        if (!browser.msie) {
            $('form').areYouSure();
        }
        else if (browser.version > 8.0) {
            $('form').areYouSure();
        }
    });
</script>
@{
    if (ViewBag.IsPartial == true)
    {
        <link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
        <link href="@Url.Content("~/Content/chosen.css")" rel="stylesheet" type="text/css" />
        <script src="@Url.Content("~/bundles/jqueryval")" type="text/javascript"></script>
        <script src="@Url.Content("~/bundles/common3")" type="text/javascript"></script>
            <script type="text/javascript">
                var config = {
                    '.chosen-select': {},
                    '.chosen-select-deselect': { allow_single_deselect: true },
                    '.chosen-select-no-single': { disable_search_threshold: 10 },
                    '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                    '.chosen-select-width': { width: "95%" }
                }
                for (var selector in config) {
                    $(selector).chosen(config[selector]);
                }
            </script>}
    var businessrule = User.businessrules.Where(p => p.EntityName == "EntityHelpPage").ToList();
    if ((businessrule != null && businessrule.Count > 0))
    {
        <script>
            $("form").submit(function (event) {
                //if (!$("#frmEntityHelpPage").valid()) return;
                var flag = true;
                document.getElementById("ErrMsg").innerHTML = "";
                var dataurl = "";
                var form = "";
                var inlinecount = "0";
                //var form = $(this).serialize();
                form = $("#frmEntityHelpPage").serialize();

                dataurl = "@Url.Action("businessruletype", "EntityHelpPage", new { ruleType = "OnCreate"})";
                flag = ApplyBusinessRuleOnSubmit(dataurl, "EntityHelpPage", false, "ErrMsg", form);
                //business rules on inline associations
                if (flag) {
                    $('input:hidden[name="hdncommand"]').val($(document.activeElement).val());
                    $("#frmEntityHelpPage").find(':input').removeAttr('disabled');
                }
                else
                    $("html, body").animate({ scrollTop: 0 }, "fast");
                return flag;
            });
        </script>
    }
    else
    {
        <script>
            $("input[type='submit']").click(function (event) {
                if (!$("#frmEntityHelpPage").valid()) return;
                var $this = $(this);
                $('input:hidden[name="hdncommand"]').val($this.val());
            });
        </script>

    }
}

<script type='text/javascript'>
    $(document).ready(function () {
        try {
            focusOnControl('frmEntityHelpPage');
        }
        catch (ex) { }
    });
</script>
<script>
    $(document).ready(function () {
        try {
            var hostingEntityName = "";
            if ('@Convert.ToString(ViewData["AssociatedType"])'.length > 0) {
                hostingEntityName = '@Convert.ToString(ViewData["AssociatedType"])';
                $('#' + hostingEntityName + 'ID').attr("lock", "true");
                $('#' + hostingEntityName + 'ID').trigger("change");
                var Value = $('#' + hostingEntityName + 'ID' + ' option:selected').val();
                if (Value.length > 0) {
                    Value = $('#' + hostingEntityName + 'ID' + ' option:selected').text();
                    $("#EntityNameDD").val(Value);
                    var entvalue = $('#EntityNameDD option:selected').val();
                    $("#EntityName").val(entvalue);
                }
                var Value = $('#EntityOfEntityHelpID option:selected').val();
                if (Value.length > 0) {
                    Value = $('#EntityOfEntityHelpID option:selected').text();
                    $("#EntityNameDD").val(Value);
                    var entvalue = $('#EntityNameDD option:selected').val();
                    $("#EntityName").val(entvalue);
                }

            }
        }
        catch (ex) { }
    });
    function SetEntityName(obj) {
        var Value = $('#EntityOfEntityHelpID option:selected').val();
        if (Value.length > 0) {
            Value = $('#EntityOfEntityHelpID option:selected').text();
            $("#EntityNameDD").val(Value);
            var entvalue = $('#EntityNameDD option:selected').val();
            $("#EntityName").val(entvalue);
        }
        else
            $("#EntityName").val();

    }
</script>
